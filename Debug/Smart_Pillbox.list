
Smart_Pillbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002174  08002174  00012174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002184  08002184  00012184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002188  08002188  00012188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  0800218c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000080  20000024  20000024  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   000066f5  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001753  00000000  00000000  00026729  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000930  00000000  00000000  00027e80  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000838  00000000  00000000  000287b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003603  00000000  00000000  00028fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000231d  00000000  00000000  0002c5eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002e908  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000024fc  00000000  00000000  0002e984  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800215c 	.word	0x0800215c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	0800215c 	.word	0x0800215c

080001c8 <LL_ADC_REG_SetSequencerRanks>:
  *         (5) On STM32F3, ADC channel available only on all ADC instances, but
  *             only one ADC instance is allowed to be connected to VrefInt at the same time.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b089      	sub	sp, #36	; 0x24
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	3330      	adds	r3, #48	; 0x30
 80001d8:	4619      	mov	r1, r3
 80001da:	68bb      	ldr	r3, [r7, #8]
 80001dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80001e0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80001e4:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80001e6:	69ba      	ldr	r2, [r7, #24]
 80001e8:	fa92 f2a2 	rbit	r2, r2
 80001ec:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80001ee:	697a      	ldr	r2, [r7, #20]
 80001f0:	fab2 f282 	clz	r2, r2
 80001f4:	b2d2      	uxtb	r2, r2
 80001f6:	40d3      	lsrs	r3, r2
 80001f8:	009b      	lsls	r3, r3, #2
 80001fa:	440b      	add	r3, r1
 80001fc:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 80001fe:	69fb      	ldr	r3, [r7, #28]
 8000200:	681a      	ldr	r2, [r3, #0]
 8000202:	68bb      	ldr	r3, [r7, #8]
 8000204:	f003 031f 	and.w	r3, r3, #31
 8000208:	211f      	movs	r1, #31
 800020a:	fa01 f303 	lsl.w	r3, r1, r3
 800020e:	43db      	mvns	r3, r3
 8000210:	401a      	ands	r2, r3
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	0e9b      	lsrs	r3, r3, #26
 8000216:	f003 011f 	and.w	r1, r3, #31
 800021a:	68bb      	ldr	r3, [r7, #8]
 800021c:	f003 031f 	and.w	r3, r3, #31
 8000220:	fa01 f303 	lsl.w	r3, r1, r3
 8000224:	431a      	orrs	r2, r3
 8000226:	69fb      	ldr	r3, [r7, #28]
 8000228:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800022a:	bf00      	nop
 800022c:	3724      	adds	r7, #36	; 0x24
 800022e:	46bd      	mov	sp, r7
 8000230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000234:	4770      	bx	lr

08000236 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_181CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_601CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000236:	b480      	push	{r7}
 8000238:	b08d      	sub	sp, #52	; 0x34
 800023a:	af00      	add	r7, sp, #0
 800023c:	60f8      	str	r0, [r7, #12]
 800023e:	60b9      	str	r1, [r7, #8]
 8000240:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	3314      	adds	r3, #20
 8000246:	4619      	mov	r1, r3
 8000248:	68bb      	ldr	r3, [r7, #8]
 800024a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800024e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000252:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000254:	69ba      	ldr	r2, [r7, #24]
 8000256:	fa92 f2a2 	rbit	r2, r2
 800025a:	617a      	str	r2, [r7, #20]
  return result;
 800025c:	697a      	ldr	r2, [r7, #20]
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b2d2      	uxtb	r2, r2
 8000264:	40d3      	lsrs	r3, r2
 8000266:	009b      	lsls	r3, r3, #2
 8000268:	440b      	add	r3, r1
 800026a:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 800026c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800026e:	681a      	ldr	r2, [r3, #0]
 8000270:	68bb      	ldr	r3, [r7, #8]
 8000272:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8000276:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800027a:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800027c:	6a39      	ldr	r1, [r7, #32]
 800027e:	fa91 f1a1 	rbit	r1, r1
 8000282:	61f9      	str	r1, [r7, #28]
  return result;
 8000284:	69f9      	ldr	r1, [r7, #28]
 8000286:	fab1 f181 	clz	r1, r1
 800028a:	b2c9      	uxtb	r1, r1
 800028c:	40cb      	lsrs	r3, r1
 800028e:	2107      	movs	r1, #7
 8000290:	fa01 f303 	lsl.w	r3, r1, r3
 8000294:	43db      	mvns	r3, r3
 8000296:	401a      	ands	r2, r3
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800029e:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80002a2:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80002a6:	fa91 f1a1 	rbit	r1, r1
 80002aa:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 80002ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80002ae:	fab1 f181 	clz	r1, r1
 80002b2:	b2c9      	uxtb	r1, r1
 80002b4:	40cb      	lsrs	r3, r1
 80002b6:	6879      	ldr	r1, [r7, #4]
 80002b8:	fa01 f303 	lsl.w	r3, r1, r3
 80002bc:	431a      	orrs	r2, r3
 80002be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002c0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 80002c2:	bf00      	nop
 80002c4:	3734      	adds	r7, #52	; 0x34
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
	...

080002d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b085      	sub	sp, #20
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	60f8      	str	r0, [r7, #12]
 80002d8:	60b9      	str	r1, [r7, #8]
 80002da:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80002e2:	68b9      	ldr	r1, [r7, #8]
 80002e4:	4b0b      	ldr	r3, [pc, #44]	; (8000314 <LL_ADC_SetChannelSingleDiff+0x44>)
 80002e6:	400b      	ands	r3, r1
 80002e8:	43db      	mvns	r3, r3
 80002ea:	401a      	ands	r2, r3
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	f003 0318 	and.w	r3, r3, #24
 80002f2:	4908      	ldr	r1, [pc, #32]	; (8000314 <LL_ADC_SetChannelSingleDiff+0x44>)
 80002f4:	40d9      	lsrs	r1, r3
 80002f6:	68bb      	ldr	r3, [r7, #8]
 80002f8:	4019      	ands	r1, r3
 80002fa:	4b06      	ldr	r3, [pc, #24]	; (8000314 <LL_ADC_SetChannelSingleDiff+0x44>)
 80002fc:	400b      	ands	r3, r1
 80002fe:	431a      	orrs	r2, r3
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000306:	bf00      	nop
 8000308:	3714      	adds	r7, #20
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	0007fffe 	.word	0x0007fffe

08000318 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
  /* 1. Set the intermediate state before moving the ADC voltage regulator    */
  /*    to state enable.                                                      */
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	689b      	ldr	r3, [r3, #8]
 8000324:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	609a      	str	r2, [r3, #8]
  /* 2. Set the final state of ADC voltage regulator enable                   */
  /*    (ADVREGEN bits set to 0x01).                                          */
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	689b      	ldr	r3, [r3, #8]
 8000330:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000334:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000338:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN_0);
}
 8000340:	bf00      	nop
 8000342:	370c      	adds	r7, #12
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr

0800034c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	689b      	ldr	r3, [r3, #8]
 8000358:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800035c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000360:	f043 0201 	orr.w	r2, r3, #1
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000368:	bf00      	nop
 800036a:	370c      	adds	r7, #12
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr

08000374 <LL_ADC_StartCalibration>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	6039      	str	r1, [r7, #0]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	689b      	ldr	r3, [r3, #8]
 8000382:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000386:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800038a:	683a      	ldr	r2, [r7, #0]
 800038c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8000390:	4313      	orrs	r3, r2
 8000392:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	609a      	str	r2, [r3, #8]
             ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL | (SingleDiff & ADC_SINGLEDIFF_CALIB_START_MASK));
}
 800039a:	bf00      	nop
 800039c:	370c      	adds	r7, #12
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr

080003a6 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 80003a6:	b480      	push	{r7}
 80003a8:	b083      	sub	sp, #12
 80003aa:	af00      	add	r7, sp, #0
 80003ac:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	689b      	ldr	r3, [r3, #8]
 80003b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80003b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003ba:	bf0c      	ite	eq
 80003bc:	2301      	moveq	r3, #1
 80003be:	2300      	movne	r3, #0
 80003c0:	b2db      	uxtb	r3, r3
}
 80003c2:	4618      	mov	r0, r3
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr

080003ce <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80003ce:	b480      	push	{r7}
 80003d0:	b083      	sub	sp, #12
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	689b      	ldr	r3, [r3, #8]
 80003da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80003de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80003e2:	f043 0204 	orr.w	r2, r3, #4
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80003ea:	bf00      	nop
 80003ec:	370c      	adds	r7, #12
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr

080003f6 <LL_ADC_REG_ReadConversionData8>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData8
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_ADC_REG_ReadConversionData8(ADC_TypeDef *ADCx)
{
 80003f6:	b480      	push	{r7}
 80003f8:	b083      	sub	sp, #12
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000402:	b2db      	uxtb	r3, r3
}
 8000404:	4618      	mov	r0, r3
 8000406:	370c      	adds	r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr

08000410 <LL_ADC_IsActiveFlag_ADRDY>:
  * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	f003 0301 	and.w	r3, r3, #1
 8000420:	2b01      	cmp	r3, #1
 8000422:	bf0c      	ite	eq
 8000424:	2301      	moveq	r3, #1
 8000426:	2300      	movne	r3, #0
 8000428:	b2db      	uxtb	r3, r3
}
 800042a:	4618      	mov	r0, r3
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr

08000436 <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
 8000436:	b480      	push	{r7}
 8000438:	b083      	sub	sp, #12
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	f003 0304 	and.w	r3, r3, #4
 8000446:	2b04      	cmp	r3, #4
 8000448:	bf0c      	ite	eq
 800044a:	2301      	moveq	r3, #1
 800044c:	2300      	movne	r3, #0
 800044e:	b2db      	uxtb	r3, r3
}
 8000450:	4618      	mov	r0, r3
 8000452:	370c      	adds	r7, #12
 8000454:	46bd      	mov	sp, r7
 8000456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045a:	4770      	bx	lr

0800045c <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	2204      	movs	r2, #4
 8000468:	601a      	str	r2, [r3, #0]
}
 800046a:	bf00      	nop
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
	...

08000478 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000480:	4908      	ldr	r1, [pc, #32]	; (80004a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000482:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000484:	695a      	ldr	r2, [r3, #20]
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4313      	orrs	r3, r2
 800048a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800048c:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800048e:	695a      	ldr	r2, [r3, #20]
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4013      	ands	r3, r2
 8000494:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000496:	68fb      	ldr	r3, [r7, #12]
}
 8000498:	bf00      	nop
 800049a:	3714      	adds	r7, #20
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	40021000 	.word	0x40021000

080004a8 <MX_ADC1_Init>:
const uint32_t ADC_Sampling_Time_Map[ADC_Channel_Num] = {LL_ADC_SAMPLINGTIME_601CYCLES_5, LL_ADC_SAMPLINGTIME_601CYCLES_5};
/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b094      	sub	sp, #80	; 0x50
 80004ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80004ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
 80004b8:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80004ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	605a      	str	r2, [r3, #4]
 80004c4:	609a      	str	r2, [r3, #8]
 80004c6:	60da      	str	r2, [r3, #12]
 80004c8:	611a      	str	r2, [r3, #16]
 80004ca:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80004cc:	f107 0318 	add.w	r3, r7, #24
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
 80004d8:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004da:	463b      	mov	r3, r7
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	60da      	str	r2, [r3, #12]
 80004e6:	611a      	str	r2, [r3, #16]
 80004e8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC12);
 80004ea:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80004ee:	f7ff ffc3 	bl	8000478 <LL_AHB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80004f2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80004f6:	f7ff ffbf 	bl	8000478 <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA0   ------> ADC1_IN1
  PA1   ------> ADC1_IN2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 80004fa:	2303      	movs	r3, #3
 80004fc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80004fe:	2303      	movs	r3, #3
 8000500:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000502:	2300      	movs	r3, #0
 8000504:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000506:	463b      	mov	r3, r7
 8000508:	4619      	mov	r1, r3
 800050a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050e:	f001 f8ac 	bl	800166a <LL_GPIO_Init>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_8B;
 8000512:	2310      	movs	r3, #16
 8000514:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000516:	2300      	movs	r3, #0
 8000518:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 800051a:	2300      	movs	r3, #0
 800051c:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800051e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000522:	4619      	mov	r1, r3
 8000524:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000528:	f000 ff2a 	bl	8001380 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800052c:	2300      	movs	r3, #0
 800052e:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000530:	2300      	movs	r3, #0
 8000532:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000534:	2300      	movs	r3, #0
 8000536:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000538:	2300      	movs	r3, #0
 800053a:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 800053c:	2301      	movs	r3, #1
 800053e:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 8000540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000544:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000546:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800054a:	4619      	mov	r1, r3
 800054c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000550:	f000 ff3c 	bl	80013cc <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8000554:	2300      	movs	r3, #0
 8000556:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000558:	2300      	movs	r3, #0
 800055a:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 800055c:	f107 0318 	add.w	r3, r7, #24
 8000560:	4619      	mov	r1, r3
 8000562:	481a      	ldr	r0, [pc, #104]	; (80005cc <MX_ADC1_Init+0x124>)
 8000564:	f000 fecc 	bl	8001300 <LL_ADC_CommonInit>

  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8000568:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800056c:	f7ff fed4 	bl	8000318 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000570:	4b17      	ldr	r3, [pc, #92]	; (80005d0 <MX_ADC1_Init+0x128>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	099b      	lsrs	r3, r3, #6
 8000576:	4a17      	ldr	r2, [pc, #92]	; (80005d4 <MX_ADC1_Init+0x12c>)
 8000578:	fba2 2303 	umull	r2, r3, r2, r3
 800057c:	099a      	lsrs	r2, r3, #6
 800057e:	4613      	mov	r3, r2
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	4413      	add	r3, r2
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	461a      	mov	r2, r3
 8000588:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <MX_ADC1_Init+0x130>)
 800058a:	fba3 2302 	umull	r2, r3, r3, r2
 800058e:	08db      	lsrs	r3, r3, #3
 8000590:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000592:	e002      	b.n	800059a <MX_ADC1_Init+0xf2>
  {
    wait_loop_index--;
 8000594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000596:	3b01      	subs	r3, #1
 8000598:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 800059a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800059c:	2b00      	cmp	r3, #0
 800059e:	d1f9      	bne.n	8000594 <MX_ADC1_Init+0xec>
  }
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 80005a0:	4a0e      	ldr	r2, [pc, #56]	; (80005dc <MX_ADC1_Init+0x134>)
 80005a2:	2106      	movs	r1, #6
 80005a4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80005a8:	f7ff fe0e 	bl	80001c8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_601CYCLES_5);
 80005ac:	2207      	movs	r2, #7
 80005ae:	490b      	ldr	r1, [pc, #44]	; (80005dc <MX_ADC1_Init+0x134>)
 80005b0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80005b4:	f7ff fe3f 	bl	8000236 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 80005b8:	227f      	movs	r2, #127	; 0x7f
 80005ba:	4908      	ldr	r1, [pc, #32]	; (80005dc <MX_ADC1_Init+0x134>)
 80005bc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80005c0:	f7ff fe86 	bl	80002d0 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c4:	bf00      	nop
 80005c6:	3750      	adds	r7, #80	; 0x50
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	50000300 	.word	0x50000300
 80005d0:	20000000 	.word	0x20000000
 80005d4:	053e2d63 	.word	0x053e2d63
 80005d8:	cccccccd 	.word	0xcccccccd
 80005dc:	04300002 	.word	0x04300002

080005e0 <MX_ADC1_Enable>:

/* USER CODE BEGIN 1 */

/*This function enable ADC*/
void MX_ADC1_Enable(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	LL_ADC_Enable(ADC1);
 80005e4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80005e8:	f7ff feb0 	bl	800034c <LL_ADC_Enable>
	while(!LL_ADC_IsActiveFlag_ADRDY(ADC1));
 80005ec:	bf00      	nop
 80005ee:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80005f2:	f7ff ff0d 	bl	8000410 <LL_ADC_IsActiveFlag_ADRDY>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d0f8      	beq.n	80005ee <MX_ADC1_Enable+0xe>

	return;
 80005fc:	bf00      	nop
}
 80005fe:	bd80      	pop	{r7, pc}

08000600 <MX_ADC1_Calibration>:
/*This Function start the ADC calibration and wait into the cycle until calibration is in progress*/
void MX_ADC1_Calibration(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	LL_ADC_StartCalibration(ADC1, LL_ADC_SINGLE_ENDED);
 8000604:	217f      	movs	r1, #127	; 0x7f
 8000606:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800060a:	f7ff feb3 	bl	8000374 <LL_ADC_StartCalibration>
	while(LL_ADC_IsCalibrationOnGoing(ADC1));
 800060e:	bf00      	nop
 8000610:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000614:	f7ff fec7 	bl	80003a6 <LL_ADC_IsCalibrationOnGoing>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d1f8      	bne.n	8000610 <MX_ADC1_Calibration+0x10>

	return;
 800061e:	bf00      	nop
}
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <MX_ADC1_SetChannel>:
 * just use one of the following arguments:
 * Channel 1: ADC_Channel_1
 * Channel 2: ADC_Channel_2
 */
void MX_ADC1_SetChannel(uint32_t Channel)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	LL_ADC_REG_SetSequencerRanks(ADC1,LL_ADC_REG_RANK_1, ADC_Channel_Map[Channel]);
 800062c:	4a0d      	ldr	r2, [pc, #52]	; (8000664 <MX_ADC1_SetChannel+0x40>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000634:	461a      	mov	r2, r3
 8000636:	2106      	movs	r1, #6
 8000638:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800063c:	f7ff fdc4 	bl	80001c8 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC1,ADC_Channel_Map[Channel],ADC_Sampling_Time_Map[Channel]);
 8000640:	4a08      	ldr	r2, [pc, #32]	; (8000664 <MX_ADC1_SetChannel+0x40>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000648:	4a07      	ldr	r2, [pc, #28]	; (8000668 <MX_ADC1_SetChannel+0x44>)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000650:	461a      	mov	r2, r3
 8000652:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000656:	f7ff fdee 	bl	8000236 <LL_ADC_SetChannelSamplingTime>

	return;
 800065a:	bf00      	nop
}
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	08002174 	.word	0x08002174
 8000668:	0800217c 	.word	0x0800217c

0800066c <MX_ADC1_StartConversion>:

/*This function start the ADC conversion process*/
void MX_ADC1_StartConversion(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	LL_ADC_REG_StartConversion(ADC1);
 8000670:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000674:	f7ff feab 	bl	80003ce <LL_ADC_REG_StartConversion>
	/*This cycle waits until the end of conversion flag is active*/
	while(!LL_ADC_IsActiveFlag_EOC(ADC1));
 8000678:	bf00      	nop
 800067a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800067e:	f7ff feda 	bl	8000436 <LL_ADC_IsActiveFlag_EOC>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d0f8      	beq.n	800067a <MX_ADC1_StartConversion+0xe>
	/*When ADC finish the conversion just clear the EOC flag*/
	LL_ADC_ClearFlag_EOC(ADC1);
 8000688:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800068c:	f7ff fee6 	bl	800045c <LL_ADC_ClearFlag_EOC>

	return;
 8000690:	bf00      	nop
}
 8000692:	bd80      	pop	{r7, pc}

08000694 <MX_ADC1_GetValue>:

/*This function get the ADC value on a 8 bits format*/
uint16_t MX_ADC1_GetValue(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
	uint16_t ADC_value;
	ADC_value=LL_ADC_REG_ReadConversionData8(ADC1);
 800069a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800069e:	f7ff feaa 	bl	80003f6 <LL_ADC_REG_ReadConversionData8>
 80006a2:	4603      	mov	r3, r0
 80006a4:	80fb      	strh	r3, [r7, #6]
	return ADC_value;
 80006a6:	88fb      	ldrh	r3, [r7, #6]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <LL_AHB1_GRP1_EnableClock>:
{
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80006b8:	4908      	ldr	r1, [pc, #32]	; (80006dc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006bc:	695a      	ldr	r2, [r3, #20]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006c6:	695a      	ldr	r2, [r3, #20]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4013      	ands	r3, r2
 80006cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006ce:	68fb      	ldr	r3, [r7, #12]
}
 80006d0:	bf00      	nop
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	40021000 	.word	0x40021000

080006e0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	683a      	ldr	r2, [r7, #0]
 80006ee:	619a      	str	r2, [r3, #24]
}
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	463b      	mov	r3, r7
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
 8000710:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000712:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000716:	f7ff ffcb 	bl	80006b0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800071a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800071e:	f7ff ffc7 	bl	80006b0 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOA, LCD_RESET_Pin|LCD_A0_Pin);
 8000722:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072a:	f7ff ffd9 	bl	80006e0 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(LCD_CS_N_GPIO_Port, LCD_CS_N_Pin);
 800072e:	2140      	movs	r1, #64	; 0x40
 8000730:	4813      	ldr	r0, [pc, #76]	; (8000780 <MX_GPIO_Init+0x84>)
 8000732:	f7ff ffd5 	bl	80006e0 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_A0_Pin;
 8000736:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800073a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800073c:	2301      	movs	r3, #1
 800073e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000740:	2300      	movs	r3, #0
 8000742:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000748:	2301      	movs	r3, #1
 800074a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074c:	463b      	mov	r3, r7
 800074e:	4619      	mov	r1, r3
 8000750:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000754:	f000 ff89 	bl	800166a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LCD_CS_N_Pin;
 8000758:	2340      	movs	r3, #64	; 0x40
 800075a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800075c:	2301      	movs	r3, #1
 800075e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000760:	2300      	movs	r3, #0
 8000762:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000768:	2300      	movs	r3, #0
 800076a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LCD_CS_N_GPIO_Port, &GPIO_InitStruct);
 800076c:	463b      	mov	r3, r7
 800076e:	4619      	mov	r1, r3
 8000770:	4803      	ldr	r0, [pc, #12]	; (8000780 <MX_GPIO_Init+0x84>)
 8000772:	f000 ff7a 	bl	800166a <LL_GPIO_Init>

}
 8000776:	bf00      	nop
 8000778:	3718      	adds	r7, #24
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	48000400 	.word	0x48000400

08000784 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	601a      	str	r2, [r3, #0]
}
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	601a      	str	r2, [r3, #0]
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <LL_I2C_SetMasterAddressingMode>:
  *         @arg @ref LL_I2C_ADDRESSING_MODE_7BIT
  *         @arg @ref LL_I2C_ADDRESSING_MODE_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMasterAddressingMode(I2C_TypeDef *I2Cx, uint32_t AddressingMode)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_ADD10, AddressingMode);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	431a      	orrs	r2, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	605a      	str	r2, [r3, #4]
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr

080007ea <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 80007ea:	b480      	push	{r7}
 80007ec:	b085      	sub	sp, #20
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	60f8      	str	r0, [r7, #12]
 80007f2:	60b9      	str	r1, [r7, #8]
 80007f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	68db      	ldr	r3, [r3, #12]
 80007fa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80007fe:	f023 0306 	bic.w	r3, r3, #6
 8000802:	68b9      	ldr	r1, [r7, #8]
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	430a      	orrs	r2, r1
 8000808:	431a      	orrs	r2, r3
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	60da      	str	r2, [r3, #12]
}
 800080e:	bf00      	nop
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 800081a:	b480      	push	{r7}
 800081c:	b083      	sub	sp, #12
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	68db      	ldr	r3, [r3, #12]
 8000826:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	60da      	str	r2, [r3, #12]
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr

0800083a <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 800083a:	b480      	push	{r7}
 800083c:	b083      	sub	sp, #12
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	605a      	str	r2, [r3, #4]
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
	...

0800085c <LL_AHB1_GRP1_EnableClock>:
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000864:	4908      	ldr	r1, [pc, #32]	; (8000888 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000868:	695a      	ldr	r2, [r3, #20]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4313      	orrs	r3, r2
 800086e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000872:	695a      	ldr	r2, [r3, #20]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4013      	ands	r3, r2
 8000878:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800087a:	68fb      	ldr	r3, [r7, #12]
}
 800087c:	bf00      	nop
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	40021000 	.word	0x40021000

0800088c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000894:	4908      	ldr	r1, [pc, #32]	; (80008b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000898:	69da      	ldr	r2, [r3, #28]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4313      	orrs	r3, r2
 800089e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008a2:	69da      	ldr	r2, [r3, #28]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4013      	ands	r3, r2
 80008a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008aa:	68fb      	ldr	r3, [r7, #12]
}
 80008ac:	bf00      	nop
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	40021000 	.word	0x40021000

080008bc <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08e      	sub	sp, #56	; 0x38
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]
 80008d2:	615a      	str	r2, [r3, #20]
 80008d4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
 80008e4:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80008e6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80008ea:	f7ff ffb7 	bl	800085c <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 80008ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80008f4:	2302      	movs	r3, #2
 80008f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80008f8:	2303      	movs	r3, #3
 80008fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80008fc:	2301      	movs	r3, #1
 80008fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000904:	2304      	movs	r3, #4
 8000906:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	4619      	mov	r1, r3
 800090c:	481a      	ldr	r0, [pc, #104]	; (8000978 <MX_I2C1_Init+0xbc>)
 800090e:	f000 feac 	bl	800166a <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8000912:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000916:	f7ff ffb9 	bl	800088c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 800091a:	4818      	ldr	r0, [pc, #96]	; (800097c <MX_I2C1_Init+0xc0>)
 800091c:	f7ff ff8d 	bl	800083a <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8000920:	4816      	ldr	r0, [pc, #88]	; (800097c <MX_I2C1_Init+0xc0>)
 8000922:	f7ff ff7a 	bl	800081a <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8000926:	4815      	ldr	r0, [pc, #84]	; (800097c <MX_I2C1_Init+0xc0>)
 8000928:	f7ff ff3c 	bl	80007a4 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 800092c:	4813      	ldr	r0, [pc, #76]	; (800097c <MX_I2C1_Init+0xc0>)
 800092e:	f7ff ff29 	bl	8000784 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x00101D7C;
 8000936:	4b12      	ldr	r3, [pc, #72]	; (8000980 <MX_I2C1_Init+0xc4>)
 8000938:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000946:	2300      	movs	r3, #0
 8000948:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_10BIT;
 800094a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800094e:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	4809      	ldr	r0, [pc, #36]	; (800097c <MX_I2C1_Init+0xc0>)
 8000958:	f000 ff9a 	bl	8001890 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 800095c:	2200      	movs	r2, #0
 800095e:	2100      	movs	r1, #0
 8000960:	4806      	ldr	r0, [pc, #24]	; (800097c <MX_I2C1_Init+0xc0>)
 8000962:	f7ff ff42 	bl	80007ea <LL_I2C_SetOwnAddress2>
  LL_I2C_SetMasterAddressingMode(I2C1, LL_I2C_ADDRESSING_MODE_10BIT);
 8000966:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800096a:	4804      	ldr	r0, [pc, #16]	; (800097c <MX_I2C1_Init+0xc0>)
 800096c:	f7ff ff2a 	bl	80007c4 <LL_I2C_SetMasterAddressingMode>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	3738      	adds	r7, #56	; 0x38
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	48000400 	.word	0x48000400
 800097c:	40005400 	.word	0x40005400
 8000980:	00101d7c 	.word	0x00101d7c

08000984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	f003 0307 	and.w	r3, r3, #7
 8000992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <__NVIC_SetPriorityGrouping+0x44>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800099a:	68ba      	ldr	r2, [r7, #8]
 800099c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009a0:	4013      	ands	r3, r2
 80009a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009b6:	4a04      	ldr	r2, [pc, #16]	; (80009c8 <__NVIC_SetPriorityGrouping+0x44>)
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	60d3      	str	r3, [r2, #12]
}
 80009bc:	bf00      	nop
 80009be:	3714      	adds	r7, #20
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d0:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <__NVIC_GetPriorityGrouping+0x18>)
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	0a1b      	lsrs	r3, r3, #8
 80009d6:	f003 0307 	and.w	r3, r3, #7
}
 80009da:	4618      	mov	r0, r3
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	6039      	str	r1, [r7, #0]
 80009f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	db0a      	blt.n	8000a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fc:	490d      	ldr	r1, [pc, #52]	; (8000a34 <__NVIC_SetPriority+0x4c>)
 80009fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a02:	683a      	ldr	r2, [r7, #0]
 8000a04:	b2d2      	uxtb	r2, r2
 8000a06:	0112      	lsls	r2, r2, #4
 8000a08:	b2d2      	uxtb	r2, r2
 8000a0a:	440b      	add	r3, r1
 8000a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a10:	e00a      	b.n	8000a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a12:	4909      	ldr	r1, [pc, #36]	; (8000a38 <__NVIC_SetPriority+0x50>)
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	f003 030f 	and.w	r3, r3, #15
 8000a1a:	3b04      	subs	r3, #4
 8000a1c:	683a      	ldr	r2, [r7, #0]
 8000a1e:	b2d2      	uxtb	r2, r2
 8000a20:	0112      	lsls	r2, r2, #4
 8000a22:	b2d2      	uxtb	r2, r2
 8000a24:	440b      	add	r3, r1
 8000a26:	761a      	strb	r2, [r3, #24]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	e000e100 	.word	0xe000e100
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b089      	sub	sp, #36	; 0x24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	f1c3 0307 	rsb	r3, r3, #7
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	bf28      	it	cs
 8000a5a:	2304      	movcs	r3, #4
 8000a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	3304      	adds	r3, #4
 8000a62:	2b06      	cmp	r3, #6
 8000a64:	d902      	bls.n	8000a6c <NVIC_EncodePriority+0x30>
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3b03      	subs	r3, #3
 8000a6a:	e000      	b.n	8000a6e <NVIC_EncodePriority+0x32>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a70:	2201      	movs	r2, #1
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	fa02 f303 	lsl.w	r3, r2, r3
 8000a78:	1e5a      	subs	r2, r3, #1
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	401a      	ands	r2, r3
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a82:	2101      	movs	r1, #1
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8a:	1e59      	subs	r1, r3, #1
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a90:	4313      	orrs	r3, r2
         );
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3724      	adds	r7, #36	; 0x24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
	...

08000aa0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000aa4:	4a05      	ldr	r2, [pc, #20]	; (8000abc <LL_RCC_HSI_Enable+0x1c>)
 8000aa6:	4b05      	ldr	r3, [pc, #20]	; (8000abc <LL_RCC_HSI_Enable+0x1c>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	6013      	str	r3, [r2, #0]
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	40021000 	.word	0x40021000

08000ac0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <LL_RCC_HSI_IsReady+0x20>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f003 0302 	and.w	r3, r3, #2
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	bf0c      	ite	eq
 8000ad0:	2301      	moveq	r3, #1
 8000ad2:	2300      	movne	r3, #0
 8000ad4:	b2db      	uxtb	r3, r3
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000aec:	4907      	ldr	r1, [pc, #28]	; (8000b0c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000aee:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	00db      	lsls	r3, r3, #3
 8000afa:	4313      	orrs	r3, r2
 8000afc:	600b      	str	r3, [r1, #0]
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40021000 	.word	0x40021000

08000b10 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000b14:	4a05      	ldr	r2, [pc, #20]	; (8000b2c <LL_RCC_LSI_Enable+0x1c>)
 8000b16:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <LL_RCC_LSI_Enable+0x1c>)
 8000b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b1a:	f043 0301 	orr.w	r3, r3, #1
 8000b1e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	40021000 	.word	0x40021000

08000b30 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY));
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <LL_RCC_LSI_IsReady+0x20>)
 8000b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b38:	f003 0302 	and.w	r3, r3, #2
 8000b3c:	2b02      	cmp	r3, #2
 8000b3e:	bf0c      	ite	eq
 8000b40:	2301      	moveq	r3, #1
 8000b42:	2300      	movne	r3, #0
 8000b44:	b2db      	uxtb	r3, r3
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	40021000 	.word	0x40021000

08000b54 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000b5c:	4906      	ldr	r1, [pc, #24]	; (8000b78 <LL_RCC_SetSysClkSource+0x24>)
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <LL_RCC_SetSysClkSource+0x24>)
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f023 0203 	bic.w	r2, r3, #3
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	604b      	str	r3, [r1, #4]
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	40021000 	.word	0x40021000

08000b7c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <LL_RCC_GetSysClkSource+0x18>)
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f003 030c 	and.w	r3, r3, #12
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	40021000 	.word	0x40021000

08000b98 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000ba0:	4906      	ldr	r1, [pc, #24]	; (8000bbc <LL_RCC_SetAHBPrescaler+0x24>)
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <LL_RCC_SetAHBPrescaler+0x24>)
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	604b      	str	r3, [r1, #4]
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000bc8:	4906      	ldr	r1, [pc, #24]	; (8000be4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	604b      	str	r3, [r1, #4]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	40021000 	.word	0x40021000

08000be8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000bf0:	4906      	ldr	r1, [pc, #24]	; (8000c0c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	604b      	str	r3, [r1, #4]
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	40021000 	.word	0x40021000

08000c10 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8000c18:	4908      	ldr	r1, [pc, #32]	; (8000c3c <LL_RCC_SetI2CClockSource+0x2c>)
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <LL_RCC_SetI2CClockSource+0x2c>)
 8000c1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	0e1b      	lsrs	r3, r3, #24
 8000c22:	43db      	mvns	r3, r3
 8000c24:	401a      	ands	r2, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	40021000 	.word	0x40021000

08000c40 <LL_RCC_SetADCClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
#if defined(RCC_CFGR2_ADCPRE34)
  MODIFY_REG(RCC->CFGR2, (ADCxSource >> 16U), (ADCxSource & 0x0000FFFFU));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_ADCPRE12, ADCxSource);
 8000c48:	4906      	ldr	r1, [pc, #24]	; (8000c64 <LL_RCC_SetADCClockSource+0x24>)
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <LL_RCC_SetADCClockSource+0x24>)
 8000c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c4e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_ADCPRE34 */
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	40021000 	.word	0x40021000

08000c68 <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8000c70:	4906      	ldr	r1, [pc, #24]	; (8000c8c <LL_RCC_SetRTCClockSource+0x24>)
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <LL_RCC_SetRTCClockSource+0x24>)
 8000c74:	6a1b      	ldr	r3, [r3, #32]
 8000c76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	620b      	str	r3, [r1, #32]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	40021000 	.word	0x40021000

08000c90 <LL_RCC_GetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSE
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  */
__STATIC_INLINE uint32_t LL_RCC_GetRTCClockSource(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8000c94:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <LL_RCC_GetRTCClockSource+0x18>)
 8000c96:	6a1b      	ldr	r3, [r3, #32]
 8000c98:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	40021000 	.word	0x40021000

08000cac <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000cb0:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <LL_RCC_EnableRTC+0x1c>)
 8000cb2:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <LL_RCC_EnableRTC+0x1c>)
 8000cb4:	6a1b      	ldr	r3, [r3, #32]
 8000cb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cba:	6213      	str	r3, [r2, #32]
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40021000 	.word	0x40021000

08000ccc <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000cd0:	4a05      	ldr	r2, [pc, #20]	; (8000ce8 <LL_RCC_ForceBackupDomainReset+0x1c>)
 8000cd2:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <LL_RCC_ForceBackupDomainReset+0x1c>)
 8000cd4:	6a1b      	ldr	r3, [r3, #32]
 8000cd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cda:	6213      	str	r3, [r2, #32]
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	40021000 	.word	0x40021000

08000cec <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000cf0:	4a05      	ldr	r2, [pc, #20]	; (8000d08 <LL_RCC_ReleaseBackupDomainReset+0x1c>)
 8000cf2:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <LL_RCC_ReleaseBackupDomainReset+0x1c>)
 8000cf4:	6a1b      	ldr	r3, [r3, #32]
 8000cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cfa:	6213      	str	r3, [r2, #32]
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	40021000 	.word	0x40021000

08000d0c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000d10:	4a05      	ldr	r2, [pc, #20]	; (8000d28 <LL_RCC_PLL_Enable+0x1c>)
 8000d12:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <LL_RCC_PLL_Enable+0x1c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d1a:	6013      	str	r3, [r2, #0]
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	40021000 	.word	0x40021000

08000d2c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <LL_RCC_PLL_IsReady+0x24>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000d3c:	bf0c      	ite	eq
 8000d3e:	2301      	moveq	r3, #1
 8000d40:	2300      	movne	r3, #0
 8000d42:	b2db      	uxtb	r3, r3
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	40021000 	.word	0x40021000

08000d54 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 8000d5e:	480e      	ldr	r0, [pc, #56]	; (8000d98 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000d60:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	430b      	orrs	r3, r1
 8000d72:	4313      	orrs	r3, r2
 8000d74:	6043      	str	r3, [r0, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 8000d76:	4908      	ldr	r1, [pc, #32]	; (8000d98 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000d78:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d7c:	f023 020f 	bic.w	r2, r3, #15
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f003 030f 	and.w	r3, r3, #15
 8000d86:	4313      	orrs	r3, r2
 8000d88:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	40021000 	.word	0x40021000

08000d9c <LL_APB1_GRP1_EnableClock>:
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000da4:	4908      	ldr	r1, [pc, #32]	; (8000dc8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000da8:	69da      	ldr	r2, [r3, #28]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000db2:	69da      	ldr	r2, [r3, #28]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4013      	ands	r3, r2
 8000db8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dba:	68fb      	ldr	r3, [r7, #12]
}
 8000dbc:	bf00      	nop
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	40021000 	.word	0x40021000

08000dcc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000dd4:	4908      	ldr	r1, [pc, #32]	; (8000df8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000dd6:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000dd8:	699a      	ldr	r2, [r3, #24]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000de2:	699a      	ldr	r2, [r3, #24]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4013      	ands	r3, r2
 8000de8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dea:	68fb      	ldr	r3, [r7, #12]
}
 8000dec:	bf00      	nop
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	40021000 	.word	0x40021000

08000dfc <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000e04:	4906      	ldr	r1, [pc, #24]	; (8000e20 <LL_FLASH_SetLatency+0x24>)
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <LL_FLASH_SetLatency+0x24>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f023 0207 	bic.w	r2, r3, #7
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	600b      	str	r3, [r1, #0]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	40022000 	.word	0x40022000

08000e24 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000e28:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <LL_FLASH_GetLatency+0x18>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f003 0307 	and.w	r3, r3, #7
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	40022000 	.word	0x40022000

08000e40 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR    DBP       LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e44:	4a05      	ldr	r2, [pc, #20]	; (8000e5c <LL_PWR_EnableBkUpAccess+0x1c>)
 8000e46:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <LL_PWR_EnableBkUpAccess+0x1c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e4e:	6013      	str	r3, [r2, #0]
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	40007000 	.word	0x40007000

08000e60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000e64:	2001      	movs	r0, #1
 8000e66:	f7ff ffb1 	bl	8000dcc <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000e6a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000e6e:	f7ff ff95 	bl	8000d9c <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e72:	2003      	movs	r0, #3
 8000e74:	f7ff fd86 	bl	8000984 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8000e78:	f7ff fda8 	bl	80009cc <__NVIC_GetPriorityGrouping>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2200      	movs	r2, #0
 8000e80:	210f      	movs	r1, #15
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fdda 	bl	8000a3c <NVIC_EncodePriority>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e90:	f7ff fdaa 	bl	80009e8 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e94:	f000 f812 	bl	8000ebc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e98:	f7ff fc30 	bl	80006fc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TEMPSen_Init();
 8000e9c:	f001 f90a 	bl	80020b4 <HAL_TEMPSen_Init>
  HAL_RTC_Init();
 8000ea0:	f001 f902 	bl	80020a8 <HAL_RTC_Init>
  //TEST fer
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_POT_Init();
 8000ea4:	f001 f8be 	bl	8002024 <HAL_POT_Init>


  while (1)
  {
	  POT1_Value=HAL_POT_Percentage(POT1_Channel);
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f001 f8dd 	bl	8002068 <HAL_POT_Percentage>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	4b01      	ldr	r3, [pc, #4]	; (8000eb8 <main+0x58>)
 8000eb4:	801a      	strh	r2, [r3, #0]
 8000eb6:	e7f7      	b.n	8000ea8 <main+0x48>
 8000eb8:	20000020 	.word	0x20000020

08000ebc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000ec0:	2002      	movs	r0, #2
 8000ec2:	f7ff ff9b 	bl	8000dfc <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000ec6:	bf00      	nop
 8000ec8:	f7ff ffac 	bl	8000e24 <LL_FLASH_GetLatency>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d1fa      	bne.n	8000ec8 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8000ed2:	f7ff fde5 	bl	8000aa0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000ed6:	bf00      	nop
 8000ed8:	f7ff fdf2 	bl	8000ac0 <LL_RCC_HSI_IsReady>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d1fa      	bne.n	8000ed8 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000ee2:	2010      	movs	r0, #16
 8000ee4:	f7ff fdfe 	bl	8000ae4 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_LSI_Enable();
 8000ee8:	f7ff fe12 	bl	8000b10 <LL_RCC_LSI_Enable>

   /* Wait till LSI is ready */
  while(LL_RCC_LSI_IsReady() != 1)
 8000eec:	bf00      	nop
 8000eee:	f7ff fe1f 	bl	8000b30 <LL_RCC_LSI_IsReady>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d1fa      	bne.n	8000eee <SystemClock_Config+0x32>
  {

  }
  LL_PWR_EnableBkUpAccess();
 8000ef8:	f7ff ffa2 	bl	8000e40 <LL_PWR_EnableBkUpAccess>
  if(LL_RCC_GetRTCClockSource() != LL_RCC_RTC_CLKSOURCE_LSI)
 8000efc:	f7ff fec8 	bl	8000c90 <LL_RCC_GetRTCClockSource>
 8000f00:	4603      	mov	r3, r0
 8000f02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f06:	d007      	beq.n	8000f18 <SystemClock_Config+0x5c>
  {
    LL_RCC_ForceBackupDomainReset();
 8000f08:	f7ff fee0 	bl	8000ccc <LL_RCC_ForceBackupDomainReset>
    LL_RCC_ReleaseBackupDomainReset();
 8000f0c:	f7ff feee 	bl	8000cec <LL_RCC_ReleaseBackupDomainReset>
    LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSI);
 8000f10:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f14:	f7ff fea8 	bl	8000c68 <LL_RCC_SetRTCClockSource>
  }
  LL_RCC_EnableRTC();
 8000f18:	f7ff fec8 	bl	8000cac <LL_RCC_EnableRTC>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_16);
 8000f1c:	f44f 1160 	mov.w	r1, #3670016	; 0x380000
 8000f20:	2000      	movs	r0, #0
 8000f22:	f7ff ff17 	bl	8000d54 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000f26:	f7ff fef1 	bl	8000d0c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000f2a:	bf00      	nop
 8000f2c:	f7ff fefe 	bl	8000d2c <LL_RCC_PLL_IsReady>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d1fa      	bne.n	8000f2c <SystemClock_Config+0x70>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000f36:	2000      	movs	r0, #0
 8000f38:	f7ff fe2e 	bl	8000b98 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000f3c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000f40:	f7ff fe3e 	bl	8000bc0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_16);
 8000f44:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8000f48:	f7ff fe4e 	bl	8000be8 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000f4c:	2002      	movs	r0, #2
 8000f4e:	f7ff fe01 	bl	8000b54 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000f52:	bf00      	nop
 8000f54:	f7ff fe12 	bl	8000b7c <LL_RCC_GetSysClkSource>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b08      	cmp	r3, #8
 8000f5c:	d1fa      	bne.n	8000f54 <SystemClock_Config+0x98>
  {

  }
  LL_Init1msTick(64000000);
 8000f5e:	4808      	ldr	r0, [pc, #32]	; (8000f80 <SystemClock_Config+0xc4>)
 8000f60:	f001 f81e 	bl	8001fa0 <LL_Init1msTick>
  LL_SetSystemCoreClock(64000000);
 8000f64:	4806      	ldr	r0, [pc, #24]	; (8000f80 <SystemClock_Config+0xc4>)
 8000f66:	f001 f84d 	bl	8002004 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8000f6a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000f6e:	f7ff fe4f 	bl	8000c10 <LL_RCC_SetI2CClockSource>
  LL_RCC_SetADCClockSource(LL_RCC_ADC12_CLKSRC_PLL_DIV_1);
 8000f72:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000f76:	f7ff fe63 	bl	8000c40 <LL_RCC_SetADCClockSource>
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	03d09000 	.word	0x03d09000

08000f84 <LL_RCC_EnableRTC>:
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000f88:	4a05      	ldr	r2, [pc, #20]	; (8000fa0 <LL_RCC_EnableRTC+0x1c>)
 8000f8a:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <LL_RCC_EnableRTC+0x1c>)
 8000f8c:	6a1b      	ldr	r3, [r3, #32]
 8000f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f92:	6213      	str	r3, [r2, #32]
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	40021000 	.word	0x40021000

08000fa4 <LL_RTC_EnableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_EnableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableInitMode(RTC_TypeDef *RTCx)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Set the Initialization mode */
  WRITE_REG(RTCx->ISR, RTC_INIT_MASK);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb2:	60da      	str	r2, [r3, #12]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <LL_RTC_DisableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_DisableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableInitMode(RTC_TypeDef *RTCx)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Exit Initialization mode */
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000fce:	60da      	str	r2, [r3, #12]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <LL_RTC_SetAsynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  AsynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7F
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetAsynchPrescaler(RTC_TypeDef *RTCx, uint32_t AsynchPrescaler)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	691b      	ldr	r3, [r3, #16]
 8000fea:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	041b      	lsls	r3, r3, #16
 8000ff2:	431a      	orrs	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	611a      	str	r2, [r3, #16]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <LL_RTC_SetSynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  SynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7FFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetSynchPrescaler(RTC_TypeDef *RTCx, uint32_t SynchPrescaler)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001016:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800101a:	683a      	ldr	r2, [r7, #0]
 800101c:	431a      	orrs	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	611a      	str	r2, [r3, #16]
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	22ff      	movs	r2, #255	; 0xff
 800103a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	22ca      	movs	r2, #202	; 0xca
 8001054:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2253      	movs	r2, #83	; 0x53
 800105a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <LL_RTC_BAK_SetRegister>:
  *         (*) value not defined in all devices.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_BAK_SetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister, uint32_t Data)
{
 8001068:	b480      	push	{r7}
 800106a:	b087      	sub	sp, #28
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]

  tmp = (uint32_t)(&(RTCx->BKP0R));
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	3350      	adds	r3, #80	; 0x50
 800107c:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	697a      	ldr	r2, [r7, #20]
 8001084:	4413      	add	r3, r2
 8001086:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	601a      	str	r2, [r3, #0]
}
 800108e:	bf00      	nop
 8001090:	371c      	adds	r7, #28
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <LL_RTC_BAK_GetRegister>:
  *
  *         (*) value not defined in all devices.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_BAK_GetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister)
{
 800109a:	b480      	push	{r7}
 800109c:	b085      	sub	sp, #20
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
 80010a2:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]

  tmp = (uint32_t)(&(RTCx->BKP0R));
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3350      	adds	r3, #80	; 0x50
 80010ac:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	4413      	add	r3, r2
 80010b6:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3714      	adds	r7, #20
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <LL_RTC_IsActiveFlag_INIT>:
  * @rmtoll ISR          INITF         LL_RTC_IsActiveFlag_INIT
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010d8:	2b40      	cmp	r3, #64	; 0x40
 80010da:	bf0c      	ite	eq
 80010dc:	2301      	moveq	r3, #1
 80010de:	2300      	movne	r3, #0
 80010e0:	b2db      	uxtb	r3, r3
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <LL_RTC_IsActiveFlag_RS>:
  * @rmtoll ISR          RSF           LL_RTC_IsActiveFlag_RS
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_RS(RTC_TypeDef *RTCx)
{
 80010ee:	b480      	push	{r7}
 80010f0:	b083      	sub	sp, #12
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	f003 0320 	and.w	r3, r3, #32
 80010fe:	2b20      	cmp	r3, #32
 8001100:	bf0c      	ite	eq
 8001102:	2301      	moveq	r3, #1
 8001104:	2300      	movne	r3, #0
 8001106:	b2db      	uxtb	r3, r3
}
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <LL_RTC_ClearFlag_RS>:
  * @rmtoll ISR          RSF           LL_RTC_ClearFlag_RS
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_RS(RTC_TypeDef *RTCx)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001124:	f063 02a0 	orn	r2, r3, #160	; 0xa0
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	60da      	str	r2, [r3, #12]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <MX_RTC_Init>:

/* USER CODE END 0 */

/* RTC init function */
void MX_RTC_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  LL_RTC_InitTypeDef RTC_InitStruct = {0};
 800113e:	f107 030c 	add.w	r3, r7, #12
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
  LL_RTC_TimeTypeDef RTC_TimeStruct = {0};
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
  LL_RTC_DateTypeDef RTC_DateStruct = {0};
 8001152:	2300      	movs	r3, #0
 8001154:	603b      	str	r3, [r7, #0]

  /* Peripheral clock enable */
  LL_RCC_EnableRTC();
 8001156:	f7ff ff15 	bl	8000f84 <LL_RCC_EnableRTC>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC and set the Time and Date
  */
  RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
  RTC_InitStruct.AsynchPrescaler = 127;
 800115e:	237f      	movs	r3, #127	; 0x7f
 8001160:	613b      	str	r3, [r7, #16]
  RTC_InitStruct.SynchPrescaler = 255;
 8001162:	23ff      	movs	r3, #255	; 0xff
 8001164:	617b      	str	r3, [r7, #20]
  LL_RTC_Init(RTC, &RTC_InitStruct);
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	4619      	mov	r1, r3
 800116c:	481f      	ldr	r0, [pc, #124]	; (80011ec <MX_RTC_Init+0xb4>)
 800116e:	f000 fcfd 	bl	8001b6c <LL_RTC_Init>
  LL_RTC_SetAsynchPrescaler(RTC, 127);
 8001172:	217f      	movs	r1, #127	; 0x7f
 8001174:	481d      	ldr	r0, [pc, #116]	; (80011ec <MX_RTC_Init+0xb4>)
 8001176:	f7ff ff31 	bl	8000fdc <LL_RTC_SetAsynchPrescaler>
  LL_RTC_SetSynchPrescaler(RTC, 255);
 800117a:	21ff      	movs	r1, #255	; 0xff
 800117c:	481b      	ldr	r0, [pc, #108]	; (80011ec <MX_RTC_Init+0xb4>)
 800117e:	f7ff ff41 	bl	8001004 <LL_RTC_SetSynchPrescaler>
  /** Initialize RTC and set the Time and Date
  */
  if(LL_RTC_BAK_GetRegister(RTC, LL_RTC_BKP_DR0) != 0x32F2){
 8001182:	2100      	movs	r1, #0
 8001184:	4819      	ldr	r0, [pc, #100]	; (80011ec <MX_RTC_Init+0xb4>)
 8001186:	f7ff ff88 	bl	800109a <LL_RTC_BAK_GetRegister>
 800118a:	4602      	mov	r2, r0
 800118c:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8001190:	429a      	cmp	r2, r3
 8001192:	d01d      	beq.n	80011d0 <MX_RTC_Init+0x98>

  RTC_TimeStruct.Hours = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	723b      	strb	r3, [r7, #8]
  RTC_TimeStruct.Minutes = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	727b      	strb	r3, [r7, #9]
  RTC_TimeStruct.Seconds = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	72bb      	strb	r3, [r7, #10]
  LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_TimeStruct);
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	461a      	mov	r2, r3
 80011a4:	2100      	movs	r1, #0
 80011a6:	4811      	ldr	r0, [pc, #68]	; (80011ec <MX_RTC_Init+0xb4>)
 80011a8:	f000 fd10 	bl	8001bcc <LL_RTC_TIME_Init>
  RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_MONDAY;
 80011ac:	2301      	movs	r3, #1
 80011ae:	703b      	strb	r3, [r7, #0]
  RTC_DateStruct.Month = LL_RTC_MONTH_JANUARY;
 80011b0:	2301      	movs	r3, #1
 80011b2:	707b      	strb	r3, [r7, #1]
  RTC_DateStruct.Year = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	70fb      	strb	r3, [r7, #3]
  LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_DateStruct);
 80011b8:	463b      	mov	r3, r7
 80011ba:	461a      	mov	r2, r3
 80011bc:	2100      	movs	r1, #0
 80011be:	480b      	ldr	r0, [pc, #44]	; (80011ec <MX_RTC_Init+0xb4>)
 80011c0:	f000 fdaa 	bl	8001d18 <LL_RTC_DATE_Init>
    LL_RTC_BAK_SetRegister(RTC,LL_RTC_BKP_DR0,0x32F2);
 80011c4:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80011c8:	2100      	movs	r1, #0
 80011ca:	4808      	ldr	r0, [pc, #32]	; (80011ec <MX_RTC_Init+0xb4>)
 80011cc:	f7ff ff4c 	bl	8001068 <LL_RTC_BAK_SetRegister>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  LL_RTC_DisableWriteProtection(RTC);
 80011d0:	4806      	ldr	r0, [pc, #24]	; (80011ec <MX_RTC_Init+0xb4>)
 80011d2:	f7ff ff39 	bl	8001048 <LL_RTC_DisableWriteProtection>
  MX_RTC_Enter_InitMode();
 80011d6:	f000 f80b 	bl	80011f0 <MX_RTC_Enter_InitMode>

  MX_RTC_Exit_InitMode();
 80011da:	f000 f819 	bl	8001210 <MX_RTC_Exit_InitMode>
  LL_RTC_EnableWriteProtection(RTC);
 80011de:	4803      	ldr	r0, [pc, #12]	; (80011ec <MX_RTC_Init+0xb4>)
 80011e0:	f7ff ff25 	bl	800102e <LL_RTC_EnableWriteProtection>
  /* USER CODE END RTC_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40002800 	.word	0x40002800

080011f0 <MX_RTC_Enter_InitMode>:

/* USER CODE BEGIN 1 */

/*This functions is to start the RTC initialization mode*/
void MX_RTC_Enter_InitMode(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	LL_RTC_EnableInitMode(RTC);
 80011f4:	4805      	ldr	r0, [pc, #20]	; (800120c <MX_RTC_Enter_InitMode+0x1c>)
 80011f6:	f7ff fed5 	bl	8000fa4 <LL_RTC_EnableInitMode>
	while (!LL_RTC_IsActiveFlag_INIT(RTC));
 80011fa:	bf00      	nop
 80011fc:	4803      	ldr	r0, [pc, #12]	; (800120c <MX_RTC_Enter_InitMode+0x1c>)
 80011fe:	f7ff ff63 	bl	80010c8 <LL_RTC_IsActiveFlag_INIT>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d0f9      	beq.n	80011fc <MX_RTC_Enter_InitMode+0xc>

	return;
 8001208:	bf00      	nop
}
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40002800 	.word	0x40002800

08001210 <MX_RTC_Exit_InitMode>:

/*This functions is to finish the RTC initialization mode*/
void MX_RTC_Exit_InitMode (void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
	LL_RTC_DisableInitMode(RTC);
 8001214:	4807      	ldr	r0, [pc, #28]	; (8001234 <MX_RTC_Exit_InitMode+0x24>)
 8001216:	f7ff fed3 	bl	8000fc0 <LL_RTC_DisableInitMode>
	LL_RTC_ClearFlag_RS(RTC);
 800121a:	4806      	ldr	r0, [pc, #24]	; (8001234 <MX_RTC_Exit_InitMode+0x24>)
 800121c:	f7ff ff7a 	bl	8001114 <LL_RTC_ClearFlag_RS>
	while (!LL_RTC_IsActiveFlag_RS(RTC));
 8001220:	bf00      	nop
 8001222:	4804      	ldr	r0, [pc, #16]	; (8001234 <MX_RTC_Exit_InitMode+0x24>)
 8001224:	f7ff ff63 	bl	80010ee <LL_RTC_IsActiveFlag_RS>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d0f9      	beq.n	8001222 <MX_RTC_Exit_InitMode+0x12>
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40002800 	.word	0x40002800

08001238 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800123c:	e7fe      	b.n	800123c <NMI_Handler+0x4>

0800123e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001242:	e7fe      	b.n	8001242 <HardFault_Handler+0x4>

08001244 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <MemManage_Handler+0x4>

0800124a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800124e:	e7fe      	b.n	800124e <BusFault_Handler+0x4>

08001250 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001254:	e7fe      	b.n	8001254 <UsageFault_Handler+0x4>

08001256 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001294:	4a06      	ldr	r2, [pc, #24]	; (80012b0 <SystemInit+0x20>)
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <SystemInit+0x20>)
 8001298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800129c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <LL_ADC_REG_SetSequencerLength>:
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f023 020f 	bic.w	r2, r3, #15
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	431a      	orrs	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <LL_ADC_IsEnabled>:
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	bf0c      	ite	eq
 80012ee:	2301      	moveq	r3, #1
 80012f0:	2300      	movne	r3, #0
 80012f2:	b2db      	uxtb	r3, r3
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800130a:	2300      	movs	r3, #0
 800130c:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 800130e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001312:	f7ff ffe2 	bl	80012da <LL_ADC_IsEnabled>
 8001316:	4604      	mov	r4, r0
 8001318:	4817      	ldr	r0, [pc, #92]	; (8001378 <LL_ADC_CommonInit+0x78>)
 800131a:	f7ff ffde 	bl	80012da <LL_ADC_IsEnabled>
 800131e:	4603      	mov	r3, r0
 8001320:	4323      	orrs	r3, r4
 8001322:	2b00      	cmp	r3, #0
 8001324:	d120      	bne.n	8001368 <LL_ADC_CommonInit+0x68>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d012      	beq.n	8001354 <LL_ADC_CommonInit+0x54>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689a      	ldr	r2, [r3, #8]
 8001332:	4b12      	ldr	r3, [pc, #72]	; (800137c <LL_ADC_CommonInit+0x7c>)
 8001334:	4013      	ands	r3, r2
 8001336:	683a      	ldr	r2, [r7, #0]
 8001338:	6811      	ldr	r1, [r2, #0]
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	6852      	ldr	r2, [r2, #4]
 800133e:	4311      	orrs	r1, r2
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	6892      	ldr	r2, [r2, #8]
 8001344:	4311      	orrs	r1, r2
 8001346:	683a      	ldr	r2, [r7, #0]
 8001348:	68d2      	ldr	r2, [r2, #12]
 800134a:	430a      	orrs	r2, r1
 800134c:	431a      	orrs	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	e00b      	b.n	800136c <LL_ADC_CommonInit+0x6c>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	4b08      	ldr	r3, [pc, #32]	; (800137c <LL_ADC_CommonInit+0x7c>)
 800135a:	4013      	ands	r3, r2
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	6812      	ldr	r2, [r2, #0]
 8001360:	431a      	orrs	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	e001      	b.n	800136c <LL_ADC_CommonInit+0x6c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 800136c:	7bfb      	ldrb	r3, [r7, #15]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	bd90      	pop	{r4, r7, pc}
 8001376:	bf00      	nop
 8001378:	50000100 	.word	0x50000100
 800137c:	fffc30e0 	.word	0xfffc30e0

08001380 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800138a:	2300      	movs	r3, #0
 800138c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff ffa3 	bl	80012da <LL_ADC_IsEnabled>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d111      	bne.n	80013be <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013a2:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	6811      	ldr	r1, [r2, #0]
 80013aa:	683a      	ldr	r2, [r7, #0]
 80013ac:	6852      	ldr	r2, [r2, #4]
 80013ae:	4311      	orrs	r1, r2
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	6892      	ldr	r2, [r2, #8]
 80013b4:	430a      	orrs	r2, r1
 80013b6:	431a      	orrs	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	e001      	b.n	80013c2 <LL_ADC_Init+0x42>
    
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80013d6:	2300      	movs	r3, #0
 80013d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff ff7d 	bl	80012da <LL_ADC_IsEnabled>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d132      	bne.n	800144c <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d015      	beq.n	800141a <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68da      	ldr	r2, [r3, #12]
 80013f2:	4b1a      	ldr	r3, [pc, #104]	; (800145c <LL_ADC_REG_Init+0x90>)
 80013f4:	4013      	ands	r3, r2
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	6811      	ldr	r1, [r2, #0]
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	6892      	ldr	r2, [r2, #8]
 80013fe:	4311      	orrs	r1, r2
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	68d2      	ldr	r2, [r2, #12]
 8001404:	4311      	orrs	r1, r2
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	6912      	ldr	r2, [r2, #16]
 800140a:	4311      	orrs	r1, r2
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	6952      	ldr	r2, [r2, #20]
 8001410:	430a      	orrs	r2, r1
 8001412:	431a      	orrs	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	60da      	str	r2, [r3, #12]
 8001418:	e011      	b.n	800143e <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	68da      	ldr	r2, [r3, #12]
 800141e:	4b0f      	ldr	r3, [pc, #60]	; (800145c <LL_ADC_REG_Init+0x90>)
 8001420:	4013      	ands	r3, r2
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	6811      	ldr	r1, [r2, #0]
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	68d2      	ldr	r2, [r2, #12]
 800142a:	4311      	orrs	r1, r2
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	6912      	ldr	r2, [r2, #16]
 8001430:	4311      	orrs	r1, r2
 8001432:	683a      	ldr	r2, [r7, #0]
 8001434:	6952      	ldr	r2, [r2, #20]
 8001436:	430a      	orrs	r2, r1
 8001438:	431a      	orrs	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }
    
    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	4619      	mov	r1, r3
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff ff35 	bl	80012b4 <LL_ADC_REG_SetSequencerLength>
 800144a:	e001      	b.n	8001450 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001450:	7bfb      	ldrb	r3, [r7, #15]
}
 8001452:	4618      	mov	r0, r3
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	fff0c03c 	.word	0xfff0c03c

08001460 <LL_GPIO_SetPinMode>:
{
 8001460:	b480      	push	{r7}
 8001462:	b089      	sub	sp, #36	; 0x24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	fa93 f3a3 	rbit	r3, r3
 800147a:	613b      	str	r3, [r7, #16]
  return result;
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	fab3 f383 	clz	r3, r3
 8001482:	b2db      	uxtb	r3, r3
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	2103      	movs	r1, #3
 8001488:	fa01 f303 	lsl.w	r3, r1, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	401a      	ands	r2, r3
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	fa93 f3a3 	rbit	r3, r3
 800149a:	61bb      	str	r3, [r7, #24]
  return result;
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	fab3 f383 	clz	r3, r3
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ac:	431a      	orrs	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	601a      	str	r2, [r3, #0]
}
 80014b2:	bf00      	nop
 80014b4:	3724      	adds	r7, #36	; 0x24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <LL_GPIO_SetPinOutputType>:
{
 80014be:	b480      	push	{r7}
 80014c0:	b085      	sub	sp, #20
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	60f8      	str	r0, [r7, #12]
 80014c6:	60b9      	str	r1, [r7, #8]
 80014c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	401a      	ands	r2, r3
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	fb01 f303 	mul.w	r3, r1, r3
 80014dc:	431a      	orrs	r2, r3
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	605a      	str	r2, [r3, #4]
}
 80014e2:	bf00      	nop
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <LL_GPIO_SetPinSpeed>:
{
 80014ee:	b480      	push	{r7}
 80014f0:	b089      	sub	sp, #36	; 0x24
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	60f8      	str	r0, [r7, #12]
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	fa93 f3a3 	rbit	r3, r3
 8001508:	613b      	str	r3, [r7, #16]
  return result;
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	fab3 f383 	clz	r3, r3
 8001510:	b2db      	uxtb	r3, r3
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	2103      	movs	r1, #3
 8001516:	fa01 f303 	lsl.w	r3, r1, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	401a      	ands	r2, r3
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	fa93 f3a3 	rbit	r3, r3
 8001528:	61bb      	str	r3, [r7, #24]
  return result;
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	fab3 f383 	clz	r3, r3
 8001530:	b2db      	uxtb	r3, r3
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	6879      	ldr	r1, [r7, #4]
 8001536:	fa01 f303 	lsl.w	r3, r1, r3
 800153a:	431a      	orrs	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	609a      	str	r2, [r3, #8]
}
 8001540:	bf00      	nop
 8001542:	3724      	adds	r7, #36	; 0x24
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <LL_GPIO_SetPinPull>:
{
 800154c:	b480      	push	{r7}
 800154e:	b089      	sub	sp, #36	; 0x24
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	68da      	ldr	r2, [r3, #12]
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	fa93 f3a3 	rbit	r3, r3
 8001566:	613b      	str	r3, [r7, #16]
  return result;
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	fab3 f383 	clz	r3, r3
 800156e:	b2db      	uxtb	r3, r3
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	2103      	movs	r1, #3
 8001574:	fa01 f303 	lsl.w	r3, r1, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	401a      	ands	r2, r3
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	fa93 f3a3 	rbit	r3, r3
 8001586:	61bb      	str	r3, [r7, #24]
  return result;
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	fab3 f383 	clz	r3, r3
 800158e:	b2db      	uxtb	r3, r3
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	fa01 f303 	lsl.w	r3, r1, r3
 8001598:	431a      	orrs	r2, r3
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	60da      	str	r2, [r3, #12]
}
 800159e:	bf00      	nop
 80015a0:	3724      	adds	r7, #36	; 0x24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <LL_GPIO_SetAFPin_0_7>:
{
 80015aa:	b480      	push	{r7}
 80015ac:	b089      	sub	sp, #36	; 0x24
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	60f8      	str	r0, [r7, #12]
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6a1a      	ldr	r2, [r3, #32]
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	fa93 f3a3 	rbit	r3, r3
 80015c4:	613b      	str	r3, [r7, #16]
  return result;
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	fab3 f383 	clz	r3, r3
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	210f      	movs	r1, #15
 80015d2:	fa01 f303 	lsl.w	r3, r1, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	401a      	ands	r2, r3
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	fa93 f3a3 	rbit	r3, r3
 80015e4:	61bb      	str	r3, [r7, #24]
  return result;
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	fab3 f383 	clz	r3, r3
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	6879      	ldr	r1, [r7, #4]
 80015f2:	fa01 f303 	lsl.w	r3, r1, r3
 80015f6:	431a      	orrs	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	621a      	str	r2, [r3, #32]
}
 80015fc:	bf00      	nop
 80015fe:	3724      	adds	r7, #36	; 0x24
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <LL_GPIO_SetAFPin_8_15>:
{
 8001608:	b480      	push	{r7}
 800160a:	b089      	sub	sp, #36	; 0x24
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	0a1b      	lsrs	r3, r3, #8
 800161c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	fa93 f3a3 	rbit	r3, r3
 8001624:	613b      	str	r3, [r7, #16]
  return result;
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	fab3 f383 	clz	r3, r3
 800162c:	b2db      	uxtb	r3, r3
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	210f      	movs	r1, #15
 8001632:	fa01 f303 	lsl.w	r3, r1, r3
 8001636:	43db      	mvns	r3, r3
 8001638:	401a      	ands	r2, r3
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	0a1b      	lsrs	r3, r3, #8
 800163e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	fa93 f3a3 	rbit	r3, r3
 8001646:	61bb      	str	r3, [r7, #24]
  return result;
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	fab3 f383 	clz	r3, r3
 800164e:	b2db      	uxtb	r3, r3
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	fa01 f303 	lsl.w	r3, r1, r3
 8001658:	431a      	orrs	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800165e:	bf00      	nop
 8001660:	3724      	adds	r7, #36	; 0x24
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b088      	sub	sp, #32
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	fa93 f3a3 	rbit	r3, r3
 8001680:	613b      	str	r3, [r7, #16]
  return result;
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	fab3 f383 	clz	r3, r3
 8001688:	b2db      	uxtb	r3, r3
 800168a:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800168c:	e051      	b.n	8001732 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	2101      	movs	r1, #1
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	fa01 f303 	lsl.w	r3, r1, r3
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d043      	beq.n	800172c <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d003      	beq.n	80016b4 <LL_GPIO_Init+0x4a>
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d10e      	bne.n	80016d2 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	461a      	mov	r2, r3
 80016ba:	69b9      	ldr	r1, [r7, #24]
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff ff16 	bl	80014ee <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	6819      	ldr	r1, [r3, #0]
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	461a      	mov	r2, r3
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff fef6 	bl	80014be <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	461a      	mov	r2, r3
 80016d8:	69b9      	ldr	r1, [r7, #24]
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff ff36 	bl	800154c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d11a      	bne.n	800171e <LL_GPIO_Init+0xb4>
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	fa93 f3a3 	rbit	r3, r3
 80016f2:	60bb      	str	r3, [r7, #8]
  return result;
 80016f4:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80016f6:	fab3 f383 	clz	r3, r3
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2b07      	cmp	r3, #7
 80016fe:	d807      	bhi.n	8001710 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	461a      	mov	r2, r3
 8001706:	69b9      	ldr	r1, [r7, #24]
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff ff4e 	bl	80015aa <LL_GPIO_SetAFPin_0_7>
 800170e:	e006      	b.n	800171e <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	461a      	mov	r2, r3
 8001716:	69b9      	ldr	r1, [r7, #24]
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff ff75 	bl	8001608 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	461a      	mov	r2, r3
 8001724:	69b9      	ldr	r1, [r7, #24]
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff fe9a 	bl	8001460 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	3301      	adds	r3, #1
 8001730:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	fa22 f303 	lsr.w	r3, r2, r3
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1a6      	bne.n	800168e <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3720      	adds	r7, #32
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <LL_I2C_Enable>:
{
 800174a:	b480      	push	{r7}
 800174c:	b083      	sub	sp, #12
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f043 0201 	orr.w	r2, r3, #1
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	601a      	str	r2, [r3, #0]
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <LL_I2C_Disable>:
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f023 0201 	bic.w	r2, r3, #1
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	601a      	str	r2, [r3, #0]
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <LL_I2C_ConfigFilters>:
{
 800178a:	b480      	push	{r7}
 800178c:	b085      	sub	sp, #20
 800178e:	af00      	add	r7, sp, #0
 8001790:	60f8      	str	r0, [r7, #12]
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	0219      	lsls	r1, r3, #8
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	430b      	orrs	r3, r1
 80017a6:	431a      	orrs	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	601a      	str	r2, [r3, #0]
}
 80017ac:	bf00      	nop
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <LL_I2C_SetOwnAddress1>:
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80017cc:	f023 0307 	bic.w	r3, r3, #7
 80017d0:	68b9      	ldr	r1, [r7, #8]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	431a      	orrs	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	609a      	str	r2, [r3, #8]
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <LL_I2C_EnableOwnAddress1>:
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	609a      	str	r2, [r3, #8]
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <LL_I2C_DisableOwnAddress1>:
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	609a      	str	r2, [r3, #8]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <LL_I2C_SetTiming>:
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	611a      	str	r2, [r3, #16]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <LL_I2C_SetMode>:
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	431a      	orrs	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	601a      	str	r2, [r3, #0]
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
 8001872:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	605a      	str	r2, [r3, #4]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff ff65 	bl	800176a <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	6899      	ldr	r1, [r3, #8]
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	461a      	mov	r2, r3
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff ff6d 	bl	800178a <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	4619      	mov	r1, r3
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff ffb6 	bl	8001828 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff ff44 	bl	800174a <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff ffa0 	bl	8001808 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	6919      	ldr	r1, [r3, #16]
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	461a      	mov	r2, r3
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff ff70 	bl	80017b8 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d002      	beq.n	80018e6 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff ff81 	bl	80017e8 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4619      	mov	r1, r3
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff ffa9 	bl	8001844 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	4619      	mov	r1, r3
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff ffb6 	bl	800186a <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <LL_RTC_SetHourFormat>:
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	431a      	orrs	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	609a      	str	r2, [r3, #8]
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <LL_RTC_GetHourFormat>:
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_FMT));
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <LL_RTC_EnableInitMode>:
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, RTC_INIT_MASK);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f04f 32ff 	mov.w	r2, #4294967295
 8001958:	60da      	str	r2, [r3, #12]
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <LL_RTC_DisableInitMode>:
{
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001974:	60da      	str	r2, [r3, #12]
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <LL_RTC_IsShadowRegBypassEnabled>:
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 0320 	and.w	r3, r3, #32
 8001992:	2b20      	cmp	r3, #32
 8001994:	bf0c      	ite	eq
 8001996:	2301      	moveq	r3, #1
 8001998:	2300      	movne	r3, #0
 800199a:	b2db      	uxtb	r3, r3
}
 800199c:	4618      	mov	r0, r3
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <LL_RTC_SetAsynchPrescaler>:
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	041b      	lsls	r3, r3, #16
 80019be:	431a      	orrs	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	611a      	str	r2, [r3, #16]
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <LL_RTC_SetSynchPrescaler>:
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80019e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	431a      	orrs	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	611a      	str	r2, [r3, #16]
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <LL_RTC_EnableWriteProtection>:
{
 80019fa:	b480      	push	{r7}
 80019fc:	b083      	sub	sp, #12
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	22ff      	movs	r2, #255	; 0xff
 8001a06:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <LL_RTC_DisableWriteProtection>:
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	22ca      	movs	r2, #202	; 0xca
 8001a20:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2253      	movs	r2, #83	; 0x53
 8001a26:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <LL_RTC_TIME_Config>:
{
 8001a34:	b480      	push	{r7}
 8001a36:	b087      	sub	sp, #28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
 8001a40:	603b      	str	r3, [r7, #0]
  uint32_t temp = 0U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	041b      	lsls	r3, r3, #16
 8001a4a:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
  temp = Format12_24                                                                                    | \
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	431a      	orrs	r2, r3
         (((Minutes & 0xF0U) << (RTC_TR_MNT_Pos - 4U)) | ((Minutes & 0x0FU) << RTC_TR_MNU_Pos)) | \
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	021b      	lsls	r3, r3, #8
 8001a56:	b29b      	uxth	r3, r3
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 8001a58:	431a      	orrs	r2, r3
         (((Seconds & 0xF0U) << (RTC_TR_ST_Pos - 4U)) | ((Seconds & 0x0FU) << RTC_TR_SU_Pos));
 8001a5a:	6a3b      	ldr	r3, [r7, #32]
 8001a5c:	b2db      	uxtb	r3, r3
  temp = Format12_24                                                                                    | \
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
 8001a6a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	431a      	orrs	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	601a      	str	r2, [r3, #0]
}
 8001a76:	bf00      	nop
 8001a78:	371c      	adds	r7, #28
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <LL_RTC_DATE_Config>:
{
 8001a84:	b480      	push	{r7}
 8001a86:	b087      	sub	sp, #28
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
 8001a90:	603b      	str	r3, [r7, #0]
  uint32_t temp = 0U;
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	035a      	lsls	r2, r3, #13
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 8001a9a:	6a3b      	ldr	r3, [r7, #32]
 8001a9c:	041b      	lsls	r3, r3, #16
 8001a9e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8001aa2:	431a      	orrs	r2, r3
         (((Month & 0xF0U) << (RTC_DR_MT_Pos - 4U)) | ((Month & 0x0FU) << RTC_DR_MU_Pos)) | \
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	021b      	lsls	r3, r3, #8
 8001aa8:	b29b      	uxth	r3, r3
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 8001aaa:	431a      	orrs	r2, r3
         (((Day & 0xF0U) << (RTC_DR_DT_Pos - 4U)) | ((Day & 0x0FU) << RTC_DR_DU_Pos));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	b2db      	uxtb	r3, r3
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <LL_RTC_DATE_Config+0x4c>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	605a      	str	r2, [r3, #4]
}
 8001ac4:	bf00      	nop
 8001ac6:	371c      	adds	r7, #28
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	ff0000c0 	.word	0xff0000c0

08001ad4 <LL_RTC_IsActiveFlag_INIT>:
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ae4:	2b40      	cmp	r3, #64	; 0x40
 8001ae6:	bf0c      	ite	eq
 8001ae8:	2301      	moveq	r3, #1
 8001aea:	2300      	movne	r3, #0
 8001aec:	b2db      	uxtb	r3, r3
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <LL_RTC_IsActiveFlag_RS>:
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	f003 0320 	and.w	r3, r3, #32
 8001b0a:	2b20      	cmp	r3, #32
 8001b0c:	bf0c      	ite	eq
 8001b0e:	2301      	moveq	r3, #1
 8001b10:	2300      	movne	r3, #0
 8001b12:	b2db      	uxtb	r3, r3
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <LL_RTC_ClearFlag_RS>:
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b30:	f063 02a0 	orn	r2, r3, #160	; 0xa0
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	60da      	str	r2, [r3, #12]
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8001b48:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b54:	bf0c      	ite	eq
 8001b56:	2301      	moveq	r3, #1
 8001b58:	2300      	movne	r3, #0
 8001b5a:	b2db      	uxtb	r3, r3
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	e000e010 	.word	0xe000e010

08001b6c <LL_RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized
  */
ErrorStatus LL_RTC_Init(RTC_TypeDef *RTCx, LL_RTC_InitTypeDef *RTC_InitStruct)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_RTC_HOURFORMAT(RTC_InitStruct->HourFormat));
  assert_param(IS_LL_RTC_ASYNCH_PREDIV(RTC_InitStruct->AsynchPrescaler));
  assert_param(IS_LL_RTC_SYNCH_PREDIV(RTC_InitStruct->SynchPrescaler));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff ff4a 	bl	8001a14 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 f96d 	bl	8001e60 <LL_RTC_EnterInitMode>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d016      	beq.n	8001bba <LL_RTC_Init+0x4e>
  {
    /* Set Hour Format */
    LL_RTC_SetHourFormat(RTCx, RTC_InitStruct->HourFormat);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4619      	mov	r1, r3
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff feb8 	bl	8001908 <LL_RTC_SetHourFormat>

    /* Configure Synchronous and Asynchronous prescaler factor */
    LL_RTC_SetSynchPrescaler(RTCx, RTC_InitStruct->SynchPrescaler);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff ff16 	bl	80019d0 <LL_RTC_SetSynchPrescaler>
    LL_RTC_SetAsynchPrescaler(RTCx, RTC_InitStruct->AsynchPrescaler);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff fefc 	bl	80019a8 <LL_RTC_SetAsynchPrescaler>

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7ff fed8 	bl	8001966 <LL_RTC_DisableInitMode>

    status = SUCCESS;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff ff1d 	bl	80019fa <LL_RTC_EnableWriteProtection>

  return status;
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <LL_RTC_TIME_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus LL_RTC_TIME_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_TimeTypeDef *RTC_TimeStruct)
{
 8001bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bce:	b089      	sub	sp, #36	; 0x24
 8001bd0:	af02      	add	r7, sp, #8
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));

  if (RTC_Format == LL_RTC_FORMAT_BIN)
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d109      	bne.n	8001bf6 <LL_RTC_TIME_Init+0x2a>
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f7ff fea3 	bl	800192e <LL_RTC_GetHourFormat>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10c      	bne.n	8001c08 <LL_RTC_TIME_Init+0x3c>
      assert_param(IS_LL_RTC_HOUR12(RTC_TimeStruct->Hours));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_TimeStruct->TimeFormat));
    }
    else
    {
      RTC_TimeStruct->TimeFormat = 0x00U;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	e008      	b.n	8001c08 <LL_RTC_TIME_Init+0x3c>
    assert_param(IS_LL_RTC_MINUTES(RTC_TimeStruct->Minutes));
    assert_param(IS_LL_RTC_SECONDS(RTC_TimeStruct->Seconds));
  }
  else
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f7ff fe99 	bl	800192e <LL_RTC_GetHourFormat>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d102      	bne.n	8001c08 <LL_RTC_TIME_Init+0x3c>
      assert_param(IS_LL_RTC_HOUR12(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_TimeStruct->TimeFormat));
    }
    else
    {
      RTC_TimeStruct->TimeFormat = 0x00U;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
    assert_param(IS_LL_RTC_MINUTES(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Minutes)));
    assert_param(IS_LL_RTC_SECONDS(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Seconds)));
  }

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f7ff ff03 	bl	8001a14 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f000 f926 	bl	8001e60 <LL_RTC_EnterInitMode>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d073      	beq.n	8001d02 <LL_RTC_TIME_Init+0x136>
  {
    /* Check the input parameters format */
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d00f      	beq.n	8001c40 <LL_RTC_TIME_Init+0x74>
    {
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6819      	ldr	r1, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	791b      	ldrb	r3, [r3, #4]
 8001c28:	461a      	mov	r2, r3
                         RTC_TimeStruct->Minutes, RTC_TimeStruct->Seconds);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	795b      	ldrb	r3, [r3, #5]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8001c2e:	4618      	mov	r0, r3
                         RTC_TimeStruct->Minutes, RTC_TimeStruct->Seconds);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	799b      	ldrb	r3, [r3, #6]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	4603      	mov	r3, r0
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f7ff fefb 	bl	8001a34 <LL_RTC_TIME_Config>
 8001c3e:	e04f      	b.n	8001ce0 <LL_RTC_TIME_Init+0x114>
    }
    else
    {
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681c      	ldr	r4, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	791b      	ldrb	r3, [r3, #4]
 8001c48:	4a32      	ldr	r2, [pc, #200]	; (8001d14 <LL_RTC_TIME_Init+0x148>)
 8001c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4e:	08db      	lsrs	r3, r3, #3
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	011b      	lsls	r3, r3, #4
 8001c54:	b2d8      	uxtb	r0, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	791a      	ldrb	r2, [r3, #4]
 8001c5a:	4b2e      	ldr	r3, [pc, #184]	; (8001d14 <LL_RTC_TIME_Init+0x148>)
 8001c5c:	fba3 1302 	umull	r1, r3, r3, r2
 8001c60:	08d9      	lsrs	r1, r3, #3
 8001c62:	460b      	mov	r3, r1
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	440b      	add	r3, r1
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	4303      	orrs	r3, r0
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	461d      	mov	r5, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Minutes),
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	795b      	ldrb	r3, [r3, #5]
 8001c78:	4a26      	ldr	r2, [pc, #152]	; (8001d14 <LL_RTC_TIME_Init+0x148>)
 8001c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7e:	08db      	lsrs	r3, r3, #3
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	011b      	lsls	r3, r3, #4
 8001c84:	b2d8      	uxtb	r0, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	795a      	ldrb	r2, [r3, #5]
 8001c8a:	4b22      	ldr	r3, [pc, #136]	; (8001d14 <LL_RTC_TIME_Init+0x148>)
 8001c8c:	fba3 1302 	umull	r1, r3, r3, r2
 8001c90:	08d9      	lsrs	r1, r3, #3
 8001c92:	460b      	mov	r3, r1
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	440b      	add	r3, r1
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	4303      	orrs	r3, r0
 8001ca0:	b2db      	uxtb	r3, r3
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8001ca2:	461e      	mov	r6, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Seconds));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	799b      	ldrb	r3, [r3, #6]
 8001ca8:	4a1a      	ldr	r2, [pc, #104]	; (8001d14 <LL_RTC_TIME_Init+0x148>)
 8001caa:	fba2 2303 	umull	r2, r3, r2, r3
 8001cae:	08db      	lsrs	r3, r3, #3
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	011b      	lsls	r3, r3, #4
 8001cb4:	b2d8      	uxtb	r0, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	799a      	ldrb	r2, [r3, #6]
 8001cba:	4b16      	ldr	r3, [pc, #88]	; (8001d14 <LL_RTC_TIME_Init+0x148>)
 8001cbc:	fba3 1302 	umull	r1, r3, r3, r2
 8001cc0:	08d9      	lsrs	r1, r3, #3
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	4303      	orrs	r3, r0
 8001cd0:	b2db      	uxtb	r3, r3
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	4633      	mov	r3, r6
 8001cd6:	462a      	mov	r2, r5
 8001cd8:	4621      	mov	r1, r4
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f7ff feaa 	bl	8001a34 <LL_RTC_TIME_Config>
    }

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	f7ff fe40 	bl	8001966 <LL_RTC_DisableInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f7ff fe4b 	bl	8001982 <LL_RTC_IsShadowRegBypassEnabled>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d105      	bne.n	8001cfe <LL_RTC_TIME_Init+0x132>
    {
      status = LL_RTC_WaitForSynchro(RTCx);
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f000 f8e9 	bl	8001eca <LL_RTC_WaitForSynchro>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	75fb      	strb	r3, [r7, #23]
 8001cfc:	e001      	b.n	8001d02 <LL_RTC_TIME_Init+0x136>
    }
    else
    {
      status = SUCCESS;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	75fb      	strb	r3, [r7, #23]
    }
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f7ff fe79 	bl	80019fa <LL_RTC_EnableWriteProtection>

  return status;
 8001d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	371c      	adds	r7, #28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d12:	bf00      	nop
 8001d14:	cccccccd 	.word	0xcccccccd

08001d18 <LL_RTC_DATE_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Day register is configured
  *          - ERROR: RTC Day register is not configured
  */
ErrorStatus LL_RTC_DATE_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_DateTypeDef *RTC_DateStruct)
{
 8001d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d1a:	b089      	sub	sp, #36	; 0x24
 8001d1c:	af02      	add	r7, sp, #8
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == LL_RTC_FORMAT_BIN) && ((RTC_DateStruct->Month & 0x10U) == 0x10U))
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d10e      	bne.n	8001d4c <LL_RTC_DATE_Init+0x34>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	785b      	ldrb	r3, [r3, #1]
 8001d32:	f003 0310 	and.w	r3, r3, #16
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d008      	beq.n	8001d4c <LL_RTC_DATE_Init+0x34>
  {
    RTC_DateStruct->Month = (RTC_DateStruct->Month & (uint32_t)~(0x10U)) + 0x0AU;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	785b      	ldrb	r3, [r3, #1]
 8001d3e:	f023 0310 	bic.w	r3, r3, #16
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	330a      	adds	r3, #10
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	705a      	strb	r2, [r3, #1]
    assert_param(IS_LL_RTC_DAY(__LL_RTC_CONVERT_BCD2BIN(RTC_DateStruct->Day)));
  }
  assert_param(IS_LL_RTC_WEEKDAY(RTC_DateStruct->WeekDay));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f7ff fe61 	bl	8001a14 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f000 f884 	bl	8001e60 <LL_RTC_EnterInitMode>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d075      	beq.n	8001e4a <LL_RTC_DATE_Init+0x132>
  {
    /* Check the input parameters format */
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d010      	beq.n	8001d86 <LL_RTC_DATE_Init+0x6e>
    {
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, RTC_DateStruct->Day, RTC_DateStruct->Month, RTC_DateStruct->Year);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	789b      	ldrb	r3, [r3, #2]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	785b      	ldrb	r3, [r3, #1]
 8001d74:	4618      	mov	r0, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	78db      	ldrb	r3, [r3, #3]
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f7ff fe80 	bl	8001a84 <LL_RTC_DATE_Config>
 8001d84:	e050      	b.n	8001e28 <LL_RTC_DATE_Init+0x110>
    }
    else
    {
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	461c      	mov	r4, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	789b      	ldrb	r3, [r3, #2]
 8001d90:	4a32      	ldr	r2, [pc, #200]	; (8001e5c <LL_RTC_DATE_Init+0x144>)
 8001d92:	fba2 2303 	umull	r2, r3, r2, r3
 8001d96:	08db      	lsrs	r3, r3, #3
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	b2d8      	uxtb	r0, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	789a      	ldrb	r2, [r3, #2]
 8001da2:	4b2e      	ldr	r3, [pc, #184]	; (8001e5c <LL_RTC_DATE_Init+0x144>)
 8001da4:	fba3 1302 	umull	r1, r3, r3, r2
 8001da8:	08d9      	lsrs	r1, r3, #3
 8001daa:	460b      	mov	r3, r1
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	440b      	add	r3, r1
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	4303      	orrs	r3, r0
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	461d      	mov	r5, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	785b      	ldrb	r3, [r3, #1]
 8001dc0:	4a26      	ldr	r2, [pc, #152]	; (8001e5c <LL_RTC_DATE_Init+0x144>)
 8001dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc6:	08db      	lsrs	r3, r3, #3
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	011b      	lsls	r3, r3, #4
 8001dcc:	b2d8      	uxtb	r0, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	785a      	ldrb	r2, [r3, #1]
 8001dd2:	4b22      	ldr	r3, [pc, #136]	; (8001e5c <LL_RTC_DATE_Init+0x144>)
 8001dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8001dd8:	08d9      	lsrs	r1, r3, #3
 8001dda:	460b      	mov	r3, r1
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	440b      	add	r3, r1
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	4303      	orrs	r3, r0
 8001de8:	b2db      	uxtb	r3, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8001dea:	461e      	mov	r6, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	78db      	ldrb	r3, [r3, #3]
 8001df0:	4a1a      	ldr	r2, [pc, #104]	; (8001e5c <LL_RTC_DATE_Init+0x144>)
 8001df2:	fba2 2303 	umull	r2, r3, r2, r3
 8001df6:	08db      	lsrs	r3, r3, #3
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	011b      	lsls	r3, r3, #4
 8001dfc:	b2d8      	uxtb	r0, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	78da      	ldrb	r2, [r3, #3]
 8001e02:	4b16      	ldr	r3, [pc, #88]	; (8001e5c <LL_RTC_DATE_Init+0x144>)
 8001e04:	fba3 1302 	umull	r1, r3, r3, r2
 8001e08:	08d9      	lsrs	r1, r3, #3
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	440b      	add	r3, r1
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	4303      	orrs	r3, r0
 8001e18:	b2db      	uxtb	r3, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	4633      	mov	r3, r6
 8001e1e:	462a      	mov	r2, r5
 8001e20:	4621      	mov	r1, r4
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f7ff fe2e 	bl	8001a84 <LL_RTC_DATE_Config>
    }

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	f7ff fd9c 	bl	8001966 <LL_RTC_DisableInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f7ff fda7 	bl	8001982 <LL_RTC_IsShadowRegBypassEnabled>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d105      	bne.n	8001e46 <LL_RTC_DATE_Init+0x12e>
    {
      status = LL_RTC_WaitForSynchro(RTCx);
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f000 f845 	bl	8001eca <LL_RTC_WaitForSynchro>
 8001e40:	4603      	mov	r3, r0
 8001e42:	75fb      	strb	r3, [r7, #23]
 8001e44:	e001      	b.n	8001e4a <LL_RTC_DATE_Init+0x132>
    }
    else
    {
      status = SUCCESS;
 8001e46:	2300      	movs	r3, #0
 8001e48:	75fb      	strb	r3, [r7, #23]
    }
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f7ff fdd5 	bl	80019fa <LL_RTC_EnableWriteProtection>

  return status;
 8001e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	371c      	adds	r7, #28
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	cccccccd 	.word	0xcccccccd

08001e60 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 8001e68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e6c:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff fe2c 	bl	8001ad4 <LL_RTC_IsActiveFlag_INIT>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d11e      	bne.n	8001ec0 <LL_RTC_EnterInitMode+0x60>
  {
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff fd61 	bl	800194a <LL_RTC_EnableInitMode>

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff fe23 	bl	8001ad4 <LL_RTC_IsActiveFlag_INIT>
 8001e8e:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 8001e90:	e010      	b.n	8001eb4 <LL_RTC_EnterInitMode+0x54>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8001e92:	f7ff fe57 	bl	8001b44 <LL_SYSTICK_IsActiveCounterFlag>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d102      	bne.n	8001ea2 <LL_RTC_EnterInitMode+0x42>
      {
        timeout --;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7ff fe16 	bl	8001ad4 <LL_RTC_IsActiveFlag_INIT>
 8001ea8:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <LL_RTC_EnterInitMode+0x54>
      {
        status = ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d002      	beq.n	8001ec0 <LL_RTC_EnterInitMode+0x60>
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d1e8      	bne.n	8001e92 <LL_RTC_EnterInitMode+0x32>
      }
    }
  }
  return status;
 8001ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3718      	adds	r7, #24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <LL_RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b086      	sub	sp, #24
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 8001ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ed6:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTCx);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff fe1d 	bl	8001b20 <LL_RTC_ClearFlag_RS>

  /* Wait the registers to be synchronised */
  tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff fe07 	bl	8001afa <LL_RTC_IsActiveFlag_RS>
 8001eec:	6138      	str	r0, [r7, #16]
  while ((timeout != 0U) && (tmp != 0U))
 8001eee:	e010      	b.n	8001f12 <LL_RTC_WaitForSynchro+0x48>
  {
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8001ef0:	f7ff fe28 	bl	8001b44 <LL_SYSTICK_IsActiveCounterFlag>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d102      	bne.n	8001f00 <LL_RTC_WaitForSynchro+0x36>
    {
      timeout--;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	3b01      	subs	r3, #1
 8001efe:	60fb      	str	r3, [r7, #12]
    }
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff fdfa 	bl	8001afa <LL_RTC_IsActiveFlag_RS>
 8001f06:	6138      	str	r0, [r7, #16]
    if (timeout == 0U)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <LL_RTC_WaitForSynchro+0x48>
    {
      status = ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	75fb      	strb	r3, [r7, #23]
  while ((timeout != 0U) && (tmp != 0U))
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d002      	beq.n	8001f1e <LL_RTC_WaitForSynchro+0x54>
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1e8      	bne.n	8001ef0 <LL_RTC_WaitForSynchro+0x26>
    }
  }

  if (status != ERROR)
 8001f1e:	7dfb      	ldrb	r3, [r7, #23]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d01e      	beq.n	8001f62 <LL_RTC_WaitForSynchro+0x98>
  {
    timeout = RTC_SYNCHRO_TIMEOUT;
 8001f24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f28:	60fb      	str	r3, [r7, #12]
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff fde5 	bl	8001afa <LL_RTC_IsActiveFlag_RS>
 8001f30:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 8001f32:	e010      	b.n	8001f56 <LL_RTC_WaitForSynchro+0x8c>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8001f34:	f7ff fe06 	bl	8001b44 <LL_SYSTICK_IsActiveCounterFlag>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d102      	bne.n	8001f44 <LL_RTC_WaitForSynchro+0x7a>
      {
        timeout--;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	3b01      	subs	r3, #1
 8001f42:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff fdd8 	bl	8001afa <LL_RTC_IsActiveFlag_RS>
 8001f4a:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <LL_RTC_WaitForSynchro+0x8c>
      {
        status = ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d002      	beq.n	8001f62 <LL_RTC_WaitForSynchro+0x98>
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d1e8      	bne.n	8001f34 <LL_RTC_WaitForSynchro+0x6a>
      }
    }
  }

  return (status);
 8001f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001f76:	4909      	ldr	r1, [pc, #36]	; (8001f9c <LL_InitTick+0x30>)
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f80:	3b01      	subs	r3, #1
 8001f82:	604b      	str	r3, [r1, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <LL_InitTick+0x30>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f8a:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <LL_InitTick+0x30>)
 8001f8c:	2205      	movs	r2, #5
 8001f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000e010 	.word	0xe000e010

08001fa0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001fa8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7ff ffdd 	bl	8001f6c <LL_InitTick>
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001fc4:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <LL_mDelay+0x44>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001fca:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd2:	d00c      	beq.n	8001fee <LL_mDelay+0x32>
  {
    Delay++;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001fda:	e008      	b.n	8001fee <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001fdc:	4b08      	ldr	r3, [pc, #32]	; (8002000 <LL_mDelay+0x44>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d002      	beq.n	8001fee <LL_mDelay+0x32>
    {
      Delay--;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1f3      	bne.n	8001fdc <LL_mDelay+0x20>
    }
  }
}
 8001ff4:	bf00      	nop
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000e010 	.word	0xe000e010

08002004 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800200c:	4a04      	ldr	r2, [pc, #16]	; (8002020 <LL_SetSystemCoreClock+0x1c>)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6013      	str	r3, [r2, #0]
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	20000000 	.word	0x20000000

08002024 <HAL_POT_Init>:
 */
#include "HAL_POT.h"

/*This function initialize the ADC*/
void HAL_POT_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
	MX_ADC1_Init();
 8002028:	f7fe fa3e 	bl	80004a8 <MX_ADC1_Init>
	MX_ADC1_Calibration();
 800202c:	f7fe fae8 	bl	8000600 <MX_ADC1_Calibration>
	MX_ADC1_Enable();
 8002030:	f7fe fad6 	bl	80005e0 <MX_ADC1_Enable>
}
 8002034:	bf00      	nop
 8002036:	bd80      	pop	{r7, pc}

08002038 <HAL_POT_GetBinaryValue>:

/*This function returns the ADC value i an 8 bits format*/
uint16_t HAL_POT_GetBinaryValue (uint32_t Channel)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
	uint16_t POT_value = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	81fb      	strh	r3, [r7, #14]
	MX_ADC1_SetChannel(ADC_Channel_1);
 8002044:	2000      	movs	r0, #0
 8002046:	f7fe faed 	bl	8000624 <MX_ADC1_SetChannel>
	MX_ADC1_StartConversion();
 800204a:	f7fe fb0f 	bl	800066c <MX_ADC1_StartConversion>
	POT_value = MX_ADC1_GetValue();
 800204e:	f7fe fb21 	bl	8000694 <MX_ADC1_GetValue>
 8002052:	4603      	mov	r3, r0
 8002054:	81fb      	strh	r3, [r7, #14]
	LL_mDelay(10);
 8002056:	200a      	movs	r0, #10
 8002058:	f7ff ffb0 	bl	8001fbc <LL_mDelay>

	return POT_value;
 800205c:	89fb      	ldrh	r3, [r7, #14]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <HAL_POT_Percentage>:
	return POT_VoltageValue;
}

/*This function returns the value of the potentiometer as a percentage*/
uint8_t HAL_POT_Percentage (uint32_t Channel)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
	uint8_t POT_Percent = 0;
 8002070:	2300      	movs	r3, #0
 8002072:	73fb      	strb	r3, [r7, #15]
	uint16_t measure = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	81bb      	strh	r3, [r7, #12]

	measure = HAL_POT_GetBinaryValue(Channel);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff ffdd 	bl	8002038 <HAL_POT_GetBinaryValue>
 800207e:	4603      	mov	r3, r0
 8002080:	81bb      	strh	r3, [r7, #12]
	POT_Percent = (measure * 100)/POT_MAX_Count;
 8002082:	89bb      	ldrh	r3, [r7, #12]
 8002084:	2264      	movs	r2, #100	; 0x64
 8002086:	fb02 f303 	mul.w	r3, r2, r3
 800208a:	4a06      	ldr	r2, [pc, #24]	; (80020a4 <HAL_POT_Percentage+0x3c>)
 800208c:	fb82 1203 	smull	r1, r2, r2, r3
 8002090:	441a      	add	r2, r3
 8002092:	11d2      	asrs	r2, r2, #7
 8002094:	17db      	asrs	r3, r3, #31
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	73fb      	strb	r3, [r7, #15]

	return POT_Percent;
 800209a:	7bfb      	ldrb	r3, [r7, #15]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	80808081 	.word	0x80808081

080020a8 <HAL_RTC_Init>:
 */
#include "HAL_RTC.h"

/*This function initialize the RTC module*/
void HAL_RTC_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
	MX_RTC_Init();
 80020ac:	f7ff f844 	bl	8001138 <MX_RTC_Init>
	return;
 80020b0:	bf00      	nop
}
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_TEMPSen_Init>:
 *      Author: carlo
 */
#include "HAL_TEMPSen.h"

void HAL_TEMPSen_Init()
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
	MX_I2C1_Init();
 80020b8:	f7fe fc00 	bl	80008bc <MX_I2C1_Init>
	return;
 80020bc:	bf00      	nop
}
 80020be:	bd80      	pop	{r7, pc}

080020c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80020c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020f8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020c4:	480d      	ldr	r0, [pc, #52]	; (80020fc <LoopForever+0x6>)
  ldr r1, =_edata
 80020c6:	490e      	ldr	r1, [pc, #56]	; (8002100 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020c8:	4a0e      	ldr	r2, [pc, #56]	; (8002104 <LoopForever+0xe>)
  movs r3, #0
 80020ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020cc:	e002      	b.n	80020d4 <LoopCopyDataInit>

080020ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020d2:	3304      	adds	r3, #4

080020d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020d8:	d3f9      	bcc.n	80020ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020da:	4a0b      	ldr	r2, [pc, #44]	; (8002108 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020dc:	4c0b      	ldr	r4, [pc, #44]	; (800210c <LoopForever+0x16>)
  movs r3, #0
 80020de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020e0:	e001      	b.n	80020e6 <LoopFillZerobss>

080020e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020e4:	3204      	adds	r2, #4

080020e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020e8:	d3fb      	bcc.n	80020e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020ea:	f7ff f8d1 	bl	8001290 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020ee:	f000 f811 	bl	8002114 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020f2:	f7fe feb5 	bl	8000e60 <main>

080020f6 <LoopForever>:

LoopForever:
    b LoopForever
 80020f6:	e7fe      	b.n	80020f6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80020f8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80020fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002100:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8002104:	0800218c 	.word	0x0800218c
  ldr r2, =_sbss
 8002108:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800210c:	20000024 	.word	0x20000024

08002110 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002110:	e7fe      	b.n	8002110 <ADC1_2_IRQHandler>
	...

08002114 <__libc_init_array>:
 8002114:	b570      	push	{r4, r5, r6, lr}
 8002116:	4e0d      	ldr	r6, [pc, #52]	; (800214c <__libc_init_array+0x38>)
 8002118:	4c0d      	ldr	r4, [pc, #52]	; (8002150 <__libc_init_array+0x3c>)
 800211a:	1ba4      	subs	r4, r4, r6
 800211c:	10a4      	asrs	r4, r4, #2
 800211e:	2500      	movs	r5, #0
 8002120:	42a5      	cmp	r5, r4
 8002122:	d109      	bne.n	8002138 <__libc_init_array+0x24>
 8002124:	4e0b      	ldr	r6, [pc, #44]	; (8002154 <__libc_init_array+0x40>)
 8002126:	4c0c      	ldr	r4, [pc, #48]	; (8002158 <__libc_init_array+0x44>)
 8002128:	f000 f818 	bl	800215c <_init>
 800212c:	1ba4      	subs	r4, r4, r6
 800212e:	10a4      	asrs	r4, r4, #2
 8002130:	2500      	movs	r5, #0
 8002132:	42a5      	cmp	r5, r4
 8002134:	d105      	bne.n	8002142 <__libc_init_array+0x2e>
 8002136:	bd70      	pop	{r4, r5, r6, pc}
 8002138:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800213c:	4798      	blx	r3
 800213e:	3501      	adds	r5, #1
 8002140:	e7ee      	b.n	8002120 <__libc_init_array+0xc>
 8002142:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002146:	4798      	blx	r3
 8002148:	3501      	adds	r5, #1
 800214a:	e7f2      	b.n	8002132 <__libc_init_array+0x1e>
 800214c:	08002184 	.word	0x08002184
 8002150:	08002184 	.word	0x08002184
 8002154:	08002184 	.word	0x08002184
 8002158:	08002188 	.word	0x08002188

0800215c <_init>:
 800215c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800215e:	bf00      	nop
 8002160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002162:	bc08      	pop	{r3}
 8002164:	469e      	mov	lr, r3
 8002166:	4770      	bx	lr

08002168 <_fini>:
 8002168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800216a:	bf00      	nop
 800216c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800216e:	bc08      	pop	{r3}
 8002170:	469e      	mov	lr, r3
 8002172:	4770      	bx	lr
