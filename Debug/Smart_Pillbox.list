
Smart_Pillbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025e8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002770  08002770  00012770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002780  08002780  00012780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002784  08002784  00012784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000003c  20000000  08002788  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002003c  2**0
                  CONTENTS
  7 .bss          00000028  2000003c  2000003c  0002003c  2**2
                  ALLOC
  8 ._user_heap_stack 00000080  20000064  20000064  0002003c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00006d3e  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000198c  00000000  00000000  00026daa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a30  00000000  00000000  00028738  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000918  00000000  00000000  00029168  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003b16  00000000  00000000  00029a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002423  00000000  00000000  0002d596  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002f9b9  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002888  00000000  00000000  0002fa38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000003c 	.word	0x2000003c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002758 	.word	0x08002758

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000040 	.word	0x20000040
 80001c4:	08002758 	.word	0x08002758

080001c8 <LL_ADC_REG_SetSequencerRanks>:
  *         (5) On STM32F3, ADC channel available only on all ADC instances, but
  *             only one ADC instance is allowed to be connected to VrefInt at the same time.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b089      	sub	sp, #36	; 0x24
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	3330      	adds	r3, #48	; 0x30
 80001d8:	4619      	mov	r1, r3
 80001da:	68bb      	ldr	r3, [r7, #8]
 80001dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80001e0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80001e4:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80001e6:	69ba      	ldr	r2, [r7, #24]
 80001e8:	fa92 f2a2 	rbit	r2, r2
 80001ec:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80001ee:	697a      	ldr	r2, [r7, #20]
 80001f0:	fab2 f282 	clz	r2, r2
 80001f4:	b2d2      	uxtb	r2, r2
 80001f6:	40d3      	lsrs	r3, r2
 80001f8:	009b      	lsls	r3, r3, #2
 80001fa:	440b      	add	r3, r1
 80001fc:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 80001fe:	69fb      	ldr	r3, [r7, #28]
 8000200:	681a      	ldr	r2, [r3, #0]
 8000202:	68bb      	ldr	r3, [r7, #8]
 8000204:	f003 031f 	and.w	r3, r3, #31
 8000208:	211f      	movs	r1, #31
 800020a:	fa01 f303 	lsl.w	r3, r1, r3
 800020e:	43db      	mvns	r3, r3
 8000210:	401a      	ands	r2, r3
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	0e9b      	lsrs	r3, r3, #26
 8000216:	f003 011f 	and.w	r1, r3, #31
 800021a:	68bb      	ldr	r3, [r7, #8]
 800021c:	f003 031f 	and.w	r3, r3, #31
 8000220:	fa01 f303 	lsl.w	r3, r1, r3
 8000224:	431a      	orrs	r2, r3
 8000226:	69fb      	ldr	r3, [r7, #28]
 8000228:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800022a:	bf00      	nop
 800022c:	3724      	adds	r7, #36	; 0x24
 800022e:	46bd      	mov	sp, r7
 8000230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000234:	4770      	bx	lr

08000236 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_181CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_601CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000236:	b480      	push	{r7}
 8000238:	b08d      	sub	sp, #52	; 0x34
 800023a:	af00      	add	r7, sp, #0
 800023c:	60f8      	str	r0, [r7, #12]
 800023e:	60b9      	str	r1, [r7, #8]
 8000240:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	3314      	adds	r3, #20
 8000246:	4619      	mov	r1, r3
 8000248:	68bb      	ldr	r3, [r7, #8]
 800024a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800024e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000252:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000254:	69ba      	ldr	r2, [r7, #24]
 8000256:	fa92 f2a2 	rbit	r2, r2
 800025a:	617a      	str	r2, [r7, #20]
  return result;
 800025c:	697a      	ldr	r2, [r7, #20]
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b2d2      	uxtb	r2, r2
 8000264:	40d3      	lsrs	r3, r2
 8000266:	009b      	lsls	r3, r3, #2
 8000268:	440b      	add	r3, r1
 800026a:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 800026c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800026e:	681a      	ldr	r2, [r3, #0]
 8000270:	68bb      	ldr	r3, [r7, #8]
 8000272:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8000276:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800027a:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800027c:	6a39      	ldr	r1, [r7, #32]
 800027e:	fa91 f1a1 	rbit	r1, r1
 8000282:	61f9      	str	r1, [r7, #28]
  return result;
 8000284:	69f9      	ldr	r1, [r7, #28]
 8000286:	fab1 f181 	clz	r1, r1
 800028a:	b2c9      	uxtb	r1, r1
 800028c:	40cb      	lsrs	r3, r1
 800028e:	2107      	movs	r1, #7
 8000290:	fa01 f303 	lsl.w	r3, r1, r3
 8000294:	43db      	mvns	r3, r3
 8000296:	401a      	ands	r2, r3
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800029e:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80002a2:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80002a6:	fa91 f1a1 	rbit	r1, r1
 80002aa:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 80002ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80002ae:	fab1 f181 	clz	r1, r1
 80002b2:	b2c9      	uxtb	r1, r1
 80002b4:	40cb      	lsrs	r3, r1
 80002b6:	6879      	ldr	r1, [r7, #4]
 80002b8:	fa01 f303 	lsl.w	r3, r1, r3
 80002bc:	431a      	orrs	r2, r3
 80002be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002c0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 80002c2:	bf00      	nop
 80002c4:	3734      	adds	r7, #52	; 0x34
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
	...

080002d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b085      	sub	sp, #20
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	60f8      	str	r0, [r7, #12]
 80002d8:	60b9      	str	r1, [r7, #8]
 80002da:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80002e2:	68b9      	ldr	r1, [r7, #8]
 80002e4:	4b0b      	ldr	r3, [pc, #44]	; (8000314 <LL_ADC_SetChannelSingleDiff+0x44>)
 80002e6:	400b      	ands	r3, r1
 80002e8:	43db      	mvns	r3, r3
 80002ea:	401a      	ands	r2, r3
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	f003 0318 	and.w	r3, r3, #24
 80002f2:	4908      	ldr	r1, [pc, #32]	; (8000314 <LL_ADC_SetChannelSingleDiff+0x44>)
 80002f4:	40d9      	lsrs	r1, r3
 80002f6:	68bb      	ldr	r3, [r7, #8]
 80002f8:	4019      	ands	r1, r3
 80002fa:	4b06      	ldr	r3, [pc, #24]	; (8000314 <LL_ADC_SetChannelSingleDiff+0x44>)
 80002fc:	400b      	ands	r3, r1
 80002fe:	431a      	orrs	r2, r3
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000306:	bf00      	nop
 8000308:	3714      	adds	r7, #20
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	0007fffe 	.word	0x0007fffe

08000318 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
  /* 1. Set the intermediate state before moving the ADC voltage regulator    */
  /*    to state enable.                                                      */
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	689b      	ldr	r3, [r3, #8]
 8000324:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	609a      	str	r2, [r3, #8]
  /* 2. Set the final state of ADC voltage regulator enable                   */
  /*    (ADVREGEN bits set to 0x01).                                          */
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	689b      	ldr	r3, [r3, #8]
 8000330:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000334:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000338:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN_0);
}
 8000340:	bf00      	nop
 8000342:	370c      	adds	r7, #12
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr

0800034c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	689b      	ldr	r3, [r3, #8]
 8000358:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800035c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000360:	f043 0201 	orr.w	r2, r3, #1
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000368:	bf00      	nop
 800036a:	370c      	adds	r7, #12
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr

08000374 <LL_ADC_StartCalibration>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	6039      	str	r1, [r7, #0]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	689b      	ldr	r3, [r3, #8]
 8000382:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000386:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800038a:	683a      	ldr	r2, [r7, #0]
 800038c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8000390:	4313      	orrs	r3, r2
 8000392:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	609a      	str	r2, [r3, #8]
             ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL | (SingleDiff & ADC_SINGLEDIFF_CALIB_START_MASK));
}
 800039a:	bf00      	nop
 800039c:	370c      	adds	r7, #12
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr

080003a6 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 80003a6:	b480      	push	{r7}
 80003a8:	b083      	sub	sp, #12
 80003aa:	af00      	add	r7, sp, #0
 80003ac:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	689b      	ldr	r3, [r3, #8]
 80003b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80003b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003ba:	bf0c      	ite	eq
 80003bc:	2301      	moveq	r3, #1
 80003be:	2300      	movne	r3, #0
 80003c0:	b2db      	uxtb	r3, r3
}
 80003c2:	4618      	mov	r0, r3
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr

080003ce <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80003ce:	b480      	push	{r7}
 80003d0:	b083      	sub	sp, #12
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	689b      	ldr	r3, [r3, #8]
 80003da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80003de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80003e2:	f043 0204 	orr.w	r2, r3, #4
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80003ea:	bf00      	nop
 80003ec:	370c      	adds	r7, #12
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr

080003f6 <LL_ADC_REG_ReadConversionData8>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData8
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_ADC_REG_ReadConversionData8(ADC_TypeDef *ADCx)
{
 80003f6:	b480      	push	{r7}
 80003f8:	b083      	sub	sp, #12
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000402:	b2db      	uxtb	r3, r3
}
 8000404:	4618      	mov	r0, r3
 8000406:	370c      	adds	r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr

08000410 <LL_ADC_IsActiveFlag_ADRDY>:
  * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	f003 0301 	and.w	r3, r3, #1
 8000420:	2b01      	cmp	r3, #1
 8000422:	bf0c      	ite	eq
 8000424:	2301      	moveq	r3, #1
 8000426:	2300      	movne	r3, #0
 8000428:	b2db      	uxtb	r3, r3
}
 800042a:	4618      	mov	r0, r3
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr

08000436 <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
 8000436:	b480      	push	{r7}
 8000438:	b083      	sub	sp, #12
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	f003 0304 	and.w	r3, r3, #4
 8000446:	2b04      	cmp	r3, #4
 8000448:	bf0c      	ite	eq
 800044a:	2301      	moveq	r3, #1
 800044c:	2300      	movne	r3, #0
 800044e:	b2db      	uxtb	r3, r3
}
 8000450:	4618      	mov	r0, r3
 8000452:	370c      	adds	r7, #12
 8000454:	46bd      	mov	sp, r7
 8000456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045a:	4770      	bx	lr

0800045c <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	2204      	movs	r2, #4
 8000468:	601a      	str	r2, [r3, #0]
}
 800046a:	bf00      	nop
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
	...

08000478 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000480:	4908      	ldr	r1, [pc, #32]	; (80004a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000482:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000484:	695a      	ldr	r2, [r3, #20]
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4313      	orrs	r3, r2
 800048a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800048c:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800048e:	695a      	ldr	r2, [r3, #20]
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4013      	ands	r3, r2
 8000494:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000496:	68fb      	ldr	r3, [r7, #12]
}
 8000498:	bf00      	nop
 800049a:	3714      	adds	r7, #20
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	40021000 	.word	0x40021000

080004a8 <MX_ADC1_Init>:
const uint32_t ADC_Sampling_Time_Map[ADC_Channel_Num] = {LL_ADC_SAMPLINGTIME_601CYCLES_5, LL_ADC_SAMPLINGTIME_601CYCLES_5};
/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b094      	sub	sp, #80	; 0x50
 80004ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80004ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
 80004b8:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80004ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	605a      	str	r2, [r3, #4]
 80004c4:	609a      	str	r2, [r3, #8]
 80004c6:	60da      	str	r2, [r3, #12]
 80004c8:	611a      	str	r2, [r3, #16]
 80004ca:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80004cc:	f107 0318 	add.w	r3, r7, #24
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
 80004d8:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004da:	463b      	mov	r3, r7
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	60da      	str	r2, [r3, #12]
 80004e6:	611a      	str	r2, [r3, #16]
 80004e8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC12);
 80004ea:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80004ee:	f7ff ffc3 	bl	8000478 <LL_AHB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80004f2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80004f6:	f7ff ffbf 	bl	8000478 <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA0   ------> ADC1_IN1
  PA1   ------> ADC1_IN2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 80004fa:	2303      	movs	r3, #3
 80004fc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80004fe:	2303      	movs	r3, #3
 8000500:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000502:	2300      	movs	r3, #0
 8000504:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000506:	463b      	mov	r3, r7
 8000508:	4619      	mov	r1, r3
 800050a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050e:	f001 f9a0 	bl	8001852 <LL_GPIO_Init>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_8B;
 8000512:	2310      	movs	r3, #16
 8000514:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000516:	2300      	movs	r3, #0
 8000518:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 800051a:	2300      	movs	r3, #0
 800051c:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800051e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000522:	4619      	mov	r1, r3
 8000524:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000528:	f001 f81e 	bl	8001568 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800052c:	2300      	movs	r3, #0
 800052e:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000530:	2300      	movs	r3, #0
 8000532:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000534:	2300      	movs	r3, #0
 8000536:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000538:	2300      	movs	r3, #0
 800053a:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 800053c:	2301      	movs	r3, #1
 800053e:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 8000540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000544:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000546:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800054a:	4619      	mov	r1, r3
 800054c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000550:	f001 f830 	bl	80015b4 <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8000554:	2300      	movs	r3, #0
 8000556:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000558:	2300      	movs	r3, #0
 800055a:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 800055c:	f107 0318 	add.w	r3, r7, #24
 8000560:	4619      	mov	r1, r3
 8000562:	481a      	ldr	r0, [pc, #104]	; (80005cc <MX_ADC1_Init+0x124>)
 8000564:	f000 ffc0 	bl	80014e8 <LL_ADC_CommonInit>

  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8000568:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800056c:	f7ff fed4 	bl	8000318 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000570:	4b17      	ldr	r3, [pc, #92]	; (80005d0 <MX_ADC1_Init+0x128>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	099b      	lsrs	r3, r3, #6
 8000576:	4a17      	ldr	r2, [pc, #92]	; (80005d4 <MX_ADC1_Init+0x12c>)
 8000578:	fba2 2303 	umull	r2, r3, r2, r3
 800057c:	099a      	lsrs	r2, r3, #6
 800057e:	4613      	mov	r3, r2
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	4413      	add	r3, r2
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	461a      	mov	r2, r3
 8000588:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <MX_ADC1_Init+0x130>)
 800058a:	fba3 2302 	umull	r2, r3, r3, r2
 800058e:	08db      	lsrs	r3, r3, #3
 8000590:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000592:	e002      	b.n	800059a <MX_ADC1_Init+0xf2>
  {
    wait_loop_index--;
 8000594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000596:	3b01      	subs	r3, #1
 8000598:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 800059a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800059c:	2b00      	cmp	r3, #0
 800059e:	d1f9      	bne.n	8000594 <MX_ADC1_Init+0xec>
  }
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 80005a0:	4a0e      	ldr	r2, [pc, #56]	; (80005dc <MX_ADC1_Init+0x134>)
 80005a2:	2106      	movs	r1, #6
 80005a4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80005a8:	f7ff fe0e 	bl	80001c8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_601CYCLES_5);
 80005ac:	2207      	movs	r2, #7
 80005ae:	490b      	ldr	r1, [pc, #44]	; (80005dc <MX_ADC1_Init+0x134>)
 80005b0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80005b4:	f7ff fe3f 	bl	8000236 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 80005b8:	227f      	movs	r2, #127	; 0x7f
 80005ba:	4908      	ldr	r1, [pc, #32]	; (80005dc <MX_ADC1_Init+0x134>)
 80005bc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80005c0:	f7ff fe86 	bl	80002d0 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c4:	bf00      	nop
 80005c6:	3750      	adds	r7, #80	; 0x50
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	50000300 	.word	0x50000300
 80005d0:	20000000 	.word	0x20000000
 80005d4:	053e2d63 	.word	0x053e2d63
 80005d8:	cccccccd 	.word	0xcccccccd
 80005dc:	04300002 	.word	0x04300002

080005e0 <MX_ADC1_Enable>:

/* USER CODE BEGIN 1 */

/*This function enable ADC*/
void MX_ADC1_Enable(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	LL_ADC_Enable(ADC1);
 80005e4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80005e8:	f7ff feb0 	bl	800034c <LL_ADC_Enable>
	while(!LL_ADC_IsActiveFlag_ADRDY(ADC1));
 80005ec:	bf00      	nop
 80005ee:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80005f2:	f7ff ff0d 	bl	8000410 <LL_ADC_IsActiveFlag_ADRDY>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d0f8      	beq.n	80005ee <MX_ADC1_Enable+0xe>

	return;
 80005fc:	bf00      	nop
}
 80005fe:	bd80      	pop	{r7, pc}

08000600 <MX_ADC1_Calibration>:
/*This Function start the ADC calibration and wait into the cycle until calibration is in progress*/
void MX_ADC1_Calibration(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	LL_ADC_StartCalibration(ADC1, LL_ADC_SINGLE_ENDED);
 8000604:	217f      	movs	r1, #127	; 0x7f
 8000606:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800060a:	f7ff feb3 	bl	8000374 <LL_ADC_StartCalibration>
	while(LL_ADC_IsCalibrationOnGoing(ADC1));
 800060e:	bf00      	nop
 8000610:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000614:	f7ff fec7 	bl	80003a6 <LL_ADC_IsCalibrationOnGoing>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d1f8      	bne.n	8000610 <MX_ADC1_Calibration+0x10>

	return;
 800061e:	bf00      	nop
}
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <MX_ADC1_SetChannel>:
 * just use one of the following arguments:
 * Channel 1: ADC_Channel_1
 * Channel 2: ADC_Channel_2
 */
void MX_ADC1_SetChannel(uint32_t Channel)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	LL_ADC_REG_SetSequencerRanks(ADC1,LL_ADC_REG_RANK_1, ADC_Channel_Map[Channel]);
 800062c:	4a0d      	ldr	r2, [pc, #52]	; (8000664 <MX_ADC1_SetChannel+0x40>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000634:	461a      	mov	r2, r3
 8000636:	2106      	movs	r1, #6
 8000638:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800063c:	f7ff fdc4 	bl	80001c8 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC1,ADC_Channel_Map[Channel],ADC_Sampling_Time_Map[Channel]);
 8000640:	4a08      	ldr	r2, [pc, #32]	; (8000664 <MX_ADC1_SetChannel+0x40>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000648:	4a07      	ldr	r2, [pc, #28]	; (8000668 <MX_ADC1_SetChannel+0x44>)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000650:	461a      	mov	r2, r3
 8000652:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000656:	f7ff fdee 	bl	8000236 <LL_ADC_SetChannelSamplingTime>

	return;
 800065a:	bf00      	nop
}
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	08002770 	.word	0x08002770
 8000668:	08002778 	.word	0x08002778

0800066c <MX_ADC1_StartConversion>:

/*This function start the ADC conversion process*/
void MX_ADC1_StartConversion(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	LL_ADC_REG_StartConversion(ADC1);
 8000670:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000674:	f7ff feab 	bl	80003ce <LL_ADC_REG_StartConversion>
	/*This cycle waits until the end of conversion flag is active*/
	while(!LL_ADC_IsActiveFlag_EOC(ADC1));
 8000678:	bf00      	nop
 800067a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800067e:	f7ff feda 	bl	8000436 <LL_ADC_IsActiveFlag_EOC>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d0f8      	beq.n	800067a <MX_ADC1_StartConversion+0xe>
	/*When ADC finish the conversion just clear the EOC flag*/
	LL_ADC_ClearFlag_EOC(ADC1);
 8000688:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800068c:	f7ff fee6 	bl	800045c <LL_ADC_ClearFlag_EOC>

	return;
 8000690:	bf00      	nop
}
 8000692:	bd80      	pop	{r7, pc}

08000694 <MX_ADC1_GetValue>:

/*This function get the ADC value on a 8 bits format*/
uint16_t MX_ADC1_GetValue(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
	uint16_t ADC_value;
	ADC_value=LL_ADC_REG_ReadConversionData8(ADC1);
 800069a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800069e:	f7ff feaa 	bl	80003f6 <LL_ADC_REG_ReadConversionData8>
 80006a2:	4603      	mov	r3, r0
 80006a4:	80fb      	strh	r3, [r7, #6]
	return ADC_value;
 80006a6:	88fb      	ldrh	r3, [r7, #6]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <LL_AHB1_GRP1_EnableClock>:
{
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80006b8:	4908      	ldr	r1, [pc, #32]	; (80006dc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006bc:	695a      	ldr	r2, [r3, #20]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006c6:	695a      	ldr	r2, [r3, #20]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4013      	ands	r3, r2
 80006cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006ce:	68fb      	ldr	r3, [r7, #12]
}
 80006d0:	bf00      	nop
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	40021000 	.word	0x40021000

080006e0 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	691a      	ldr	r2, [r3, #16]
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	401a      	ands	r2, r3
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	bf0c      	ite	eq
 80006f8:	2301      	moveq	r3, #1
 80006fa:	2300      	movne	r3, #0
 80006fc:	b2db      	uxtb	r3, r3
}
 80006fe:	4618      	mov	r0, r3
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr

0800070a <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800070a:	b480      	push	{r7}
 800070c:	b083      	sub	sp, #12
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
 8000712:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	683a      	ldr	r2, [r7, #0]
 8000718:	619a      	str	r2, [r3, #24]
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr

08000726 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000726:	b480      	push	{r7}
 8000728:	b083      	sub	sp, #12
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
 800072e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	683a      	ldr	r2, [r7, #0]
 8000734:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
	...

08000744 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	463b      	mov	r3, r7
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]
 8000758:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800075a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800075e:	f7ff ffa7 	bl	80006b0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000762:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000766:	f7ff ffa3 	bl	80006b0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800076a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800076e:	f7ff ff9f 	bl	80006b0 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOA, LCD_RESET_Pin|LCD_A0_Pin);
 8000772:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000776:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077a:	f7ff ffc6 	bl	800070a <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(LCD_CS_N_GPIO_Port, LCD_CS_N_Pin);
 800077e:	2140      	movs	r1, #64	; 0x40
 8000780:	483b      	ldr	r0, [pc, #236]	; (8000870 <MX_GPIO_Init+0x12c>)
 8000782:	f7ff ffc2 	bl	800070a <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8000786:	2180      	movs	r1, #128	; 0x80
 8000788:	483a      	ldr	r0, [pc, #232]	; (8000874 <MX_GPIO_Init+0x130>)
 800078a:	f7ff ffcc 	bl	8000726 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 800078e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000792:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000796:	f7ff ffc6 	bl	8000726 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
 800079a:	2110      	movs	r1, #16
 800079c:	4834      	ldr	r0, [pc, #208]	; (8000870 <MX_GPIO_Init+0x12c>)
 800079e:	f7ff ffc2 	bl	8000726 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = J_RIGHT_Pin|J_LEFT_Pin;
 80007a2:	2303      	movs	r3, #3
 80007a4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007aa:	2300      	movs	r3, #0
 80007ac:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ae:	463b      	mov	r3, r7
 80007b0:	4619      	mov	r1, r3
 80007b2:	4830      	ldr	r0, [pc, #192]	; (8000874 <MX_GPIO_Init+0x130>)
 80007b4:	f001 f84d 	bl	8001852 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = J_UP_Pin;
 80007b8:	2310      	movs	r3, #16
 80007ba:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80007bc:	2300      	movs	r3, #0
 80007be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007c0:	2300      	movs	r3, #0
 80007c2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(J_UP_GPIO_Port, &GPIO_InitStruct);
 80007c4:	463b      	mov	r3, r7
 80007c6:	4619      	mov	r1, r3
 80007c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007cc:	f001 f841 	bl	8001852 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_A0_Pin;
 80007d0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80007d4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007d6:	2301      	movs	r3, #1
 80007d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e6:	463b      	mov	r3, r7
 80007e8:	4619      	mov	r1, r3
 80007ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ee:	f001 f830 	bl	8001852 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = J_DOWN_Pin|J_CENTER_Pin;
 80007f2:	2321      	movs	r3, #33	; 0x21
 80007f4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fe:	463b      	mov	r3, r7
 8000800:	4619      	mov	r1, r3
 8000802:	481b      	ldr	r0, [pc, #108]	; (8000870 <MX_GPIO_Init+0x12c>)
 8000804:	f001 f825 	bl	8001852 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_G_Pin;
 8000808:	2380      	movs	r3, #128	; 0x80
 800080a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800080c:	2301      	movs	r3, #1
 800080e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000810:	2300      	movs	r3, #0
 8000812:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000818:	2300      	movs	r3, #0
 800081a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 800081c:	463b      	mov	r3, r7
 800081e:	4619      	mov	r1, r3
 8000820:	4814      	ldr	r0, [pc, #80]	; (8000874 <MX_GPIO_Init+0x130>)
 8000822:	f001 f816 	bl	8001852 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_B_Pin;
 8000826:	f44f 7300 	mov.w	r3, #512	; 0x200
 800082a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800082c:	2301      	movs	r3, #1
 800082e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000830:	2300      	movs	r3, #0
 8000832:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000838:	2300      	movs	r3, #0
 800083a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 800083c:	463b      	mov	r3, r7
 800083e:	4619      	mov	r1, r3
 8000840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000844:	f001 f805 	bl	8001852 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_R_Pin|LCD_CS_N_Pin;
 8000848:	2350      	movs	r3, #80	; 0x50
 800084a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800084c:	2301      	movs	r3, #1
 800084e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000850:	2300      	movs	r3, #0
 8000852:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000858:	2300      	movs	r3, #0
 800085a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085c:	463b      	mov	r3, r7
 800085e:	4619      	mov	r1, r3
 8000860:	4803      	ldr	r0, [pc, #12]	; (8000870 <MX_GPIO_Init+0x12c>)
 8000862:	f000 fff6 	bl	8001852 <LL_GPIO_Init>

}
 8000866:	bf00      	nop
 8000868:	3718      	adds	r7, #24
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	48000400 	.word	0x48000400
 8000874:	48000800 	.word	0x48000800

08000878 <MX_Joystick_Up>:

/* USER CODE BEGIN 2 */
short MX_Joystick_Up(){
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
	/* Deteccion de Joystick Up */
	short v = LL_GPIO_IsInputPinSet(GPIOA,J_UP_Pin);
 800087e:	2110      	movs	r1, #16
 8000880:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000884:	f7ff ff2c 	bl	80006e0 <LL_GPIO_IsInputPinSet>
 8000888:	4603      	mov	r3, r0
 800088a:	80fb      	strh	r3, [r7, #6]
	return v;
 800088c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000890:	4618      	mov	r0, r3
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <MX_Joystick_Down>:
short MX_Joystick_Down(){
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
	/* Deteccion de Joystick Down */
	short v = LL_GPIO_IsInputPinSet(GPIOB,J_DOWN_Pin);
 800089e:	2101      	movs	r1, #1
 80008a0:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_Joystick_Down+0x20>)
 80008a2:	f7ff ff1d 	bl	80006e0 <LL_GPIO_IsInputPinSet>
 80008a6:	4603      	mov	r3, r0
 80008a8:	80fb      	strh	r3, [r7, #6]
	return v;
 80008aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	48000400 	.word	0x48000400

080008bc <MX_RGB_Red>:
short MX_Joystick_Center(){
	/* Deteccion de Joystick Center */
	short v = LL_GPIO_IsInputPinSet(GPIOB,J_CENTER_Pin);
	return v;
}
void MX_RGB_Red(short v){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	80fb      	strh	r3, [r7, #6]
	/* Activacion o desactivacion led R */
	if (v == 1)
 80008c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d104      	bne.n	80008d8 <MX_RGB_Red+0x1c>
		LL_GPIO_SetOutputPin(GPIOB,LED_R_Pin);
 80008ce:	2110      	movs	r1, #16
 80008d0:	4807      	ldr	r0, [pc, #28]	; (80008f0 <MX_RGB_Red+0x34>)
 80008d2:	f7ff ff1a 	bl	800070a <LL_GPIO_SetOutputPin>
	else if (v == 0)
		LL_GPIO_ResetOutputPin(GPIOB,LED_R_Pin);
}
 80008d6:	e007      	b.n	80008e8 <MX_RGB_Red+0x2c>
	else if (v == 0)
 80008d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d103      	bne.n	80008e8 <MX_RGB_Red+0x2c>
		LL_GPIO_ResetOutputPin(GPIOB,LED_R_Pin);
 80008e0:	2110      	movs	r1, #16
 80008e2:	4803      	ldr	r0, [pc, #12]	; (80008f0 <MX_RGB_Red+0x34>)
 80008e4:	f7ff ff1f 	bl	8000726 <LL_GPIO_ResetOutputPin>
}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	48000400 	.word	0x48000400

080008f4 <MX_RGB_Green>:
void MX_RGB_Green(short v){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	80fb      	strh	r3, [r7, #6]
	/* Activacion o desactivacion led G */
	if (v == 1)
 80008fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d104      	bne.n	8000910 <MX_RGB_Green+0x1c>
		LL_GPIO_SetOutputPin(GPIOC,LED_G_Pin);
 8000906:	2180      	movs	r1, #128	; 0x80
 8000908:	4807      	ldr	r0, [pc, #28]	; (8000928 <MX_RGB_Green+0x34>)
 800090a:	f7ff fefe 	bl	800070a <LL_GPIO_SetOutputPin>
	else if (v == 0)
		LL_GPIO_ResetOutputPin(GPIOC,LED_G_Pin);
}
 800090e:	e007      	b.n	8000920 <MX_RGB_Green+0x2c>
	else if (v == 0)
 8000910:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d103      	bne.n	8000920 <MX_RGB_Green+0x2c>
		LL_GPIO_ResetOutputPin(GPIOC,LED_G_Pin);
 8000918:	2180      	movs	r1, #128	; 0x80
 800091a:	4803      	ldr	r0, [pc, #12]	; (8000928 <MX_RGB_Green+0x34>)
 800091c:	f7ff ff03 	bl	8000726 <LL_GPIO_ResetOutputPin>
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	48000800 	.word	0x48000800

0800092c <MX_RGB_Blue>:
void MX_RGB_Blue(short v){
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	80fb      	strh	r3, [r7, #6]
	/* Activacion o desactivacion led B */
	if (v == 1)
 8000936:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d106      	bne.n	800094c <MX_RGB_Blue+0x20>
		LL_GPIO_SetOutputPin(GPIOA,LED_B_Pin);
 800093e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000942:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000946:	f7ff fee0 	bl	800070a <LL_GPIO_SetOutputPin>
	else if (v == 0)
		LL_GPIO_ResetOutputPin(GPIOA,LED_B_Pin);
}
 800094a:	e009      	b.n	8000960 <MX_RGB_Blue+0x34>
	else if (v == 0)
 800094c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d105      	bne.n	8000960 <MX_RGB_Blue+0x34>
		LL_GPIO_ResetOutputPin(GPIOA,LED_B_Pin);
 8000954:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000958:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800095c:	f7ff fee3 	bl	8000726 <LL_GPIO_ResetOutputPin>
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	601a      	str	r2, [r3, #0]
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	601a      	str	r2, [r3, #0]
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <LL_I2C_SetMasterAddressingMode>:
  *         @arg @ref LL_I2C_ADDRESSING_MODE_7BIT
  *         @arg @ref LL_I2C_ADDRESSING_MODE_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMasterAddressingMode(I2C_TypeDef *I2Cx, uint32_t AddressingMode)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_ADD10, AddressingMode);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	431a      	orrs	r2, r3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	605a      	str	r2, [r3, #4]
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 80009ce:	b480      	push	{r7}
 80009d0:	b085      	sub	sp, #20
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	60f8      	str	r0, [r7, #12]
 80009d6:	60b9      	str	r1, [r7, #8]
 80009d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	68db      	ldr	r3, [r3, #12]
 80009de:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80009e2:	f023 0306 	bic.w	r3, r3, #6
 80009e6:	68b9      	ldr	r1, [r7, #8]
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	430a      	orrs	r2, r1
 80009ec:	431a      	orrs	r2, r3
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	60da      	str	r2, [r3, #12]
}
 80009f2:	bf00      	nop
 80009f4:	3714      	adds	r7, #20
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80009fe:	b480      	push	{r7}
 8000a00:	b083      	sub	sp, #12
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	68db      	ldr	r3, [r3, #12]
 8000a0a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	60da      	str	r2, [r3, #12]
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	b083      	sub	sp, #12
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	605a      	str	r2, [r3, #4]
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
	...

08000a40 <LL_AHB1_GRP1_EnableClock>:
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000a48:	4908      	ldr	r1, [pc, #32]	; (8000a6c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a4c:	695a      	ldr	r2, [r3, #20]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a56:	695a      	ldr	r2, [r3, #20]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
}
 8000a60:	bf00      	nop
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	40021000 	.word	0x40021000

08000a70 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000a78:	4908      	ldr	r1, [pc, #32]	; (8000a9c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a7c:	69da      	ldr	r2, [r3, #28]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a86:	69da      	ldr	r2, [r3, #28]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
}
 8000a90:	bf00      	nop
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	40021000 	.word	0x40021000

08000aa0 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08e      	sub	sp, #56	; 0x38
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]
 8000ab6:	615a      	str	r2, [r3, #20]
 8000ab8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
 8000ac8:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000aca:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000ace:	f7ff ffb7 	bl	8000a40 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8000ad2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ad6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000adc:	2303      	movs	r3, #3
 8000ade:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000ae8:	2304      	movs	r3, #4
 8000aea:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	4619      	mov	r1, r3
 8000af0:	481a      	ldr	r0, [pc, #104]	; (8000b5c <MX_I2C1_Init+0xbc>)
 8000af2:	f000 feae 	bl	8001852 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8000af6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000afa:	f7ff ffb9 	bl	8000a70 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8000afe:	4818      	ldr	r0, [pc, #96]	; (8000b60 <MX_I2C1_Init+0xc0>)
 8000b00:	f7ff ff8d 	bl	8000a1e <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8000b04:	4816      	ldr	r0, [pc, #88]	; (8000b60 <MX_I2C1_Init+0xc0>)
 8000b06:	f7ff ff7a 	bl	80009fe <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8000b0a:	4815      	ldr	r0, [pc, #84]	; (8000b60 <MX_I2C1_Init+0xc0>)
 8000b0c:	f7ff ff3c 	bl	8000988 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8000b10:	4813      	ldr	r0, [pc, #76]	; (8000b60 <MX_I2C1_Init+0xc0>)
 8000b12:	f7ff ff29 	bl	8000968 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x00101D7C;
 8000b1a:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <MX_I2C1_Init+0xc4>)
 8000b1c:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_10BIT;
 8000b2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b32:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4809      	ldr	r0, [pc, #36]	; (8000b60 <MX_I2C1_Init+0xc0>)
 8000b3c:	f000 ff9c 	bl	8001a78 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2100      	movs	r1, #0
 8000b44:	4806      	ldr	r0, [pc, #24]	; (8000b60 <MX_I2C1_Init+0xc0>)
 8000b46:	f7ff ff42 	bl	80009ce <LL_I2C_SetOwnAddress2>
  LL_I2C_SetMasterAddressingMode(I2C1, LL_I2C_ADDRESSING_MODE_10BIT);
 8000b4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b4e:	4804      	ldr	r0, [pc, #16]	; (8000b60 <MX_I2C1_Init+0xc0>)
 8000b50:	f7ff ff2a 	bl	80009a8 <LL_I2C_SetMasterAddressingMode>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	3738      	adds	r7, #56	; 0x38
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	48000400 	.word	0x48000400
 8000b60:	40005400 	.word	0x40005400
 8000b64:	00101d7c 	.word	0x00101d7c

08000b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b84:	4013      	ands	r3, r2
 8000b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9a:	4a04      	ldr	r2, [pc, #16]	; (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	60d3      	str	r3, [r2, #12]
}
 8000ba0:	bf00      	nop
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb4:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	0a1b      	lsrs	r3, r3, #8
 8000bba:	f003 0307 	and.w	r3, r3, #7
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	6039      	str	r1, [r7, #0]
 8000bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	db0a      	blt.n	8000bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be0:	490d      	ldr	r1, [pc, #52]	; (8000c18 <__NVIC_SetPriority+0x4c>)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	683a      	ldr	r2, [r7, #0]
 8000be8:	b2d2      	uxtb	r2, r2
 8000bea:	0112      	lsls	r2, r2, #4
 8000bec:	b2d2      	uxtb	r2, r2
 8000bee:	440b      	add	r3, r1
 8000bf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf4:	e00a      	b.n	8000c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf6:	4909      	ldr	r1, [pc, #36]	; (8000c1c <__NVIC_SetPriority+0x50>)
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	f003 030f 	and.w	r3, r3, #15
 8000bfe:	3b04      	subs	r3, #4
 8000c00:	683a      	ldr	r2, [r7, #0]
 8000c02:	b2d2      	uxtb	r2, r2
 8000c04:	0112      	lsls	r2, r2, #4
 8000c06:	b2d2      	uxtb	r2, r2
 8000c08:	440b      	add	r3, r1
 8000c0a:	761a      	strb	r2, [r3, #24]
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000e100 	.word	0xe000e100
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b089      	sub	sp, #36	; 0x24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	f1c3 0307 	rsb	r3, r3, #7
 8000c3a:	2b04      	cmp	r3, #4
 8000c3c:	bf28      	it	cs
 8000c3e:	2304      	movcs	r3, #4
 8000c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3304      	adds	r3, #4
 8000c46:	2b06      	cmp	r3, #6
 8000c48:	d902      	bls.n	8000c50 <NVIC_EncodePriority+0x30>
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3b03      	subs	r3, #3
 8000c4e:	e000      	b.n	8000c52 <NVIC_EncodePriority+0x32>
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	2201      	movs	r2, #1
 8000c56:	69bb      	ldr	r3, [r7, #24]
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	1e5a      	subs	r2, r3, #1
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	401a      	ands	r2, r3
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c66:	2101      	movs	r1, #1
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6e:	1e59      	subs	r1, r3, #1
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	4313      	orrs	r3, r2
         );
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3724      	adds	r7, #36	; 0x24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
	...

08000c84 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000c88:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <LL_RCC_HSI_Enable+0x1c>)
 8000c8a:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <LL_RCC_HSI_Enable+0x1c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	6013      	str	r3, [r2, #0]
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <LL_RCC_HSI_IsReady+0x20>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f003 0302 	and.w	r3, r3, #2
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	bf0c      	ite	eq
 8000cb4:	2301      	moveq	r3, #1
 8000cb6:	2300      	movne	r3, #0
 8000cb8:	b2db      	uxtb	r3, r3
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	40021000 	.word	0x40021000

08000cc8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000cd0:	4907      	ldr	r1, [pc, #28]	; (8000cf0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000cd2:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	00db      	lsls	r3, r3, #3
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	600b      	str	r3, [r1, #0]
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	40021000 	.word	0x40021000

08000cf4 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000cf8:	4a05      	ldr	r2, [pc, #20]	; (8000d10 <LL_RCC_LSI_Enable+0x1c>)
 8000cfa:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <LL_RCC_LSI_Enable+0x1c>)
 8000cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40021000 	.word	0x40021000

08000d14 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY));
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <LL_RCC_LSI_IsReady+0x20>)
 8000d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d1c:	f003 0302 	and.w	r3, r3, #2
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	bf0c      	ite	eq
 8000d24:	2301      	moveq	r3, #1
 8000d26:	2300      	movne	r3, #0
 8000d28:	b2db      	uxtb	r3, r3
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	40021000 	.word	0x40021000

08000d38 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000d40:	4906      	ldr	r1, [pc, #24]	; (8000d5c <LL_RCC_SetSysClkSource+0x24>)
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <LL_RCC_SetSysClkSource+0x24>)
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f023 0203 	bic.w	r2, r3, #3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	604b      	str	r3, [r1, #4]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	40021000 	.word	0x40021000

08000d60 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <LL_RCC_GetSysClkSource+0x18>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 030c 	and.w	r3, r3, #12
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	40021000 	.word	0x40021000

08000d7c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000d84:	4906      	ldr	r1, [pc, #24]	; (8000da0 <LL_RCC_SetAHBPrescaler+0x24>)
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <LL_RCC_SetAHBPrescaler+0x24>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	604b      	str	r3, [r1, #4]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	40021000 	.word	0x40021000

08000da4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000dac:	4906      	ldr	r1, [pc, #24]	; (8000dc8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	604b      	str	r3, [r1, #4]
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	40021000 	.word	0x40021000

08000dcc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000dd4:	4906      	ldr	r1, [pc, #24]	; (8000df0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	604b      	str	r3, [r1, #4]
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	40021000 	.word	0x40021000

08000df4 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8000dfc:	4908      	ldr	r1, [pc, #32]	; (8000e20 <LL_RCC_SetI2CClockSource+0x2c>)
 8000dfe:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <LL_RCC_SetI2CClockSource+0x2c>)
 8000e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	0e1b      	lsrs	r3, r3, #24
 8000e06:	43db      	mvns	r3, r3
 8000e08:	401a      	ands	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000e10:	4313      	orrs	r3, r2
 8000e12:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	40021000 	.word	0x40021000

08000e24 <LL_RCC_SetADCClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
#if defined(RCC_CFGR2_ADCPRE34)
  MODIFY_REG(RCC->CFGR2, (ADCxSource >> 16U), (ADCxSource & 0x0000FFFFU));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_ADCPRE12, ADCxSource);
 8000e2c:	4906      	ldr	r1, [pc, #24]	; (8000e48 <LL_RCC_SetADCClockSource+0x24>)
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <LL_RCC_SetADCClockSource+0x24>)
 8000e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e32:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_ADCPRE34 */
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	40021000 	.word	0x40021000

08000e4c <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8000e54:	4906      	ldr	r1, [pc, #24]	; (8000e70 <LL_RCC_SetRTCClockSource+0x24>)
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <LL_RCC_SetRTCClockSource+0x24>)
 8000e58:	6a1b      	ldr	r3, [r3, #32]
 8000e5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	620b      	str	r3, [r1, #32]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	40021000 	.word	0x40021000

08000e74 <LL_RCC_GetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSE
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  */
__STATIC_INLINE uint32_t LL_RCC_GetRTCClockSource(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <LL_RCC_GetRTCClockSource+0x18>)
 8000e7a:	6a1b      	ldr	r3, [r3, #32]
 8000e7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	40021000 	.word	0x40021000

08000e90 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000e94:	4a05      	ldr	r2, [pc, #20]	; (8000eac <LL_RCC_EnableRTC+0x1c>)
 8000e96:	4b05      	ldr	r3, [pc, #20]	; (8000eac <LL_RCC_EnableRTC+0x1c>)
 8000e98:	6a1b      	ldr	r3, [r3, #32]
 8000e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e9e:	6213      	str	r3, [r2, #32]
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	40021000 	.word	0x40021000

08000eb0 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000eb4:	4a05      	ldr	r2, [pc, #20]	; (8000ecc <LL_RCC_ForceBackupDomainReset+0x1c>)
 8000eb6:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <LL_RCC_ForceBackupDomainReset+0x1c>)
 8000eb8:	6a1b      	ldr	r3, [r3, #32]
 8000eba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ebe:	6213      	str	r3, [r2, #32]
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40021000 	.word	0x40021000

08000ed0 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000ed4:	4a05      	ldr	r2, [pc, #20]	; (8000eec <LL_RCC_ReleaseBackupDomainReset+0x1c>)
 8000ed6:	4b05      	ldr	r3, [pc, #20]	; (8000eec <LL_RCC_ReleaseBackupDomainReset+0x1c>)
 8000ed8:	6a1b      	ldr	r3, [r3, #32]
 8000eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ede:	6213      	str	r3, [r2, #32]
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	40021000 	.word	0x40021000

08000ef0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000ef4:	4a05      	ldr	r2, [pc, #20]	; (8000f0c <LL_RCC_PLL_Enable+0x1c>)
 8000ef6:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <LL_RCC_PLL_Enable+0x1c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000efe:	6013      	str	r3, [r2, #0]
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	40021000 	.word	0x40021000

08000f10 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000f14:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <LL_RCC_PLL_IsReady+0x24>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000f20:	bf0c      	ite	eq
 8000f22:	2301      	moveq	r3, #1
 8000f24:	2300      	movne	r3, #0
 8000f26:	b2db      	uxtb	r3, r3
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40021000 	.word	0x40021000

08000f38 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 8000f42:	480e      	ldr	r0, [pc, #56]	; (8000f7c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000f44:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	430b      	orrs	r3, r1
 8000f56:	4313      	orrs	r3, r2
 8000f58:	6043      	str	r3, [r0, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 8000f5a:	4908      	ldr	r1, [pc, #32]	; (8000f7c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000f5c:	4b07      	ldr	r3, [pc, #28]	; (8000f7c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f60:	f023 020f 	bic.w	r2, r3, #15
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f003 030f 	and.w	r3, r3, #15
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	40021000 	.word	0x40021000

08000f80 <LL_APB1_GRP1_EnableClock>:
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000f88:	4908      	ldr	r1, [pc, #32]	; (8000fac <LL_APB1_GRP1_EnableClock+0x2c>)
 8000f8a:	4b08      	ldr	r3, [pc, #32]	; (8000fac <LL_APB1_GRP1_EnableClock+0x2c>)
 8000f8c:	69da      	ldr	r2, [r3, #28]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <LL_APB1_GRP1_EnableClock+0x2c>)
 8000f96:	69da      	ldr	r2, [r3, #28]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
}
 8000fa0:	bf00      	nop
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	40021000 	.word	0x40021000

08000fb0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000fb8:	4908      	ldr	r1, [pc, #32]	; (8000fdc <LL_APB2_GRP1_EnableClock+0x2c>)
 8000fba:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <LL_APB2_GRP1_EnableClock+0x2c>)
 8000fbc:	699a      	ldr	r2, [r3, #24]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <LL_APB2_GRP1_EnableClock+0x2c>)
 8000fc6:	699a      	ldr	r2, [r3, #24]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fce:	68fb      	ldr	r3, [r7, #12]
}
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	40021000 	.word	0x40021000

08000fe0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000fe8:	4906      	ldr	r1, [pc, #24]	; (8001004 <LL_FLASH_SetLatency+0x24>)
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <LL_FLASH_SetLatency+0x24>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f023 0207 	bic.w	r2, r3, #7
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	600b      	str	r3, [r1, #0]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	40022000 	.word	0x40022000

08001008 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <LL_FLASH_GetLatency+0x18>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0307 	and.w	r3, r3, #7
}
 8001014:	4618      	mov	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	40022000 	.word	0x40022000

08001024 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR    DBP       LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8001028:	4a05      	ldr	r2, [pc, #20]	; (8001040 <LL_PWR_EnableBkUpAccess+0x1c>)
 800102a:	4b05      	ldr	r3, [pc, #20]	; (8001040 <LL_PWR_EnableBkUpAccess+0x1c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001032:	6013      	str	r3, [r2, #0]
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40007000 	.word	0x40007000

08001044 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001048:	2001      	movs	r0, #1
 800104a:	f7ff ffb1 	bl	8000fb0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800104e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001052:	f7ff ff95 	bl	8000f80 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001056:	2003      	movs	r0, #3
 8001058:	f7ff fd86 	bl	8000b68 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 800105c:	f7ff fda8 	bl	8000bb0 <__NVIC_GetPriorityGrouping>
 8001060:	4603      	mov	r3, r0
 8001062:	2200      	movs	r2, #0
 8001064:	210f      	movs	r1, #15
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fdda 	bl	8000c20 <NVIC_EncodePriority>
 800106c:	4603      	mov	r3, r0
 800106e:	4619      	mov	r1, r3
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f7ff fdaa 	bl	8000bcc <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001078:	f000 f814 	bl	80010a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800107c:	f7ff fb62 	bl	8000744 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TEMPSen_Init();
 8001080:	f001 fb15 	bl	80026ae <HAL_TEMPSen_Init>
  HAL_RTC_Init();
 8001084:	f001 fb0d 	bl	80026a2 <HAL_RTC_Init>
  //TEST fer
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_POT_Init();
 8001088:	f001 fa6e 	bl	8002568 <HAL_POT_Init>


  while (1)
  {

	  fsm();
 800108c:	f001 fa54 	bl	8002538 <fsm>
	  //prueba
	  POT1_Value=HAL_POT_Percentage(POT1_Channel);
 8001090:	2000      	movs	r0, #0
 8001092:	f001 fa8b 	bl	80025ac <HAL_POT_Percentage>
 8001096:	4603      	mov	r3, r0
 8001098:	b29a      	uxth	r2, r3
 800109a:	4b01      	ldr	r3, [pc, #4]	; (80010a0 <main+0x5c>)
 800109c:	801a      	strh	r2, [r3, #0]
	  fsm();
 800109e:	e7f5      	b.n	800108c <main+0x48>
 80010a0:	20000058 	.word	0x20000058

080010a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 80010a8:	2002      	movs	r0, #2
 80010aa:	f7ff ff99 	bl	8000fe0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 80010ae:	bf00      	nop
 80010b0:	f7ff ffaa 	bl	8001008 <LL_FLASH_GetLatency>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d1fa      	bne.n	80010b0 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 80010ba:	f7ff fde3 	bl	8000c84 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80010be:	bf00      	nop
 80010c0:	f7ff fdf0 	bl	8000ca4 <LL_RCC_HSI_IsReady>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d1fa      	bne.n	80010c0 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80010ca:	2010      	movs	r0, #16
 80010cc:	f7ff fdfc 	bl	8000cc8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_LSI_Enable();
 80010d0:	f7ff fe10 	bl	8000cf4 <LL_RCC_LSI_Enable>

   /* Wait till LSI is ready */
  while(LL_RCC_LSI_IsReady() != 1)
 80010d4:	bf00      	nop
 80010d6:	f7ff fe1d 	bl	8000d14 <LL_RCC_LSI_IsReady>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d1fa      	bne.n	80010d6 <SystemClock_Config+0x32>
  {

  }
  LL_PWR_EnableBkUpAccess();
 80010e0:	f7ff ffa0 	bl	8001024 <LL_PWR_EnableBkUpAccess>
  if(LL_RCC_GetRTCClockSource() != LL_RCC_RTC_CLKSOURCE_LSI)
 80010e4:	f7ff fec6 	bl	8000e74 <LL_RCC_GetRTCClockSource>
 80010e8:	4603      	mov	r3, r0
 80010ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010ee:	d007      	beq.n	8001100 <SystemClock_Config+0x5c>
  {
    LL_RCC_ForceBackupDomainReset();
 80010f0:	f7ff fede 	bl	8000eb0 <LL_RCC_ForceBackupDomainReset>
    LL_RCC_ReleaseBackupDomainReset();
 80010f4:	f7ff feec 	bl	8000ed0 <LL_RCC_ReleaseBackupDomainReset>
    LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSI);
 80010f8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010fc:	f7ff fea6 	bl	8000e4c <LL_RCC_SetRTCClockSource>
  }
  LL_RCC_EnableRTC();
 8001100:	f7ff fec6 	bl	8000e90 <LL_RCC_EnableRTC>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_16);
 8001104:	f44f 1160 	mov.w	r1, #3670016	; 0x380000
 8001108:	2000      	movs	r0, #0
 800110a:	f7ff ff15 	bl	8000f38 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800110e:	f7ff feef 	bl	8000ef0 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001112:	bf00      	nop
 8001114:	f7ff fefc 	bl	8000f10 <LL_RCC_PLL_IsReady>
 8001118:	4603      	mov	r3, r0
 800111a:	2b01      	cmp	r3, #1
 800111c:	d1fa      	bne.n	8001114 <SystemClock_Config+0x70>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800111e:	2000      	movs	r0, #0
 8001120:	f7ff fe2c 	bl	8000d7c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001124:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001128:	f7ff fe3c 	bl	8000da4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_16);
 800112c:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8001130:	f7ff fe4c 	bl	8000dcc <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001134:	2002      	movs	r0, #2
 8001136:	f7ff fdff 	bl	8000d38 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800113a:	bf00      	nop
 800113c:	f7ff fe10 	bl	8000d60 <LL_RCC_GetSysClkSource>
 8001140:	4603      	mov	r3, r0
 8001142:	2b08      	cmp	r3, #8
 8001144:	d1fa      	bne.n	800113c <SystemClock_Config+0x98>
  {

  }
  LL_Init1msTick(64000000);
 8001146:	4808      	ldr	r0, [pc, #32]	; (8001168 <SystemClock_Config+0xc4>)
 8001148:	f001 f81e 	bl	8002188 <LL_Init1msTick>
  LL_SetSystemCoreClock(64000000);
 800114c:	4806      	ldr	r0, [pc, #24]	; (8001168 <SystemClock_Config+0xc4>)
 800114e:	f001 f84d 	bl	80021ec <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8001152:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001156:	f7ff fe4d 	bl	8000df4 <LL_RCC_SetI2CClockSource>
  LL_RCC_SetADCClockSource(LL_RCC_ADC12_CLKSRC_PLL_DIV_1);
 800115a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800115e:	f7ff fe61 	bl	8000e24 <LL_RCC_SetADCClockSource>
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	03d09000 	.word	0x03d09000

0800116c <LL_RCC_EnableRTC>:
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001170:	4a05      	ldr	r2, [pc, #20]	; (8001188 <LL_RCC_EnableRTC+0x1c>)
 8001172:	4b05      	ldr	r3, [pc, #20]	; (8001188 <LL_RCC_EnableRTC+0x1c>)
 8001174:	6a1b      	ldr	r3, [r3, #32]
 8001176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800117a:	6213      	str	r3, [r2, #32]
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40021000 	.word	0x40021000

0800118c <LL_RTC_EnableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_EnableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableInitMode(RTC_TypeDef *RTCx)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* Set the Initialization mode */
  WRITE_REG(RTCx->ISR, RTC_INIT_MASK);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f04f 32ff 	mov.w	r2, #4294967295
 800119a:	60da      	str	r2, [r3, #12]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <LL_RTC_DisableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_DisableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableInitMode(RTC_TypeDef *RTCx)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Exit Initialization mode */
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80011b6:	60da      	str	r2, [r3, #12]
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <LL_RTC_SetAsynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  AsynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7F
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetAsynchPrescaler(RTC_TypeDef *RTCx, uint32_t AsynchPrescaler)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	041b      	lsls	r3, r3, #16
 80011da:	431a      	orrs	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	611a      	str	r2, [r3, #16]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <LL_RTC_SetSynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  SynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7FFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetSynchPrescaler(RTC_TypeDef *RTCx, uint32_t SynchPrescaler)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	691b      	ldr	r3, [r3, #16]
 80011fa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80011fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	431a      	orrs	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	611a      	str	r2, [r3, #16]
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	22ff      	movs	r2, #255	; 0xff
 8001222:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	22ca      	movs	r2, #202	; 0xca
 800123c:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2253      	movs	r2, #83	; 0x53
 8001242:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <LL_RTC_BAK_SetRegister>:
  *         (*) value not defined in all devices.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_BAK_SetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister, uint32_t Data)
{
 8001250:	b480      	push	{r7}
 8001252:	b087      	sub	sp, #28
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]

  tmp = (uint32_t)(&(RTCx->BKP0R));
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	3350      	adds	r3, #80	; 0x50
 8001264:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	4413      	add	r3, r2
 800126e:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	601a      	str	r2, [r3, #0]
}
 8001276:	bf00      	nop
 8001278:	371c      	adds	r7, #28
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <LL_RTC_BAK_GetRegister>:
  *
  *         (*) value not defined in all devices.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_BAK_GetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister)
{
 8001282:	b480      	push	{r7}
 8001284:	b085      	sub	sp, #20
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
 800128a:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800128c:	2300      	movs	r3, #0
 800128e:	60fb      	str	r3, [r7, #12]

  tmp = (uint32_t)(&(RTCx->BKP0R));
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3350      	adds	r3, #80	; 0x50
 8001294:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	4413      	add	r3, r2
 800129e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3714      	adds	r7, #20
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <LL_RTC_IsActiveFlag_INIT>:
  * @rmtoll ISR          INITF         LL_RTC_IsActiveFlag_INIT
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012c0:	2b40      	cmp	r3, #64	; 0x40
 80012c2:	bf0c      	ite	eq
 80012c4:	2301      	moveq	r3, #1
 80012c6:	2300      	movne	r3, #0
 80012c8:	b2db      	uxtb	r3, r3
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <LL_RTC_IsActiveFlag_RS>:
  * @rmtoll ISR          RSF           LL_RTC_IsActiveFlag_RS
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_RS(RTC_TypeDef *RTCx)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	f003 0320 	and.w	r3, r3, #32
 80012e6:	2b20      	cmp	r3, #32
 80012e8:	bf0c      	ite	eq
 80012ea:	2301      	moveq	r3, #1
 80012ec:	2300      	movne	r3, #0
 80012ee:	b2db      	uxtb	r3, r3
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <LL_RTC_ClearFlag_RS>:
  * @rmtoll ISR          RSF           LL_RTC_ClearFlag_RS
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_RS(RTC_TypeDef *RTCx)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800130c:	f063 02a0 	orn	r2, r3, #160	; 0xa0
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	60da      	str	r2, [r3, #12]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <MX_RTC_Init>:

/* USER CODE END 0 */

/* RTC init function */
void MX_RTC_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  LL_RTC_InitTypeDef RTC_InitStruct = {0};
 8001326:	f107 030c 	add.w	r3, r7, #12
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
  LL_RTC_TimeTypeDef RTC_TimeStruct = {0};
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
  LL_RTC_DateTypeDef RTC_DateStruct = {0};
 800133a:	2300      	movs	r3, #0
 800133c:	603b      	str	r3, [r7, #0]

  /* Peripheral clock enable */
  LL_RCC_EnableRTC();
 800133e:	f7ff ff15 	bl	800116c <LL_RCC_EnableRTC>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC and set the Time and Date
  */
  RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
  RTC_InitStruct.AsynchPrescaler = 127;
 8001346:	237f      	movs	r3, #127	; 0x7f
 8001348:	613b      	str	r3, [r7, #16]
  RTC_InitStruct.SynchPrescaler = 255;
 800134a:	23ff      	movs	r3, #255	; 0xff
 800134c:	617b      	str	r3, [r7, #20]
  LL_RTC_Init(RTC, &RTC_InitStruct);
 800134e:	f107 030c 	add.w	r3, r7, #12
 8001352:	4619      	mov	r1, r3
 8001354:	481f      	ldr	r0, [pc, #124]	; (80013d4 <MX_RTC_Init+0xb4>)
 8001356:	f000 fcfd 	bl	8001d54 <LL_RTC_Init>
  LL_RTC_SetAsynchPrescaler(RTC, 127);
 800135a:	217f      	movs	r1, #127	; 0x7f
 800135c:	481d      	ldr	r0, [pc, #116]	; (80013d4 <MX_RTC_Init+0xb4>)
 800135e:	f7ff ff31 	bl	80011c4 <LL_RTC_SetAsynchPrescaler>
  LL_RTC_SetSynchPrescaler(RTC, 255);
 8001362:	21ff      	movs	r1, #255	; 0xff
 8001364:	481b      	ldr	r0, [pc, #108]	; (80013d4 <MX_RTC_Init+0xb4>)
 8001366:	f7ff ff41 	bl	80011ec <LL_RTC_SetSynchPrescaler>
  /** Initialize RTC and set the Time and Date
  */
  if(LL_RTC_BAK_GetRegister(RTC, LL_RTC_BKP_DR0) != 0x32F2){
 800136a:	2100      	movs	r1, #0
 800136c:	4819      	ldr	r0, [pc, #100]	; (80013d4 <MX_RTC_Init+0xb4>)
 800136e:	f7ff ff88 	bl	8001282 <LL_RTC_BAK_GetRegister>
 8001372:	4602      	mov	r2, r0
 8001374:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8001378:	429a      	cmp	r2, r3
 800137a:	d01d      	beq.n	80013b8 <MX_RTC_Init+0x98>

  RTC_TimeStruct.Hours = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	723b      	strb	r3, [r7, #8]
  RTC_TimeStruct.Minutes = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	727b      	strb	r3, [r7, #9]
  RTC_TimeStruct.Seconds = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	72bb      	strb	r3, [r7, #10]
  LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_TimeStruct);
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	461a      	mov	r2, r3
 800138c:	2100      	movs	r1, #0
 800138e:	4811      	ldr	r0, [pc, #68]	; (80013d4 <MX_RTC_Init+0xb4>)
 8001390:	f000 fd10 	bl	8001db4 <LL_RTC_TIME_Init>
  RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_MONDAY;
 8001394:	2301      	movs	r3, #1
 8001396:	703b      	strb	r3, [r7, #0]
  RTC_DateStruct.Month = LL_RTC_MONTH_JANUARY;
 8001398:	2301      	movs	r3, #1
 800139a:	707b      	strb	r3, [r7, #1]
  RTC_DateStruct.Year = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	70fb      	strb	r3, [r7, #3]
  LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_DateStruct);
 80013a0:	463b      	mov	r3, r7
 80013a2:	461a      	mov	r2, r3
 80013a4:	2100      	movs	r1, #0
 80013a6:	480b      	ldr	r0, [pc, #44]	; (80013d4 <MX_RTC_Init+0xb4>)
 80013a8:	f000 fdaa 	bl	8001f00 <LL_RTC_DATE_Init>
    LL_RTC_BAK_SetRegister(RTC,LL_RTC_BKP_DR0,0x32F2);
 80013ac:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80013b0:	2100      	movs	r1, #0
 80013b2:	4808      	ldr	r0, [pc, #32]	; (80013d4 <MX_RTC_Init+0xb4>)
 80013b4:	f7ff ff4c 	bl	8001250 <LL_RTC_BAK_SetRegister>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  LL_RTC_DisableWriteProtection(RTC);
 80013b8:	4806      	ldr	r0, [pc, #24]	; (80013d4 <MX_RTC_Init+0xb4>)
 80013ba:	f7ff ff39 	bl	8001230 <LL_RTC_DisableWriteProtection>
  MX_RTC_Enter_InitMode();
 80013be:	f000 f80b 	bl	80013d8 <MX_RTC_Enter_InitMode>

  MX_RTC_Exit_InitMode();
 80013c2:	f000 f819 	bl	80013f8 <MX_RTC_Exit_InitMode>
  LL_RTC_EnableWriteProtection(RTC);
 80013c6:	4803      	ldr	r0, [pc, #12]	; (80013d4 <MX_RTC_Init+0xb4>)
 80013c8:	f7ff ff25 	bl	8001216 <LL_RTC_EnableWriteProtection>
  /* USER CODE END RTC_Init 2 */

}
 80013cc:	bf00      	nop
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40002800 	.word	0x40002800

080013d8 <MX_RTC_Enter_InitMode>:

/* USER CODE BEGIN 1 */

/*This functions is to start the RTC initialization mode*/
void MX_RTC_Enter_InitMode(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	LL_RTC_EnableInitMode(RTC);
 80013dc:	4805      	ldr	r0, [pc, #20]	; (80013f4 <MX_RTC_Enter_InitMode+0x1c>)
 80013de:	f7ff fed5 	bl	800118c <LL_RTC_EnableInitMode>
	while (!LL_RTC_IsActiveFlag_INIT(RTC));
 80013e2:	bf00      	nop
 80013e4:	4803      	ldr	r0, [pc, #12]	; (80013f4 <MX_RTC_Enter_InitMode+0x1c>)
 80013e6:	f7ff ff63 	bl	80012b0 <LL_RTC_IsActiveFlag_INIT>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0f9      	beq.n	80013e4 <MX_RTC_Enter_InitMode+0xc>

	return;
 80013f0:	bf00      	nop
}
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40002800 	.word	0x40002800

080013f8 <MX_RTC_Exit_InitMode>:

/*This functions is to finish the RTC initialization mode*/
void MX_RTC_Exit_InitMode (void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
	LL_RTC_DisableInitMode(RTC);
 80013fc:	4807      	ldr	r0, [pc, #28]	; (800141c <MX_RTC_Exit_InitMode+0x24>)
 80013fe:	f7ff fed3 	bl	80011a8 <LL_RTC_DisableInitMode>
	LL_RTC_ClearFlag_RS(RTC);
 8001402:	4806      	ldr	r0, [pc, #24]	; (800141c <MX_RTC_Exit_InitMode+0x24>)
 8001404:	f7ff ff7a 	bl	80012fc <LL_RTC_ClearFlag_RS>
	while (!LL_RTC_IsActiveFlag_RS(RTC));
 8001408:	bf00      	nop
 800140a:	4804      	ldr	r0, [pc, #16]	; (800141c <MX_RTC_Exit_InitMode+0x24>)
 800140c:	f7ff ff63 	bl	80012d6 <LL_RTC_IsActiveFlag_RS>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d0f9      	beq.n	800140a <MX_RTC_Exit_InitMode+0x12>
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40002800 	.word	0x40002800

08001420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001424:	e7fe      	b.n	8001424 <NMI_Handler+0x4>

08001426 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142a:	e7fe      	b.n	800142a <HardFault_Handler+0x4>

0800142c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001430:	e7fe      	b.n	8001430 <MemManage_Handler+0x4>

08001432 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001436:	e7fe      	b.n	8001436 <BusFault_Handler+0x4>

08001438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800143c:	e7fe      	b.n	800143c <UsageFault_Handler+0x4>

0800143e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800147c:	4a06      	ldr	r2, [pc, #24]	; (8001498 <SystemInit+0x20>)
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <SystemInit+0x20>)
 8001480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001484:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001488:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <LL_ADC_REG_SetSequencerLength>:
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f023 020f 	bic.w	r2, r3, #15
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	431a      	orrs	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <LL_ADC_IsEnabled>:
{
 80014c2:	b480      	push	{r7}
 80014c4:	b083      	sub	sp, #12
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	bf0c      	ite	eq
 80014d6:	2301      	moveq	r3, #1
 80014d8:	2300      	movne	r3, #0
 80014da:	b2db      	uxtb	r3, r3
}
 80014dc:	4618      	mov	r0, r3
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 80014e8:	b590      	push	{r4, r7, lr}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80014f2:	2300      	movs	r3, #0
 80014f4:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 80014f6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80014fa:	f7ff ffe2 	bl	80014c2 <LL_ADC_IsEnabled>
 80014fe:	4604      	mov	r4, r0
 8001500:	4817      	ldr	r0, [pc, #92]	; (8001560 <LL_ADC_CommonInit+0x78>)
 8001502:	f7ff ffde 	bl	80014c2 <LL_ADC_IsEnabled>
 8001506:	4603      	mov	r3, r0
 8001508:	4323      	orrs	r3, r4
 800150a:	2b00      	cmp	r3, #0
 800150c:	d120      	bne.n	8001550 <LL_ADC_CommonInit+0x68>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d012      	beq.n	800153c <LL_ADC_CommonInit+0x54>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	4b12      	ldr	r3, [pc, #72]	; (8001564 <LL_ADC_CommonInit+0x7c>)
 800151c:	4013      	ands	r3, r2
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	6811      	ldr	r1, [r2, #0]
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	6852      	ldr	r2, [r2, #4]
 8001526:	4311      	orrs	r1, r2
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	6892      	ldr	r2, [r2, #8]
 800152c:	4311      	orrs	r1, r2
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	68d2      	ldr	r2, [r2, #12]
 8001532:	430a      	orrs	r2, r1
 8001534:	431a      	orrs	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	e00b      	b.n	8001554 <LL_ADC_CommonInit+0x6c>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	4b08      	ldr	r3, [pc, #32]	; (8001564 <LL_ADC_CommonInit+0x7c>)
 8001542:	4013      	ands	r3, r2
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	6812      	ldr	r2, [r2, #0]
 8001548:	431a      	orrs	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	e001      	b.n	8001554 <LL_ADC_CommonInit+0x6c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8001554:	7bfb      	ldrb	r3, [r7, #15]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	bd90      	pop	{r4, r7, pc}
 800155e:	bf00      	nop
 8001560:	50000100 	.word	0x50000100
 8001564:	fffc30e0 	.word	0xfffc30e0

08001568 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001572:	2300      	movs	r3, #0
 8001574:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff ffa3 	bl	80014c2 <LL_ADC_IsEnabled>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d111      	bne.n	80015a6 <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800158a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	6811      	ldr	r1, [r2, #0]
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	6852      	ldr	r2, [r2, #4]
 8001596:	4311      	orrs	r1, r2
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	6892      	ldr	r2, [r2, #8]
 800159c:	430a      	orrs	r2, r1
 800159e:	431a      	orrs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	60da      	str	r2, [r3, #12]
 80015a4:	e001      	b.n	80015aa <LL_ADC_Init+0x42>
    
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80015be:	2300      	movs	r3, #0
 80015c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ff7d 	bl	80014c2 <LL_ADC_IsEnabled>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d132      	bne.n	8001634 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d015      	beq.n	8001602 <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	68da      	ldr	r2, [r3, #12]
 80015da:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <LL_ADC_REG_Init+0x90>)
 80015dc:	4013      	ands	r3, r2
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	6811      	ldr	r1, [r2, #0]
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	6892      	ldr	r2, [r2, #8]
 80015e6:	4311      	orrs	r1, r2
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	68d2      	ldr	r2, [r2, #12]
 80015ec:	4311      	orrs	r1, r2
 80015ee:	683a      	ldr	r2, [r7, #0]
 80015f0:	6912      	ldr	r2, [r2, #16]
 80015f2:	4311      	orrs	r1, r2
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	6952      	ldr	r2, [r2, #20]
 80015f8:	430a      	orrs	r2, r1
 80015fa:	431a      	orrs	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	60da      	str	r2, [r3, #12]
 8001600:	e011      	b.n	8001626 <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	68da      	ldr	r2, [r3, #12]
 8001606:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <LL_ADC_REG_Init+0x90>)
 8001608:	4013      	ands	r3, r2
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	6811      	ldr	r1, [r2, #0]
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	68d2      	ldr	r2, [r2, #12]
 8001612:	4311      	orrs	r1, r2
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	6912      	ldr	r2, [r2, #16]
 8001618:	4311      	orrs	r1, r2
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	6952      	ldr	r2, [r2, #20]
 800161e:	430a      	orrs	r2, r1
 8001620:	431a      	orrs	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }
    
    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	4619      	mov	r1, r3
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff ff35 	bl	800149c <LL_ADC_REG_SetSequencerLength>
 8001632:	e001      	b.n	8001638 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001638:	7bfb      	ldrb	r3, [r7, #15]
}
 800163a:	4618      	mov	r0, r3
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	fff0c03c 	.word	0xfff0c03c

08001648 <LL_GPIO_SetPinMode>:
{
 8001648:	b480      	push	{r7}
 800164a:	b089      	sub	sp, #36	; 0x24
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	fa93 f3a3 	rbit	r3, r3
 8001662:	613b      	str	r3, [r7, #16]
  return result;
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	fab3 f383 	clz	r3, r3
 800166a:	b2db      	uxtb	r3, r3
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	2103      	movs	r1, #3
 8001670:	fa01 f303 	lsl.w	r3, r1, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	401a      	ands	r2, r3
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	fa93 f3a3 	rbit	r3, r3
 8001682:	61bb      	str	r3, [r7, #24]
  return result;
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	fab3 f383 	clz	r3, r3
 800168a:	b2db      	uxtb	r3, r3
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	fa01 f303 	lsl.w	r3, r1, r3
 8001694:	431a      	orrs	r2, r3
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	601a      	str	r2, [r3, #0]
}
 800169a:	bf00      	nop
 800169c:	3724      	adds	r7, #36	; 0x24
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <LL_GPIO_SetPinOutputType>:
{
 80016a6:	b480      	push	{r7}
 80016a8:	b085      	sub	sp, #20
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	60f8      	str	r0, [r7, #12]
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	685a      	ldr	r2, [r3, #4]
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	43db      	mvns	r3, r3
 80016ba:	401a      	ands	r2, r3
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	fb01 f303 	mul.w	r3, r1, r3
 80016c4:	431a      	orrs	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	605a      	str	r2, [r3, #4]
}
 80016ca:	bf00      	nop
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <LL_GPIO_SetPinSpeed>:
{
 80016d6:	b480      	push	{r7}
 80016d8:	b089      	sub	sp, #36	; 0x24
 80016da:	af00      	add	r7, sp, #0
 80016dc:	60f8      	str	r0, [r7, #12]
 80016de:	60b9      	str	r1, [r7, #8]
 80016e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	fa93 f3a3 	rbit	r3, r3
 80016f0:	613b      	str	r3, [r7, #16]
  return result;
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	fab3 f383 	clz	r3, r3
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	2103      	movs	r1, #3
 80016fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001702:	43db      	mvns	r3, r3
 8001704:	401a      	ands	r2, r3
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	fa93 f3a3 	rbit	r3, r3
 8001710:	61bb      	str	r3, [r7, #24]
  return result;
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	fab3 f383 	clz	r3, r3
 8001718:	b2db      	uxtb	r3, r3
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	6879      	ldr	r1, [r7, #4]
 800171e:	fa01 f303 	lsl.w	r3, r1, r3
 8001722:	431a      	orrs	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	609a      	str	r2, [r3, #8]
}
 8001728:	bf00      	nop
 800172a:	3724      	adds	r7, #36	; 0x24
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <LL_GPIO_SetPinPull>:
{
 8001734:	b480      	push	{r7}
 8001736:	b089      	sub	sp, #36	; 0x24
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	68da      	ldr	r2, [r3, #12]
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	fa93 f3a3 	rbit	r3, r3
 800174e:	613b      	str	r3, [r7, #16]
  return result;
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	fab3 f383 	clz	r3, r3
 8001756:	b2db      	uxtb	r3, r3
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	2103      	movs	r1, #3
 800175c:	fa01 f303 	lsl.w	r3, r1, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	401a      	ands	r2, r3
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	fa93 f3a3 	rbit	r3, r3
 800176e:	61bb      	str	r3, [r7, #24]
  return result;
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	fab3 f383 	clz	r3, r3
 8001776:	b2db      	uxtb	r3, r3
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	fa01 f303 	lsl.w	r3, r1, r3
 8001780:	431a      	orrs	r2, r3
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	60da      	str	r2, [r3, #12]
}
 8001786:	bf00      	nop
 8001788:	3724      	adds	r7, #36	; 0x24
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <LL_GPIO_SetAFPin_0_7>:
{
 8001792:	b480      	push	{r7}
 8001794:	b089      	sub	sp, #36	; 0x24
 8001796:	af00      	add	r7, sp, #0
 8001798:	60f8      	str	r0, [r7, #12]
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6a1a      	ldr	r2, [r3, #32]
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	fa93 f3a3 	rbit	r3, r3
 80017ac:	613b      	str	r3, [r7, #16]
  return result;
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	fab3 f383 	clz	r3, r3
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	210f      	movs	r1, #15
 80017ba:	fa01 f303 	lsl.w	r3, r1, r3
 80017be:	43db      	mvns	r3, r3
 80017c0:	401a      	ands	r2, r3
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	fa93 f3a3 	rbit	r3, r3
 80017cc:	61bb      	str	r3, [r7, #24]
  return result;
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	fab3 f383 	clz	r3, r3
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	6879      	ldr	r1, [r7, #4]
 80017da:	fa01 f303 	lsl.w	r3, r1, r3
 80017de:	431a      	orrs	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	621a      	str	r2, [r3, #32]
}
 80017e4:	bf00      	nop
 80017e6:	3724      	adds	r7, #36	; 0x24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <LL_GPIO_SetAFPin_8_15>:
{
 80017f0:	b480      	push	{r7}
 80017f2:	b089      	sub	sp, #36	; 0x24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	0a1b      	lsrs	r3, r3, #8
 8001804:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	fa93 f3a3 	rbit	r3, r3
 800180c:	613b      	str	r3, [r7, #16]
  return result;
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	fab3 f383 	clz	r3, r3
 8001814:	b2db      	uxtb	r3, r3
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	210f      	movs	r1, #15
 800181a:	fa01 f303 	lsl.w	r3, r1, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	401a      	ands	r2, r3
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	fa93 f3a3 	rbit	r3, r3
 800182e:	61bb      	str	r3, [r7, #24]
  return result;
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	fab3 f383 	clz	r3, r3
 8001836:	b2db      	uxtb	r3, r3
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	fa01 f303 	lsl.w	r3, r1, r3
 8001840:	431a      	orrs	r2, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001846:	bf00      	nop
 8001848:	3724      	adds	r7, #36	; 0x24
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b088      	sub	sp, #32
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
 800185a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	fa93 f3a3 	rbit	r3, r3
 8001868:	613b      	str	r3, [r7, #16]
  return result;
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	fab3 f383 	clz	r3, r3
 8001870:	b2db      	uxtb	r3, r3
 8001872:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001874:	e051      	b.n	800191a <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	2101      	movs	r1, #1
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	fa01 f303 	lsl.w	r3, r1, r3
 8001882:	4013      	ands	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d043      	beq.n	8001914 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d003      	beq.n	800189c <LL_GPIO_Init+0x4a>
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b02      	cmp	r3, #2
 800189a:	d10e      	bne.n	80018ba <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	461a      	mov	r2, r3
 80018a2:	69b9      	ldr	r1, [r7, #24]
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff ff16 	bl	80016d6 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	6819      	ldr	r1, [r3, #0]
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	461a      	mov	r2, r3
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff fef6 	bl	80016a6 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	461a      	mov	r2, r3
 80018c0:	69b9      	ldr	r1, [r7, #24]
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff ff36 	bl	8001734 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d11a      	bne.n	8001906 <LL_GPIO_Init+0xb4>
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	fa93 f3a3 	rbit	r3, r3
 80018da:	60bb      	str	r3, [r7, #8]
  return result;
 80018dc:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80018de:	fab3 f383 	clz	r3, r3
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b07      	cmp	r3, #7
 80018e6:	d807      	bhi.n	80018f8 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	695b      	ldr	r3, [r3, #20]
 80018ec:	461a      	mov	r2, r3
 80018ee:	69b9      	ldr	r1, [r7, #24]
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff ff4e 	bl	8001792 <LL_GPIO_SetAFPin_0_7>
 80018f6:	e006      	b.n	8001906 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	461a      	mov	r2, r3
 80018fe:	69b9      	ldr	r1, [r7, #24]
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff ff75 	bl	80017f0 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	461a      	mov	r2, r3
 800190c:	69b9      	ldr	r1, [r7, #24]
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff fe9a 	bl	8001648 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	3301      	adds	r3, #1
 8001918:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	fa22 f303 	lsr.w	r3, r2, r3
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1a6      	bne.n	8001876 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3720      	adds	r7, #32
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <LL_I2C_Enable>:
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f043 0201 	orr.w	r2, r3, #1
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	601a      	str	r2, [r3, #0]
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <LL_I2C_Disable>:
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f023 0201 	bic.w	r2, r3, #1
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	601a      	str	r2, [r3, #0]
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <LL_I2C_ConfigFilters>:
{
 8001972:	b480      	push	{r7}
 8001974:	b085      	sub	sp, #20
 8001976:	af00      	add	r7, sp, #0
 8001978:	60f8      	str	r0, [r7, #12]
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	0219      	lsls	r1, r3, #8
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	430b      	orrs	r3, r1
 800198e:	431a      	orrs	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	601a      	str	r2, [r3, #0]
}
 8001994:	bf00      	nop
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <LL_I2C_SetOwnAddress1>:
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80019b4:	f023 0307 	bic.w	r3, r3, #7
 80019b8:	68b9      	ldr	r1, [r7, #8]
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	430a      	orrs	r2, r1
 80019be:	431a      	orrs	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	609a      	str	r2, [r3, #8]
}
 80019c4:	bf00      	nop
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <LL_I2C_EnableOwnAddress1>:
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	609a      	str	r2, [r3, #8]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <LL_I2C_DisableOwnAddress1>:
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	609a      	str	r2, [r3, #8]
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <LL_I2C_SetTiming>:
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	611a      	str	r2, [r3, #16]
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <LL_I2C_SetMode>:
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	431a      	orrs	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	601a      	str	r2, [r3, #0]
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
 8001a5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	431a      	orrs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	605a      	str	r2, [r3, #4]
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff ff65 	bl	8001952 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	6899      	ldr	r1, [r3, #8]
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	461a      	mov	r2, r3
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff ff6d 	bl	8001972 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff ffb6 	bl	8001a10 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff ff44 	bl	8001932 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff ffa0 	bl	80019f0 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	6919      	ldr	r1, [r3, #16]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff ff70 	bl	80019a0 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d002      	beq.n	8001ace <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff ff81 	bl	80019d0 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff ffa9 	bl	8001a2c <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	4619      	mov	r1, r3
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff ffb6 	bl	8001a52 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <LL_RTC_SetHourFormat>:
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	431a      	orrs	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	609a      	str	r2, [r3, #8]
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <LL_RTC_GetHourFormat>:
{
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_FMT));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <LL_RTC_EnableInitMode>:
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, RTC_INIT_MASK);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b40:	60da      	str	r2, [r3, #12]
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <LL_RTC_DisableInitMode>:
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b5c:	60da      	str	r2, [r3, #12]
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <LL_RTC_IsShadowRegBypassEnabled>:
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD));
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 0320 	and.w	r3, r3, #32
 8001b7a:	2b20      	cmp	r3, #32
 8001b7c:	bf0c      	ite	eq
 8001b7e:	2301      	moveq	r3, #1
 8001b80:	2300      	movne	r3, #0
 8001b82:	b2db      	uxtb	r3, r3
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <LL_RTC_SetAsynchPrescaler>:
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	041b      	lsls	r3, r3, #16
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	611a      	str	r2, [r3, #16]
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <LL_RTC_SetSynchPrescaler>:
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001bca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	611a      	str	r2, [r3, #16]
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <LL_RTC_EnableWriteProtection>:
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	22ff      	movs	r2, #255	; 0xff
 8001bee:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <LL_RTC_DisableWriteProtection>:
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	22ca      	movs	r2, #202	; 0xca
 8001c08:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2253      	movs	r2, #83	; 0x53
 8001c0e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_RTC_TIME_Config>:
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b087      	sub	sp, #28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
 8001c28:	603b      	str	r3, [r7, #0]
  uint32_t temp = 0U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	041b      	lsls	r3, r3, #16
 8001c32:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
  temp = Format12_24                                                                                    | \
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	431a      	orrs	r2, r3
         (((Minutes & 0xF0U) << (RTC_TR_MNT_Pos - 4U)) | ((Minutes & 0x0FU) << RTC_TR_MNU_Pos)) | \
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	021b      	lsls	r3, r3, #8
 8001c3e:	b29b      	uxth	r3, r3
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 8001c40:	431a      	orrs	r2, r3
         (((Seconds & 0xF0U) << (RTC_TR_ST_Pos - 4U)) | ((Seconds & 0x0FU) << RTC_TR_SU_Pos));
 8001c42:	6a3b      	ldr	r3, [r7, #32]
 8001c44:	b2db      	uxtb	r3, r3
  temp = Format12_24                                                                                    | \
 8001c46:	4313      	orrs	r3, r2
 8001c48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
 8001c52:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	601a      	str	r2, [r3, #0]
}
 8001c5e:	bf00      	nop
 8001c60:	371c      	adds	r7, #28
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
	...

08001c6c <LL_RTC_DATE_Config>:
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b087      	sub	sp, #28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
 8001c78:	603b      	str	r3, [r7, #0]
  uint32_t temp = 0U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	035a      	lsls	r2, r3, #13
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 8001c82:	6a3b      	ldr	r3, [r7, #32]
 8001c84:	041b      	lsls	r3, r3, #16
 8001c86:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8001c8a:	431a      	orrs	r2, r3
         (((Month & 0xF0U) << (RTC_DR_MT_Pos - 4U)) | ((Month & 0x0FU) << RTC_DR_MU_Pos)) | \
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	021b      	lsls	r3, r3, #8
 8001c90:	b29b      	uxth	r3, r3
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 8001c92:	431a      	orrs	r2, r3
         (((Day & 0xF0U) << (RTC_DR_DT_Pos - 4U)) | ((Day & 0x0FU) << RTC_DR_DU_Pos));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	b2db      	uxtb	r3, r3
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <LL_RTC_DATE_Config+0x4c>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	605a      	str	r2, [r3, #4]
}
 8001cac:	bf00      	nop
 8001cae:	371c      	adds	r7, #28
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	ff0000c0 	.word	0xff0000c0

08001cbc <LL_RTC_IsActiveFlag_INIT>:
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ccc:	2b40      	cmp	r3, #64	; 0x40
 8001cce:	bf0c      	ite	eq
 8001cd0:	2301      	moveq	r3, #1
 8001cd2:	2300      	movne	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <LL_RTC_IsActiveFlag_RS>:
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	f003 0320 	and.w	r3, r3, #32
 8001cf2:	2b20      	cmp	r3, #32
 8001cf4:	bf0c      	ite	eq
 8001cf6:	2301      	moveq	r3, #1
 8001cf8:	2300      	movne	r3, #0
 8001cfa:	b2db      	uxtb	r3, r3
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <LL_RTC_ClearFlag_RS>:
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d18:	f063 02a0 	orn	r2, r3, #160	; 0xa0
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	60da      	str	r2, [r3, #12]
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8001d30:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d3c:	bf0c      	ite	eq
 8001d3e:	2301      	moveq	r3, #1
 8001d40:	2300      	movne	r3, #0
 8001d42:	b2db      	uxtb	r3, r3
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	e000e010 	.word	0xe000e010

08001d54 <LL_RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized
  */
ErrorStatus LL_RTC_Init(RTC_TypeDef *RTCx, LL_RTC_InitTypeDef *RTC_InitStruct)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_RTC_HOURFORMAT(RTC_InitStruct->HourFormat));
  assert_param(IS_LL_RTC_ASYNCH_PREDIV(RTC_InitStruct->AsynchPrescaler));
  assert_param(IS_LL_RTC_SYNCH_PREDIV(RTC_InitStruct->SynchPrescaler));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7ff ff4a 	bl	8001bfc <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 f96d 	bl	8002048 <LL_RTC_EnterInitMode>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d016      	beq.n	8001da2 <LL_RTC_Init+0x4e>
  {
    /* Set Hour Format */
    LL_RTC_SetHourFormat(RTCx, RTC_InitStruct->HourFormat);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4619      	mov	r1, r3
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff feb8 	bl	8001af0 <LL_RTC_SetHourFormat>

    /* Configure Synchronous and Asynchronous prescaler factor */
    LL_RTC_SetSynchPrescaler(RTCx, RTC_InitStruct->SynchPrescaler);
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	4619      	mov	r1, r3
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff ff16 	bl	8001bb8 <LL_RTC_SetSynchPrescaler>
    LL_RTC_SetAsynchPrescaler(RTCx, RTC_InitStruct->AsynchPrescaler);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	4619      	mov	r1, r3
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff fefc 	bl	8001b90 <LL_RTC_SetAsynchPrescaler>

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff fed8 	bl	8001b4e <LL_RTC_DisableInitMode>

    status = SUCCESS;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff ff1d 	bl	8001be2 <LL_RTC_EnableWriteProtection>

  return status;
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
	...

08001db4 <LL_RTC_TIME_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus LL_RTC_TIME_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_TimeTypeDef *RTC_TimeStruct)
{
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	b089      	sub	sp, #36	; 0x24
 8001db8:	af02      	add	r7, sp, #8
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));

  if (RTC_Format == LL_RTC_FORMAT_BIN)
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d109      	bne.n	8001dde <LL_RTC_TIME_Init+0x2a>
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f7ff fea3 	bl	8001b16 <LL_RTC_GetHourFormat>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10c      	bne.n	8001df0 <LL_RTC_TIME_Init+0x3c>
      assert_param(IS_LL_RTC_HOUR12(RTC_TimeStruct->Hours));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_TimeStruct->TimeFormat));
    }
    else
    {
      RTC_TimeStruct->TimeFormat = 0x00U;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	e008      	b.n	8001df0 <LL_RTC_TIME_Init+0x3c>
    assert_param(IS_LL_RTC_MINUTES(RTC_TimeStruct->Minutes));
    assert_param(IS_LL_RTC_SECONDS(RTC_TimeStruct->Seconds));
  }
  else
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f7ff fe99 	bl	8001b16 <LL_RTC_GetHourFormat>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d102      	bne.n	8001df0 <LL_RTC_TIME_Init+0x3c>
      assert_param(IS_LL_RTC_HOUR12(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_TimeStruct->TimeFormat));
    }
    else
    {
      RTC_TimeStruct->TimeFormat = 0x00U;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
    assert_param(IS_LL_RTC_MINUTES(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Minutes)));
    assert_param(IS_LL_RTC_SECONDS(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Seconds)));
  }

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f7ff ff03 	bl	8001bfc <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8001df6:	68f8      	ldr	r0, [r7, #12]
 8001df8:	f000 f926 	bl	8002048 <LL_RTC_EnterInitMode>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d073      	beq.n	8001eea <LL_RTC_TIME_Init+0x136>
  {
    /* Check the input parameters format */
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d00f      	beq.n	8001e28 <LL_RTC_TIME_Init+0x74>
    {
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6819      	ldr	r1, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	791b      	ldrb	r3, [r3, #4]
 8001e10:	461a      	mov	r2, r3
                         RTC_TimeStruct->Minutes, RTC_TimeStruct->Seconds);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	795b      	ldrb	r3, [r3, #5]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8001e16:	4618      	mov	r0, r3
                         RTC_TimeStruct->Minutes, RTC_TimeStruct->Seconds);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	799b      	ldrb	r3, [r3, #6]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	4603      	mov	r3, r0
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f7ff fefb 	bl	8001c1c <LL_RTC_TIME_Config>
 8001e26:	e04f      	b.n	8001ec8 <LL_RTC_TIME_Init+0x114>
    }
    else
    {
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681c      	ldr	r4, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	791b      	ldrb	r3, [r3, #4]
 8001e30:	4a32      	ldr	r2, [pc, #200]	; (8001efc <LL_RTC_TIME_Init+0x148>)
 8001e32:	fba2 2303 	umull	r2, r3, r2, r3
 8001e36:	08db      	lsrs	r3, r3, #3
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	011b      	lsls	r3, r3, #4
 8001e3c:	b2d8      	uxtb	r0, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	791a      	ldrb	r2, [r3, #4]
 8001e42:	4b2e      	ldr	r3, [pc, #184]	; (8001efc <LL_RTC_TIME_Init+0x148>)
 8001e44:	fba3 1302 	umull	r1, r3, r3, r2
 8001e48:	08d9      	lsrs	r1, r3, #3
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	440b      	add	r3, r1
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	4303      	orrs	r3, r0
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	461d      	mov	r5, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Minutes),
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	795b      	ldrb	r3, [r3, #5]
 8001e60:	4a26      	ldr	r2, [pc, #152]	; (8001efc <LL_RTC_TIME_Init+0x148>)
 8001e62:	fba2 2303 	umull	r2, r3, r2, r3
 8001e66:	08db      	lsrs	r3, r3, #3
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	011b      	lsls	r3, r3, #4
 8001e6c:	b2d8      	uxtb	r0, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	795a      	ldrb	r2, [r3, #5]
 8001e72:	4b22      	ldr	r3, [pc, #136]	; (8001efc <LL_RTC_TIME_Init+0x148>)
 8001e74:	fba3 1302 	umull	r1, r3, r3, r2
 8001e78:	08d9      	lsrs	r1, r3, #3
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	440b      	add	r3, r1
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	4303      	orrs	r3, r0
 8001e88:	b2db      	uxtb	r3, r3
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8001e8a:	461e      	mov	r6, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Seconds));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	799b      	ldrb	r3, [r3, #6]
 8001e90:	4a1a      	ldr	r2, [pc, #104]	; (8001efc <LL_RTC_TIME_Init+0x148>)
 8001e92:	fba2 2303 	umull	r2, r3, r2, r3
 8001e96:	08db      	lsrs	r3, r3, #3
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	011b      	lsls	r3, r3, #4
 8001e9c:	b2d8      	uxtb	r0, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	799a      	ldrb	r2, [r3, #6]
 8001ea2:	4b16      	ldr	r3, [pc, #88]	; (8001efc <LL_RTC_TIME_Init+0x148>)
 8001ea4:	fba3 1302 	umull	r1, r3, r3, r2
 8001ea8:	08d9      	lsrs	r1, r3, #3
 8001eaa:	460b      	mov	r3, r1
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	440b      	add	r3, r1
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	4303      	orrs	r3, r0
 8001eb8:	b2db      	uxtb	r3, r3
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	4633      	mov	r3, r6
 8001ebe:	462a      	mov	r2, r5
 8001ec0:	4621      	mov	r1, r4
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f7ff feaa 	bl	8001c1c <LL_RTC_TIME_Config>
    }

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f7ff fe40 	bl	8001b4e <LL_RTC_DisableInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f7ff fe4b 	bl	8001b6a <LL_RTC_IsShadowRegBypassEnabled>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d105      	bne.n	8001ee6 <LL_RTC_TIME_Init+0x132>
    {
      status = LL_RTC_WaitForSynchro(RTCx);
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f000 f8e9 	bl	80020b2 <LL_RTC_WaitForSynchro>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	75fb      	strb	r3, [r7, #23]
 8001ee4:	e001      	b.n	8001eea <LL_RTC_TIME_Init+0x136>
    }
    else
    {
      status = SUCCESS;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	75fb      	strb	r3, [r7, #23]
    }
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f7ff fe79 	bl	8001be2 <LL_RTC_EnableWriteProtection>

  return status;
 8001ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	371c      	adds	r7, #28
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001efa:	bf00      	nop
 8001efc:	cccccccd 	.word	0xcccccccd

08001f00 <LL_RTC_DATE_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Day register is configured
  *          - ERROR: RTC Day register is not configured
  */
ErrorStatus LL_RTC_DATE_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_DateTypeDef *RTC_DateStruct)
{
 8001f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f02:	b089      	sub	sp, #36	; 0x24
 8001f04:	af02      	add	r7, sp, #8
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == LL_RTC_FORMAT_BIN) && ((RTC_DateStruct->Month & 0x10U) == 0x10U))
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10e      	bne.n	8001f34 <LL_RTC_DATE_Init+0x34>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	785b      	ldrb	r3, [r3, #1]
 8001f1a:	f003 0310 	and.w	r3, r3, #16
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d008      	beq.n	8001f34 <LL_RTC_DATE_Init+0x34>
  {
    RTC_DateStruct->Month = (RTC_DateStruct->Month & (uint32_t)~(0x10U)) + 0x0AU;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	785b      	ldrb	r3, [r3, #1]
 8001f26:	f023 0310 	bic.w	r3, r3, #16
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	330a      	adds	r3, #10
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	705a      	strb	r2, [r3, #1]
    assert_param(IS_LL_RTC_DAY(__LL_RTC_CONVERT_BCD2BIN(RTC_DateStruct->Day)));
  }
  assert_param(IS_LL_RTC_WEEKDAY(RTC_DateStruct->WeekDay));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f7ff fe61 	bl	8001bfc <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f000 f884 	bl	8002048 <LL_RTC_EnterInitMode>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d075      	beq.n	8002032 <LL_RTC_DATE_Init+0x132>
  {
    /* Check the input parameters format */
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d010      	beq.n	8001f6e <LL_RTC_DATE_Init+0x6e>
    {
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, RTC_DateStruct->Day, RTC_DateStruct->Month, RTC_DateStruct->Year);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	4619      	mov	r1, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	789b      	ldrb	r3, [r3, #2]
 8001f56:	461a      	mov	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	785b      	ldrb	r3, [r3, #1]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	78db      	ldrb	r3, [r3, #3]
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	4603      	mov	r3, r0
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f7ff fe80 	bl	8001c6c <LL_RTC_DATE_Config>
 8001f6c:	e050      	b.n	8002010 <LL_RTC_DATE_Init+0x110>
    }
    else
    {
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	461c      	mov	r4, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	789b      	ldrb	r3, [r3, #2]
 8001f78:	4a32      	ldr	r2, [pc, #200]	; (8002044 <LL_RTC_DATE_Init+0x144>)
 8001f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7e:	08db      	lsrs	r3, r3, #3
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	011b      	lsls	r3, r3, #4
 8001f84:	b2d8      	uxtb	r0, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	789a      	ldrb	r2, [r3, #2]
 8001f8a:	4b2e      	ldr	r3, [pc, #184]	; (8002044 <LL_RTC_DATE_Init+0x144>)
 8001f8c:	fba3 1302 	umull	r1, r3, r3, r2
 8001f90:	08d9      	lsrs	r1, r3, #3
 8001f92:	460b      	mov	r3, r1
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	440b      	add	r3, r1
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	4303      	orrs	r3, r0
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	461d      	mov	r5, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	785b      	ldrb	r3, [r3, #1]
 8001fa8:	4a26      	ldr	r2, [pc, #152]	; (8002044 <LL_RTC_DATE_Init+0x144>)
 8001faa:	fba2 2303 	umull	r2, r3, r2, r3
 8001fae:	08db      	lsrs	r3, r3, #3
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	011b      	lsls	r3, r3, #4
 8001fb4:	b2d8      	uxtb	r0, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	785a      	ldrb	r2, [r3, #1]
 8001fba:	4b22      	ldr	r3, [pc, #136]	; (8002044 <LL_RTC_DATE_Init+0x144>)
 8001fbc:	fba3 1302 	umull	r1, r3, r3, r2
 8001fc0:	08d9      	lsrs	r1, r3, #3
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	4303      	orrs	r3, r0
 8001fd0:	b2db      	uxtb	r3, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8001fd2:	461e      	mov	r6, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	78db      	ldrb	r3, [r3, #3]
 8001fd8:	4a1a      	ldr	r2, [pc, #104]	; (8002044 <LL_RTC_DATE_Init+0x144>)
 8001fda:	fba2 2303 	umull	r2, r3, r2, r3
 8001fde:	08db      	lsrs	r3, r3, #3
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	011b      	lsls	r3, r3, #4
 8001fe4:	b2d8      	uxtb	r0, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	78da      	ldrb	r2, [r3, #3]
 8001fea:	4b16      	ldr	r3, [pc, #88]	; (8002044 <LL_RTC_DATE_Init+0x144>)
 8001fec:	fba3 1302 	umull	r1, r3, r3, r2
 8001ff0:	08d9      	lsrs	r1, r3, #3
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	4303      	orrs	r3, r0
 8002000:	b2db      	uxtb	r3, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	4633      	mov	r3, r6
 8002006:	462a      	mov	r2, r5
 8002008:	4621      	mov	r1, r4
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f7ff fe2e 	bl	8001c6c <LL_RTC_DATE_Config>
    }

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f7ff fd9c 	bl	8001b4e <LL_RTC_DisableInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f7ff fda7 	bl	8001b6a <LL_RTC_IsShadowRegBypassEnabled>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d105      	bne.n	800202e <LL_RTC_DATE_Init+0x12e>
    {
      status = LL_RTC_WaitForSynchro(RTCx);
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f000 f845 	bl	80020b2 <LL_RTC_WaitForSynchro>
 8002028:	4603      	mov	r3, r0
 800202a:	75fb      	strb	r3, [r7, #23]
 800202c:	e001      	b.n	8002032 <LL_RTC_DATE_Init+0x132>
    }
    else
    {
      status = SUCCESS;
 800202e:	2300      	movs	r3, #0
 8002030:	75fb      	strb	r3, [r7, #23]
    }
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f7ff fdd5 	bl	8001be2 <LL_RTC_EnableWriteProtection>

  return status;
 8002038:	7dfb      	ldrb	r3, [r7, #23]
}
 800203a:	4618      	mov	r0, r3
 800203c:	371c      	adds	r7, #28
 800203e:	46bd      	mov	sp, r7
 8002040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002042:	bf00      	nop
 8002044:	cccccccd 	.word	0xcccccccd

08002048 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 8002050:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002054:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 8002056:	2300      	movs	r3, #0
 8002058:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff fe2c 	bl	8001cbc <LL_RTC_IsActiveFlag_INIT>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d11e      	bne.n	80020a8 <LL_RTC_EnterInitMode+0x60>
  {
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff fd61 	bl	8001b32 <LL_RTC_EnableInitMode>

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff fe23 	bl	8001cbc <LL_RTC_IsActiveFlag_INIT>
 8002076:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 8002078:	e010      	b.n	800209c <LL_RTC_EnterInitMode+0x54>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 800207a:	f7ff fe57 	bl	8001d2c <LL_SYSTICK_IsActiveCounterFlag>
 800207e:	4603      	mov	r3, r0
 8002080:	2b01      	cmp	r3, #1
 8002082:	d102      	bne.n	800208a <LL_RTC_EnterInitMode+0x42>
      {
        timeout --;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	3b01      	subs	r3, #1
 8002088:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff fe16 	bl	8001cbc <LL_RTC_IsActiveFlag_INIT>
 8002090:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <LL_RTC_EnterInitMode+0x54>
      {
        status = ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d002      	beq.n	80020a8 <LL_RTC_EnterInitMode+0x60>
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d1e8      	bne.n	800207a <LL_RTC_EnterInitMode+0x32>
      }
    }
  }
  return status;
 80020a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <LL_RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b086      	sub	sp, #24
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 80020ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020be:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 80020c0:	2300      	movs	r3, #0
 80020c2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTCx);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff fe1d 	bl	8001d08 <LL_RTC_ClearFlag_RS>

  /* Wait the registers to be synchronised */
  tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff fe07 	bl	8001ce2 <LL_RTC_IsActiveFlag_RS>
 80020d4:	6138      	str	r0, [r7, #16]
  while ((timeout != 0U) && (tmp != 0U))
 80020d6:	e010      	b.n	80020fa <LL_RTC_WaitForSynchro+0x48>
  {
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 80020d8:	f7ff fe28 	bl	8001d2c <LL_SYSTICK_IsActiveCounterFlag>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d102      	bne.n	80020e8 <LL_RTC_WaitForSynchro+0x36>
    {
      timeout--;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	3b01      	subs	r3, #1
 80020e6:	60fb      	str	r3, [r7, #12]
    }
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff fdfa 	bl	8001ce2 <LL_RTC_IsActiveFlag_RS>
 80020ee:	6138      	str	r0, [r7, #16]
    if (timeout == 0U)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <LL_RTC_WaitForSynchro+0x48>
    {
      status = ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	75fb      	strb	r3, [r7, #23]
  while ((timeout != 0U) && (tmp != 0U))
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d002      	beq.n	8002106 <LL_RTC_WaitForSynchro+0x54>
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1e8      	bne.n	80020d8 <LL_RTC_WaitForSynchro+0x26>
    }
  }

  if (status != ERROR)
 8002106:	7dfb      	ldrb	r3, [r7, #23]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d01e      	beq.n	800214a <LL_RTC_WaitForSynchro+0x98>
  {
    timeout = RTC_SYNCHRO_TIMEOUT;
 800210c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002110:	60fb      	str	r3, [r7, #12]
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff fde5 	bl	8001ce2 <LL_RTC_IsActiveFlag_RS>
 8002118:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 800211a:	e010      	b.n	800213e <LL_RTC_WaitForSynchro+0x8c>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 800211c:	f7ff fe06 	bl	8001d2c <LL_SYSTICK_IsActiveCounterFlag>
 8002120:	4603      	mov	r3, r0
 8002122:	2b01      	cmp	r3, #1
 8002124:	d102      	bne.n	800212c <LL_RTC_WaitForSynchro+0x7a>
      {
        timeout--;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	3b01      	subs	r3, #1
 800212a:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7ff fdd8 	bl	8001ce2 <LL_RTC_IsActiveFlag_RS>
 8002132:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <LL_RTC_WaitForSynchro+0x8c>
      {
        status = ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d002      	beq.n	800214a <LL_RTC_WaitForSynchro+0x98>
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d1e8      	bne.n	800211c <LL_RTC_WaitForSynchro+0x6a>
      }
    }
  }

  return (status);
 800214a:	7dfb      	ldrb	r3, [r7, #23]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800215e:	4909      	ldr	r1, [pc, #36]	; (8002184 <LL_InitTick+0x30>)
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	fbb2 f3f3 	udiv	r3, r2, r3
 8002168:	3b01      	subs	r3, #1
 800216a:	604b      	str	r3, [r1, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800216c:	4b05      	ldr	r3, [pc, #20]	; (8002184 <LL_InitTick+0x30>)
 800216e:	2200      	movs	r2, #0
 8002170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002172:	4b04      	ldr	r3, [pc, #16]	; (8002184 <LL_InitTick+0x30>)
 8002174:	2205      	movs	r2, #5
 8002176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000e010 	.word	0xe000e010

08002188 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002190:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff ffdd 	bl	8002154 <LL_InitTick>
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80021ac:	4b0e      	ldr	r3, [pc, #56]	; (80021e8 <LL_mDelay+0x44>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80021b2:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ba:	d00c      	beq.n	80021d6 <LL_mDelay+0x32>
  {
    Delay++;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3301      	adds	r3, #1
 80021c0:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80021c2:	e008      	b.n	80021d6 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80021c4:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <LL_mDelay+0x44>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d002      	beq.n	80021d6 <LL_mDelay+0x32>
    {
      Delay--;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	607b      	str	r3, [r7, #4]
  while (Delay)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1f3      	bne.n	80021c4 <LL_mDelay+0x20>
    }
  }
}
 80021dc:	bf00      	nop
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	e000e010 	.word	0xe000e010

080021ec <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80021f4:	4a04      	ldr	r2, [pc, #16]	; (8002208 <LL_SetSystemCoreClock+0x1c>)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6013      	str	r3, [r2, #0]
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	20000000 	.word	0x20000000

0800220c <EDO_0>:

// Estado inicial
Estados EA = E0;

// Funciones por estado
void EDO_0(int btnU, int btnD){
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
	// Codigo de estado inicio
	rgb_rojo();
 8002216:	f000 f9e9 	bl	80025ec <rgb_rojo>
	// Codigo de estado fin
	// Cambio de estado
	if(btnU == 1 && btnU != btnUa && btnD == 0)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d10d      	bne.n	800223c <EDO_0+0x30>
 8002220:	4b14      	ldr	r3, [pc, #80]	; (8002274 <EDO_0+0x68>)
 8002222:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002226:	461a      	mov	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	429a      	cmp	r2, r3
 800222c:	d006      	beq.n	800223c <EDO_0+0x30>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d103      	bne.n	800223c <EDO_0+0x30>
		EA = E1;
 8002234:	4b10      	ldr	r3, [pc, #64]	; (8002278 <EDO_0+0x6c>)
 8002236:	2201      	movs	r2, #1
 8002238:	701a      	strb	r2, [r3, #0]
 800223a:	e00f      	b.n	800225c <EDO_0+0x50>
	else if(btnD == 1 && btnD != btnDa && btnU == 0)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d10c      	bne.n	800225c <EDO_0+0x50>
 8002242:	4b0e      	ldr	r3, [pc, #56]	; (800227c <EDO_0+0x70>)
 8002244:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002248:	461a      	mov	r2, r3
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	429a      	cmp	r2, r3
 800224e:	d005      	beq.n	800225c <EDO_0+0x50>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d102      	bne.n	800225c <EDO_0+0x50>
		EA = E6;
 8002256:	4b08      	ldr	r3, [pc, #32]	; (8002278 <EDO_0+0x6c>)
 8002258:	2206      	movs	r2, #6
 800225a:	701a      	strb	r2, [r3, #0]
	btnUa = btnU;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	b21a      	sxth	r2, r3
 8002260:	4b04      	ldr	r3, [pc, #16]	; (8002274 <EDO_0+0x68>)
 8002262:	801a      	strh	r2, [r3, #0]
	btnDa = btnD;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	b21a      	sxth	r2, r3
 8002268:	4b04      	ldr	r3, [pc, #16]	; (800227c <EDO_0+0x70>)
 800226a:	801a      	strh	r2, [r3, #0]
}
 800226c:	bf00      	nop
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	20000060 	.word	0x20000060
 8002278:	2000005a 	.word	0x2000005a
 800227c:	2000005e 	.word	0x2000005e

08002280 <EDO_1>:

void EDO_1(int btnU, int btnD){
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
	// Codigo de estado inicio
	rgb_verde();
 800228a:	f000 f9bc 	bl	8002606 <rgb_verde>
	// Codigo de estado fin
	// Cambio de estado
	if(btnU == 1 && btnU != btnUa && btnD == 0)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d10d      	bne.n	80022b0 <EDO_1+0x30>
 8002294:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <EDO_1+0x68>)
 8002296:	f9b3 3000 	ldrsh.w	r3, [r3]
 800229a:	461a      	mov	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d006      	beq.n	80022b0 <EDO_1+0x30>
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d103      	bne.n	80022b0 <EDO_1+0x30>
		EA = E2;
 80022a8:	4b10      	ldr	r3, [pc, #64]	; (80022ec <EDO_1+0x6c>)
 80022aa:	2202      	movs	r2, #2
 80022ac:	701a      	strb	r2, [r3, #0]
 80022ae:	e00f      	b.n	80022d0 <EDO_1+0x50>
	else if(btnD == 1 && btnD != btnDa && btnU == 0)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d10c      	bne.n	80022d0 <EDO_1+0x50>
 80022b6:	4b0e      	ldr	r3, [pc, #56]	; (80022f0 <EDO_1+0x70>)
 80022b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022bc:	461a      	mov	r2, r3
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d005      	beq.n	80022d0 <EDO_1+0x50>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d102      	bne.n	80022d0 <EDO_1+0x50>
		EA = E0;
 80022ca:	4b08      	ldr	r3, [pc, #32]	; (80022ec <EDO_1+0x6c>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	701a      	strb	r2, [r3, #0]
	btnUa = btnU;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	b21a      	sxth	r2, r3
 80022d4:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <EDO_1+0x68>)
 80022d6:	801a      	strh	r2, [r3, #0]
	btnDa = btnD;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	b21a      	sxth	r2, r3
 80022dc:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <EDO_1+0x70>)
 80022de:	801a      	strh	r2, [r3, #0]
}
 80022e0:	bf00      	nop
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20000060 	.word	0x20000060
 80022ec:	2000005a 	.word	0x2000005a
 80022f0:	2000005e 	.word	0x2000005e

080022f4 <EDO_2>:

void EDO_2(int btnU, int btnD){
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
	// Codigo de estado inicio
	rgb_azul();
 80022fe:	f000 f98f 	bl	8002620 <rgb_azul>
	// Codigo de estado fin
	// Cambio de estado
	if(btnU == 1 && btnU != btnUa && btnD == 0)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d10d      	bne.n	8002324 <EDO_2+0x30>
 8002308:	4b14      	ldr	r3, [pc, #80]	; (800235c <EDO_2+0x68>)
 800230a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800230e:	461a      	mov	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	429a      	cmp	r2, r3
 8002314:	d006      	beq.n	8002324 <EDO_2+0x30>
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d103      	bne.n	8002324 <EDO_2+0x30>
		EA = E3;
 800231c:	4b10      	ldr	r3, [pc, #64]	; (8002360 <EDO_2+0x6c>)
 800231e:	2203      	movs	r2, #3
 8002320:	701a      	strb	r2, [r3, #0]
 8002322:	e00f      	b.n	8002344 <EDO_2+0x50>
	else if(btnD == 1 && btnD != btnDa && btnU == 0)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d10c      	bne.n	8002344 <EDO_2+0x50>
 800232a:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <EDO_2+0x70>)
 800232c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002330:	461a      	mov	r2, r3
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d005      	beq.n	8002344 <EDO_2+0x50>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d102      	bne.n	8002344 <EDO_2+0x50>
		EA = E1;
 800233e:	4b08      	ldr	r3, [pc, #32]	; (8002360 <EDO_2+0x6c>)
 8002340:	2201      	movs	r2, #1
 8002342:	701a      	strb	r2, [r3, #0]
	btnUa = btnU;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	b21a      	sxth	r2, r3
 8002348:	4b04      	ldr	r3, [pc, #16]	; (800235c <EDO_2+0x68>)
 800234a:	801a      	strh	r2, [r3, #0]
	btnDa = btnD;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	b21a      	sxth	r2, r3
 8002350:	4b04      	ldr	r3, [pc, #16]	; (8002364 <EDO_2+0x70>)
 8002352:	801a      	strh	r2, [r3, #0]
}
 8002354:	bf00      	nop
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20000060 	.word	0x20000060
 8002360:	2000005a 	.word	0x2000005a
 8002364:	2000005e 	.word	0x2000005e

08002368 <EDO_3>:

void EDO_3(int btnU, int btnD){
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
	// Codigo de estado inicio
	rgb_amarillo();
 8002372:	f000 f962 	bl	800263a <rgb_amarillo>
	// Codigo de estado fin
	// Cambio de estado
	if(btnU == 1 && btnU != btnUa && btnD == 0)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d10d      	bne.n	8002398 <EDO_3+0x30>
 800237c:	4b14      	ldr	r3, [pc, #80]	; (80023d0 <EDO_3+0x68>)
 800237e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002382:	461a      	mov	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	429a      	cmp	r2, r3
 8002388:	d006      	beq.n	8002398 <EDO_3+0x30>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d103      	bne.n	8002398 <EDO_3+0x30>
		EA = E4;
 8002390:	4b10      	ldr	r3, [pc, #64]	; (80023d4 <EDO_3+0x6c>)
 8002392:	2204      	movs	r2, #4
 8002394:	701a      	strb	r2, [r3, #0]
 8002396:	e00f      	b.n	80023b8 <EDO_3+0x50>
	else if(btnD == 1 && btnD != btnDa && btnU == 0)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d10c      	bne.n	80023b8 <EDO_3+0x50>
 800239e:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <EDO_3+0x70>)
 80023a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023a4:	461a      	mov	r2, r3
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d005      	beq.n	80023b8 <EDO_3+0x50>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d102      	bne.n	80023b8 <EDO_3+0x50>
		EA = E2;
 80023b2:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <EDO_3+0x6c>)
 80023b4:	2202      	movs	r2, #2
 80023b6:	701a      	strb	r2, [r3, #0]
	btnUa = btnU;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	b21a      	sxth	r2, r3
 80023bc:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <EDO_3+0x68>)
 80023be:	801a      	strh	r2, [r3, #0]
	btnDa = btnD;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	b21a      	sxth	r2, r3
 80023c4:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <EDO_3+0x70>)
 80023c6:	801a      	strh	r2, [r3, #0]
}
 80023c8:	bf00      	nop
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	20000060 	.word	0x20000060
 80023d4:	2000005a 	.word	0x2000005a
 80023d8:	2000005e 	.word	0x2000005e

080023dc <EDO_4>:

void EDO_4(int btnU, int btnD){
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
	// Codigo de estado inicio
	rgb_celeste();
 80023e6:	f000 f935 	bl	8002654 <rgb_celeste>
	// Codigo de estado fin
	// Cambio de estado
	if(btnU == 1 && btnU != btnUa && btnD == 0)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d10d      	bne.n	800240c <EDO_4+0x30>
 80023f0:	4b14      	ldr	r3, [pc, #80]	; (8002444 <EDO_4+0x68>)
 80023f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023f6:	461a      	mov	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d006      	beq.n	800240c <EDO_4+0x30>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d103      	bne.n	800240c <EDO_4+0x30>
		EA = E5;
 8002404:	4b10      	ldr	r3, [pc, #64]	; (8002448 <EDO_4+0x6c>)
 8002406:	2205      	movs	r2, #5
 8002408:	701a      	strb	r2, [r3, #0]
 800240a:	e00f      	b.n	800242c <EDO_4+0x50>
	else if(btnD == 1 && btnD != btnDa && btnU == 0)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d10c      	bne.n	800242c <EDO_4+0x50>
 8002412:	4b0e      	ldr	r3, [pc, #56]	; (800244c <EDO_4+0x70>)
 8002414:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002418:	461a      	mov	r2, r3
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	429a      	cmp	r2, r3
 800241e:	d005      	beq.n	800242c <EDO_4+0x50>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d102      	bne.n	800242c <EDO_4+0x50>
		EA = E3;
 8002426:	4b08      	ldr	r3, [pc, #32]	; (8002448 <EDO_4+0x6c>)
 8002428:	2203      	movs	r2, #3
 800242a:	701a      	strb	r2, [r3, #0]
	btnUa = btnU;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	b21a      	sxth	r2, r3
 8002430:	4b04      	ldr	r3, [pc, #16]	; (8002444 <EDO_4+0x68>)
 8002432:	801a      	strh	r2, [r3, #0]
	btnDa = btnD;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	b21a      	sxth	r2, r3
 8002438:	4b04      	ldr	r3, [pc, #16]	; (800244c <EDO_4+0x70>)
 800243a:	801a      	strh	r2, [r3, #0]
}
 800243c:	bf00      	nop
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	20000060 	.word	0x20000060
 8002448:	2000005a 	.word	0x2000005a
 800244c:	2000005e 	.word	0x2000005e

08002450 <EDO_5>:

void EDO_5(int btnU, int btnD){
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
	// Codigo de estado inicio
	rgb_morado();
 800245a:	f000 f908 	bl	800266e <rgb_morado>
	// Codigo de estado fin
	// Cambio de estado
	if(btnU == 1 && btnU != btnUa && btnD == 0)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d10d      	bne.n	8002480 <EDO_5+0x30>
 8002464:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <EDO_5+0x68>)
 8002466:	f9b3 3000 	ldrsh.w	r3, [r3]
 800246a:	461a      	mov	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	429a      	cmp	r2, r3
 8002470:	d006      	beq.n	8002480 <EDO_5+0x30>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d103      	bne.n	8002480 <EDO_5+0x30>
		EA = E6;
 8002478:	4b10      	ldr	r3, [pc, #64]	; (80024bc <EDO_5+0x6c>)
 800247a:	2206      	movs	r2, #6
 800247c:	701a      	strb	r2, [r3, #0]
 800247e:	e00f      	b.n	80024a0 <EDO_5+0x50>
	else if(btnD == 1 && btnD != btnDa && btnU == 0)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d10c      	bne.n	80024a0 <EDO_5+0x50>
 8002486:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <EDO_5+0x70>)
 8002488:	f9b3 3000 	ldrsh.w	r3, [r3]
 800248c:	461a      	mov	r2, r3
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	429a      	cmp	r2, r3
 8002492:	d005      	beq.n	80024a0 <EDO_5+0x50>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d102      	bne.n	80024a0 <EDO_5+0x50>
		EA = E4;
 800249a:	4b08      	ldr	r3, [pc, #32]	; (80024bc <EDO_5+0x6c>)
 800249c:	2204      	movs	r2, #4
 800249e:	701a      	strb	r2, [r3, #0]
	btnUa = btnU;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	b21a      	sxth	r2, r3
 80024a4:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <EDO_5+0x68>)
 80024a6:	801a      	strh	r2, [r3, #0]
	btnDa = btnD;
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	b21a      	sxth	r2, r3
 80024ac:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <EDO_5+0x70>)
 80024ae:	801a      	strh	r2, [r3, #0]
}
 80024b0:	bf00      	nop
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20000060 	.word	0x20000060
 80024bc:	2000005a 	.word	0x2000005a
 80024c0:	2000005e 	.word	0x2000005e

080024c4 <EDO_6>:

void EDO_6(int btnU, int btnD){
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
	// Codigo de estado inicio
	rgb_blanco();
 80024ce:	f000 f8db 	bl	8002688 <rgb_blanco>
	// Codigo de estado fin
	// Cambio de estado
	if(btnU == 1 && btnU != btnUa && btnD == 0)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d10d      	bne.n	80024f4 <EDO_6+0x30>
 80024d8:	4b14      	ldr	r3, [pc, #80]	; (800252c <EDO_6+0x68>)
 80024da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024de:	461a      	mov	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d006      	beq.n	80024f4 <EDO_6+0x30>
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d103      	bne.n	80024f4 <EDO_6+0x30>
		EA = E0;
 80024ec:	4b10      	ldr	r3, [pc, #64]	; (8002530 <EDO_6+0x6c>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	701a      	strb	r2, [r3, #0]
 80024f2:	e00f      	b.n	8002514 <EDO_6+0x50>
	else if(btnD == 1 && btnD != btnDa && btnU == 0)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d10c      	bne.n	8002514 <EDO_6+0x50>
 80024fa:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <EDO_6+0x70>)
 80024fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002500:	461a      	mov	r2, r3
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d005      	beq.n	8002514 <EDO_6+0x50>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d102      	bne.n	8002514 <EDO_6+0x50>
		EA = E5;
 800250e:	4b08      	ldr	r3, [pc, #32]	; (8002530 <EDO_6+0x6c>)
 8002510:	2205      	movs	r2, #5
 8002512:	701a      	strb	r2, [r3, #0]
	btnUa = btnU;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	b21a      	sxth	r2, r3
 8002518:	4b04      	ldr	r3, [pc, #16]	; (800252c <EDO_6+0x68>)
 800251a:	801a      	strh	r2, [r3, #0]
	btnDa = btnD;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	b21a      	sxth	r2, r3
 8002520:	4b04      	ldr	r3, [pc, #16]	; (8002534 <EDO_6+0x70>)
 8002522:	801a      	strh	r2, [r3, #0]
}
 8002524:	bf00      	nop
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	20000060 	.word	0x20000060
 8002530:	2000005a 	.word	0x2000005a
 8002534:	2000005e 	.word	0x2000005e

08002538 <fsm>:
		{E4,EDO_4},
		{E5,EDO_5},
		{E6,EDO_6}
};

void fsm(){
 8002538:	b5b0      	push	{r4, r5, r7, lr}
 800253a:	af00      	add	r7, sp, #0
	MDE[EA].func(MX_Joystick_Up(),MX_Joystick_Down());
 800253c:	4b08      	ldr	r3, [pc, #32]	; (8002560 <fsm+0x28>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	4a08      	ldr	r2, [pc, #32]	; (8002564 <fsm+0x2c>)
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	4413      	add	r3, r2
 8002546:	685c      	ldr	r4, [r3, #4]
 8002548:	f7fe f996 	bl	8000878 <MX_Joystick_Up>
 800254c:	4605      	mov	r5, r0
 800254e:	f7fe f9a3 	bl	8000898 <MX_Joystick_Down>
 8002552:	4603      	mov	r3, r0
 8002554:	4619      	mov	r1, r3
 8002556:	4628      	mov	r0, r5
 8002558:	47a0      	blx	r4
}
 800255a:	bf00      	nop
 800255c:	bdb0      	pop	{r4, r5, r7, pc}
 800255e:	bf00      	nop
 8002560:	2000005a 	.word	0x2000005a
 8002564:	20000004 	.word	0x20000004

08002568 <HAL_POT_Init>:
 */
#include "HAL_POT.h"

/*This function initialize the ADC*/
void HAL_POT_Init(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
	MX_ADC1_Init();
 800256c:	f7fd ff9c 	bl	80004a8 <MX_ADC1_Init>
	MX_ADC1_Calibration();
 8002570:	f7fe f846 	bl	8000600 <MX_ADC1_Calibration>
	MX_ADC1_Enable();
 8002574:	f7fe f834 	bl	80005e0 <MX_ADC1_Enable>
}
 8002578:	bf00      	nop
 800257a:	bd80      	pop	{r7, pc}

0800257c <HAL_POT_GetBinaryValue>:

/*This function returns the ADC value i an 8 bits format*/
uint16_t HAL_POT_GetBinaryValue (uint32_t Channel)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
	uint16_t POT_value = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	81fb      	strh	r3, [r7, #14]
	MX_ADC1_SetChannel(ADC_Channel_1);
 8002588:	2000      	movs	r0, #0
 800258a:	f7fe f84b 	bl	8000624 <MX_ADC1_SetChannel>
	MX_ADC1_StartConversion();
 800258e:	f7fe f86d 	bl	800066c <MX_ADC1_StartConversion>
	POT_value = MX_ADC1_GetValue();
 8002592:	f7fe f87f 	bl	8000694 <MX_ADC1_GetValue>
 8002596:	4603      	mov	r3, r0
 8002598:	81fb      	strh	r3, [r7, #14]
	LL_mDelay(10);
 800259a:	200a      	movs	r0, #10
 800259c:	f7ff fe02 	bl	80021a4 <LL_mDelay>

	return POT_value;
 80025a0:	89fb      	ldrh	r3, [r7, #14]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <HAL_POT_Percentage>:
	return POT_VoltageValue;
}

/*This function returns the value of the potentiometer as a percentage*/
uint8_t HAL_POT_Percentage (uint32_t Channel)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
	uint8_t POT_Percent = 0;
 80025b4:	2300      	movs	r3, #0
 80025b6:	73fb      	strb	r3, [r7, #15]
	uint16_t measure = 0;
 80025b8:	2300      	movs	r3, #0
 80025ba:	81bb      	strh	r3, [r7, #12]

	measure = HAL_POT_GetBinaryValue(Channel);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7ff ffdd 	bl	800257c <HAL_POT_GetBinaryValue>
 80025c2:	4603      	mov	r3, r0
 80025c4:	81bb      	strh	r3, [r7, #12]
	POT_Percent = (measure * 100)/POT_MAX_Count;
 80025c6:	89bb      	ldrh	r3, [r7, #12]
 80025c8:	2264      	movs	r2, #100	; 0x64
 80025ca:	fb02 f303 	mul.w	r3, r2, r3
 80025ce:	4a06      	ldr	r2, [pc, #24]	; (80025e8 <HAL_POT_Percentage+0x3c>)
 80025d0:	fb82 1203 	smull	r1, r2, r2, r3
 80025d4:	441a      	add	r2, r3
 80025d6:	11d2      	asrs	r2, r2, #7
 80025d8:	17db      	asrs	r3, r3, #31
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	73fb      	strb	r3, [r7, #15]

	return POT_Percent;
 80025de:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	80808081 	.word	0x80808081

080025ec <rgb_rojo>:
#include "HAL_RGB.h"
#include "gpio.h"

void rgb_rojo(){
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
	MX_RGB_Red(1);
 80025f0:	2001      	movs	r0, #1
 80025f2:	f7fe f963 	bl	80008bc <MX_RGB_Red>
	MX_RGB_Green(0);
 80025f6:	2000      	movs	r0, #0
 80025f8:	f7fe f97c 	bl	80008f4 <MX_RGB_Green>
	MX_RGB_Blue(0);
 80025fc:	2000      	movs	r0, #0
 80025fe:	f7fe f995 	bl	800092c <MX_RGB_Blue>
}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}

08002606 <rgb_verde>:
void rgb_verde(){
 8002606:	b580      	push	{r7, lr}
 8002608:	af00      	add	r7, sp, #0
	MX_RGB_Red(0);
 800260a:	2000      	movs	r0, #0
 800260c:	f7fe f956 	bl	80008bc <MX_RGB_Red>
	MX_RGB_Green(1);
 8002610:	2001      	movs	r0, #1
 8002612:	f7fe f96f 	bl	80008f4 <MX_RGB_Green>
	MX_RGB_Blue(0);
 8002616:	2000      	movs	r0, #0
 8002618:	f7fe f988 	bl	800092c <MX_RGB_Blue>
}
 800261c:	bf00      	nop
 800261e:	bd80      	pop	{r7, pc}

08002620 <rgb_azul>:
void rgb_azul(){
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
	MX_RGB_Red(0);
 8002624:	2000      	movs	r0, #0
 8002626:	f7fe f949 	bl	80008bc <MX_RGB_Red>
	MX_RGB_Green(0);
 800262a:	2000      	movs	r0, #0
 800262c:	f7fe f962 	bl	80008f4 <MX_RGB_Green>
	MX_RGB_Blue(1);
 8002630:	2001      	movs	r0, #1
 8002632:	f7fe f97b 	bl	800092c <MX_RGB_Blue>
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}

0800263a <rgb_amarillo>:
void rgb_amarillo(){
 800263a:	b580      	push	{r7, lr}
 800263c:	af00      	add	r7, sp, #0
	MX_RGB_Red(1);
 800263e:	2001      	movs	r0, #1
 8002640:	f7fe f93c 	bl	80008bc <MX_RGB_Red>
	MX_RGB_Green(1);
 8002644:	2001      	movs	r0, #1
 8002646:	f7fe f955 	bl	80008f4 <MX_RGB_Green>
	MX_RGB_Blue(0);
 800264a:	2000      	movs	r0, #0
 800264c:	f7fe f96e 	bl	800092c <MX_RGB_Blue>
}
 8002650:	bf00      	nop
 8002652:	bd80      	pop	{r7, pc}

08002654 <rgb_celeste>:
void rgb_celeste(){
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
	MX_RGB_Red(0);
 8002658:	2000      	movs	r0, #0
 800265a:	f7fe f92f 	bl	80008bc <MX_RGB_Red>
	MX_RGB_Green(1);
 800265e:	2001      	movs	r0, #1
 8002660:	f7fe f948 	bl	80008f4 <MX_RGB_Green>
	MX_RGB_Blue(1);
 8002664:	2001      	movs	r0, #1
 8002666:	f7fe f961 	bl	800092c <MX_RGB_Blue>
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}

0800266e <rgb_morado>:
void rgb_morado(){
 800266e:	b580      	push	{r7, lr}
 8002670:	af00      	add	r7, sp, #0
	MX_RGB_Red(1);
 8002672:	2001      	movs	r0, #1
 8002674:	f7fe f922 	bl	80008bc <MX_RGB_Red>
	MX_RGB_Green(0);
 8002678:	2000      	movs	r0, #0
 800267a:	f7fe f93b 	bl	80008f4 <MX_RGB_Green>
	MX_RGB_Blue(1);
 800267e:	2001      	movs	r0, #1
 8002680:	f7fe f954 	bl	800092c <MX_RGB_Blue>
}
 8002684:	bf00      	nop
 8002686:	bd80      	pop	{r7, pc}

08002688 <rgb_blanco>:
void rgb_blanco(){
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
	MX_RGB_Red(1);
 800268c:	2001      	movs	r0, #1
 800268e:	f7fe f915 	bl	80008bc <MX_RGB_Red>
	MX_RGB_Green(1);
 8002692:	2001      	movs	r0, #1
 8002694:	f7fe f92e 	bl	80008f4 <MX_RGB_Green>
	MX_RGB_Blue(1);
 8002698:	2001      	movs	r0, #1
 800269a:	f7fe f947 	bl	800092c <MX_RGB_Blue>
}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_RTC_Init>:
 */
#include "HAL_RTC.h"

/*This function initialize the RTC module*/
void HAL_RTC_Init(void)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	af00      	add	r7, sp, #0
	MX_RTC_Init();
 80026a6:	f7fe fe3b 	bl	8001320 <MX_RTC_Init>
	return;
 80026aa:	bf00      	nop
}
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_TEMPSen_Init>:
 *      Author: carlo
 */
#include "HAL_TEMPSen.h"

void HAL_TEMPSen_Init()
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	af00      	add	r7, sp, #0
	MX_I2C1_Init();
 80026b2:	f7fe f9f5 	bl	8000aa0 <MX_I2C1_Init>
	return;
 80026b6:	bf00      	nop
}
 80026b8:	bd80      	pop	{r7, pc}
	...

080026bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026f4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026c0:	480d      	ldr	r0, [pc, #52]	; (80026f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80026c2:	490e      	ldr	r1, [pc, #56]	; (80026fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80026c4:	4a0e      	ldr	r2, [pc, #56]	; (8002700 <LoopForever+0xe>)
  movs r3, #0
 80026c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026c8:	e002      	b.n	80026d0 <LoopCopyDataInit>

080026ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ce:	3304      	adds	r3, #4

080026d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026d4:	d3f9      	bcc.n	80026ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026d6:	4a0b      	ldr	r2, [pc, #44]	; (8002704 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026d8:	4c0b      	ldr	r4, [pc, #44]	; (8002708 <LoopForever+0x16>)
  movs r3, #0
 80026da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026dc:	e001      	b.n	80026e2 <LoopFillZerobss>

080026de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e0:	3204      	adds	r2, #4

080026e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026e4:	d3fb      	bcc.n	80026de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80026e6:	f7fe fec7 	bl	8001478 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026ea:	f000 f811 	bl	8002710 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026ee:	f7fe fca9 	bl	8001044 <main>

080026f2 <LoopForever>:

LoopForever:
    b LoopForever
 80026f2:	e7fe      	b.n	80026f2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026f4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80026f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026fc:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8002700:	08002788 	.word	0x08002788
  ldr r2, =_sbss
 8002704:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8002708:	20000064 	.word	0x20000064

0800270c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800270c:	e7fe      	b.n	800270c <ADC1_2_IRQHandler>
	...

08002710 <__libc_init_array>:
 8002710:	b570      	push	{r4, r5, r6, lr}
 8002712:	4e0d      	ldr	r6, [pc, #52]	; (8002748 <__libc_init_array+0x38>)
 8002714:	4c0d      	ldr	r4, [pc, #52]	; (800274c <__libc_init_array+0x3c>)
 8002716:	1ba4      	subs	r4, r4, r6
 8002718:	10a4      	asrs	r4, r4, #2
 800271a:	2500      	movs	r5, #0
 800271c:	42a5      	cmp	r5, r4
 800271e:	d109      	bne.n	8002734 <__libc_init_array+0x24>
 8002720:	4e0b      	ldr	r6, [pc, #44]	; (8002750 <__libc_init_array+0x40>)
 8002722:	4c0c      	ldr	r4, [pc, #48]	; (8002754 <__libc_init_array+0x44>)
 8002724:	f000 f818 	bl	8002758 <_init>
 8002728:	1ba4      	subs	r4, r4, r6
 800272a:	10a4      	asrs	r4, r4, #2
 800272c:	2500      	movs	r5, #0
 800272e:	42a5      	cmp	r5, r4
 8002730:	d105      	bne.n	800273e <__libc_init_array+0x2e>
 8002732:	bd70      	pop	{r4, r5, r6, pc}
 8002734:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002738:	4798      	blx	r3
 800273a:	3501      	adds	r5, #1
 800273c:	e7ee      	b.n	800271c <__libc_init_array+0xc>
 800273e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002742:	4798      	blx	r3
 8002744:	3501      	adds	r5, #1
 8002746:	e7f2      	b.n	800272e <__libc_init_array+0x1e>
 8002748:	08002780 	.word	0x08002780
 800274c:	08002780 	.word	0x08002780
 8002750:	08002780 	.word	0x08002780
 8002754:	08002784 	.word	0x08002784

08002758 <_init>:
 8002758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800275a:	bf00      	nop
 800275c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800275e:	bc08      	pop	{r3}
 8002760:	469e      	mov	lr, r3
 8002762:	4770      	bx	lr

08002764 <_fini>:
 8002764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002766:	bf00      	nop
 8002768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800276a:	bc08      	pop	{r3}
 800276c:	469e      	mov	lr, r3
 800276e:	4770      	bx	lr
