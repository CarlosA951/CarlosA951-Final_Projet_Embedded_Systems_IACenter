
Smart_Pillbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017e8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001970  08001970  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08001970  08001970  00011970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001974  08001974  00011974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          0000001c  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000080  20000020  20000020  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   00004dfe  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001259  00000000  00000000  00024e32  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000760  00000000  00000000  00026090  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000698  00000000  00000000  000267f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002af7  00000000  00000000  00026e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001bb7  00000000  00000000  0002997f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002b536  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001d74  00000000  00000000  0002b5b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001958 	.word	0x08001958

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001958 	.word	0x08001958

080001c8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80001d0:	4908      	ldr	r1, [pc, #32]	; (80001f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001d2:	4b08      	ldr	r3, [pc, #32]	; (80001f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001d4:	695a      	ldr	r2, [r3, #20]
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4313      	orrs	r3, r2
 80001da:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001de:	695a      	ldr	r2, [r3, #20]
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4013      	ands	r3, r2
 80001e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001e6:	68fb      	ldr	r3, [r7, #12]
}
 80001e8:	bf00      	nop
 80001ea:	3714      	adds	r7, #20
 80001ec:	46bd      	mov	sp, r7
 80001ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f2:	4770      	bx	lr
 80001f4:	40021000 	.word	0x40021000

080001f8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80001fc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000200:	f7ff ffe2 	bl	80001c8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000204:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000208:	f7ff ffde 	bl	80001c8 <LL_AHB1_GRP1_EnableClock>

}
 800020c:	bf00      	nop
 800020e:	bd80      	pop	{r7, pc}

08000210 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	601a      	str	r2, [r3, #0]
}
 8000224:	bf00      	nop
 8000226:	370c      	adds	r7, #12
 8000228:	46bd      	mov	sp, r7
 800022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022e:	4770      	bx	lr

08000230 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	601a      	str	r2, [r3, #0]
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr

08000250 <LL_I2C_SetMasterAddressingMode>:
  *         @arg @ref LL_I2C_ADDRESSING_MODE_7BIT
  *         @arg @ref LL_I2C_ADDRESSING_MODE_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMasterAddressingMode(I2C_TypeDef *I2Cx, uint32_t AddressingMode)
{
 8000250:	b480      	push	{r7}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
 8000258:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_ADD10, AddressingMode);
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	685b      	ldr	r3, [r3, #4]
 800025e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	431a      	orrs	r2, r3
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	605a      	str	r2, [r3, #4]
}
 800026a:	bf00      	nop
 800026c:	370c      	adds	r7, #12
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr

08000276 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8000276:	b480      	push	{r7}
 8000278:	b085      	sub	sp, #20
 800027a:	af00      	add	r7, sp, #0
 800027c:	60f8      	str	r0, [r7, #12]
 800027e:	60b9      	str	r1, [r7, #8]
 8000280:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	68db      	ldr	r3, [r3, #12]
 8000286:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800028a:	f023 0306 	bic.w	r3, r3, #6
 800028e:	68b9      	ldr	r1, [r7, #8]
 8000290:	687a      	ldr	r2, [r7, #4]
 8000292:	430a      	orrs	r2, r1
 8000294:	431a      	orrs	r2, r3
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	60da      	str	r2, [r3, #12]
}
 800029a:	bf00      	nop
 800029c:	3714      	adds	r7, #20
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr

080002a6 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80002a6:	b480      	push	{r7}
 80002a8:	b083      	sub	sp, #12
 80002aa:	af00      	add	r7, sp, #0
 80002ac:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	68db      	ldr	r3, [r3, #12]
 80002b2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	60da      	str	r2, [r3, #12]
}
 80002ba:	bf00      	nop
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr

080002c6 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 80002c6:	b480      	push	{r7}
 80002c8:	b083      	sub	sp, #12
 80002ca:	af00      	add	r7, sp, #0
 80002cc:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	685b      	ldr	r3, [r3, #4]
 80002d2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	605a      	str	r2, [r3, #4]
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
	...

080002e8 <LL_AHB1_GRP1_EnableClock>:
{
 80002e8:	b480      	push	{r7}
 80002ea:	b085      	sub	sp, #20
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80002f0:	4908      	ldr	r1, [pc, #32]	; (8000314 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002f2:	4b08      	ldr	r3, [pc, #32]	; (8000314 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002f4:	695a      	ldr	r2, [r3, #20]
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4313      	orrs	r3, r2
 80002fa:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80002fc:	4b05      	ldr	r3, [pc, #20]	; (8000314 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002fe:	695a      	ldr	r2, [r3, #20]
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	4013      	ands	r3, r2
 8000304:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000306:	68fb      	ldr	r3, [r7, #12]
}
 8000308:	bf00      	nop
 800030a:	3714      	adds	r7, #20
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr
 8000314:	40021000 	.word	0x40021000

08000318 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000318:	b480      	push	{r7}
 800031a:	b085      	sub	sp, #20
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000320:	4908      	ldr	r1, [pc, #32]	; (8000344 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000322:	4b08      	ldr	r3, [pc, #32]	; (8000344 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000324:	69da      	ldr	r2, [r3, #28]
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	4313      	orrs	r3, r2
 800032a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800032c:	4b05      	ldr	r3, [pc, #20]	; (8000344 <LL_APB1_GRP1_EnableClock+0x2c>)
 800032e:	69da      	ldr	r2, [r3, #28]
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	4013      	ands	r3, r2
 8000334:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000336:	68fb      	ldr	r3, [r7, #12]
}
 8000338:	bf00      	nop
 800033a:	3714      	adds	r7, #20
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr
 8000344:	40021000 	.word	0x40021000

08000348 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b08e      	sub	sp, #56	; 0x38
 800034c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800034e:	f107 031c 	add.w	r3, r7, #28
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	605a      	str	r2, [r3, #4]
 8000358:	609a      	str	r2, [r3, #8]
 800035a:	60da      	str	r2, [r3, #12]
 800035c:	611a      	str	r2, [r3, #16]
 800035e:	615a      	str	r2, [r3, #20]
 8000360:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	2200      	movs	r2, #0
 8000366:	601a      	str	r2, [r3, #0]
 8000368:	605a      	str	r2, [r3, #4]
 800036a:	609a      	str	r2, [r3, #8]
 800036c:	60da      	str	r2, [r3, #12]
 800036e:	611a      	str	r2, [r3, #16]
 8000370:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000372:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000376:	f7ff ffb7 	bl	80002e8 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 800037a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800037e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000380:	2302      	movs	r3, #2
 8000382:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000384:	2303      	movs	r3, #3
 8000386:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000388:	2301      	movs	r3, #1
 800038a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800038c:	2300      	movs	r3, #0
 800038e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000390:	2304      	movs	r3, #4
 8000392:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000394:	1d3b      	adds	r3, r7, #4
 8000396:	4619      	mov	r1, r3
 8000398:	481a      	ldr	r0, [pc, #104]	; (8000404 <MX_I2C1_Init+0xbc>)
 800039a:	f000 fdca 	bl	8000f32 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800039e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80003a2:	f7ff ffb9 	bl	8000318 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 80003a6:	4818      	ldr	r0, [pc, #96]	; (8000408 <MX_I2C1_Init+0xc0>)
 80003a8:	f7ff ff8d 	bl	80002c6 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 80003ac:	4816      	ldr	r0, [pc, #88]	; (8000408 <MX_I2C1_Init+0xc0>)
 80003ae:	f7ff ff7a 	bl	80002a6 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80003b2:	4815      	ldr	r0, [pc, #84]	; (8000408 <MX_I2C1_Init+0xc0>)
 80003b4:	f7ff ff3c 	bl	8000230 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80003b8:	4813      	ldr	r0, [pc, #76]	; (8000408 <MX_I2C1_Init+0xc0>)
 80003ba:	f7ff ff29 	bl	8000210 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80003be:	2300      	movs	r3, #0
 80003c0:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x00101D7C;
 80003c2:	4b12      	ldr	r3, [pc, #72]	; (800040c <MX_I2C1_Init+0xc4>)
 80003c4:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80003c6:	2300      	movs	r3, #0
 80003c8:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 80003ca:	2300      	movs	r3, #0
 80003cc:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 80003ce:	2300      	movs	r3, #0
 80003d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80003d2:	2300      	movs	r3, #0
 80003d4:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_10BIT;
 80003d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003da:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80003dc:	f107 031c 	add.w	r3, r7, #28
 80003e0:	4619      	mov	r1, r3
 80003e2:	4809      	ldr	r0, [pc, #36]	; (8000408 <MX_I2C1_Init+0xc0>)
 80003e4:	f000 feb8 	bl	8001158 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 80003e8:	2200      	movs	r2, #0
 80003ea:	2100      	movs	r1, #0
 80003ec:	4806      	ldr	r0, [pc, #24]	; (8000408 <MX_I2C1_Init+0xc0>)
 80003ee:	f7ff ff42 	bl	8000276 <LL_I2C_SetOwnAddress2>
  LL_I2C_SetMasterAddressingMode(I2C1, LL_I2C_ADDRESSING_MODE_10BIT);
 80003f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003f6:	4804      	ldr	r0, [pc, #16]	; (8000408 <MX_I2C1_Init+0xc0>)
 80003f8:	f7ff ff2a 	bl	8000250 <LL_I2C_SetMasterAddressingMode>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003fc:	bf00      	nop
 80003fe:	3738      	adds	r7, #56	; 0x38
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	48000400 	.word	0x48000400
 8000408:	40005400 	.word	0x40005400
 800040c:	00101d7c 	.word	0x00101d7c

08000410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000410:	b480      	push	{r7}
 8000412:	b085      	sub	sp, #20
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	f003 0307 	and.w	r3, r3, #7
 800041e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000420:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <__NVIC_SetPriorityGrouping+0x44>)
 8000422:	68db      	ldr	r3, [r3, #12]
 8000424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000426:	68ba      	ldr	r2, [r7, #8]
 8000428:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800042c:	4013      	ands	r3, r2
 800042e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000434:	68bb      	ldr	r3, [r7, #8]
 8000436:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000438:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800043c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000442:	4a04      	ldr	r2, [pc, #16]	; (8000454 <__NVIC_SetPriorityGrouping+0x44>)
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	60d3      	str	r3, [r2, #12]
}
 8000448:	bf00      	nop
 800044a:	3714      	adds	r7, #20
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr
 8000454:	e000ed00 	.word	0xe000ed00

08000458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800045c:	4b04      	ldr	r3, [pc, #16]	; (8000470 <__NVIC_GetPriorityGrouping+0x18>)
 800045e:	68db      	ldr	r3, [r3, #12]
 8000460:	0a1b      	lsrs	r3, r3, #8
 8000462:	f003 0307 	and.w	r3, r3, #7
}
 8000466:	4618      	mov	r0, r3
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr
 8000470:	e000ed00 	.word	0xe000ed00

08000474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	6039      	str	r1, [r7, #0]
 800047e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000484:	2b00      	cmp	r3, #0
 8000486:	db0a      	blt.n	800049e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000488:	490d      	ldr	r1, [pc, #52]	; (80004c0 <__NVIC_SetPriority+0x4c>)
 800048a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800048e:	683a      	ldr	r2, [r7, #0]
 8000490:	b2d2      	uxtb	r2, r2
 8000492:	0112      	lsls	r2, r2, #4
 8000494:	b2d2      	uxtb	r2, r2
 8000496:	440b      	add	r3, r1
 8000498:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800049c:	e00a      	b.n	80004b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800049e:	4909      	ldr	r1, [pc, #36]	; (80004c4 <__NVIC_SetPriority+0x50>)
 80004a0:	79fb      	ldrb	r3, [r7, #7]
 80004a2:	f003 030f 	and.w	r3, r3, #15
 80004a6:	3b04      	subs	r3, #4
 80004a8:	683a      	ldr	r2, [r7, #0]
 80004aa:	b2d2      	uxtb	r2, r2
 80004ac:	0112      	lsls	r2, r2, #4
 80004ae:	b2d2      	uxtb	r2, r2
 80004b0:	440b      	add	r3, r1
 80004b2:	761a      	strb	r2, [r3, #24]
}
 80004b4:	bf00      	nop
 80004b6:	370c      	adds	r7, #12
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr
 80004c0:	e000e100 	.word	0xe000e100
 80004c4:	e000ed00 	.word	0xe000ed00

080004c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b089      	sub	sp, #36	; 0x24
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	f003 0307 	and.w	r3, r3, #7
 80004da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80004dc:	69fb      	ldr	r3, [r7, #28]
 80004de:	f1c3 0307 	rsb	r3, r3, #7
 80004e2:	2b04      	cmp	r3, #4
 80004e4:	bf28      	it	cs
 80004e6:	2304      	movcs	r3, #4
 80004e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004ea:	69fb      	ldr	r3, [r7, #28]
 80004ec:	3304      	adds	r3, #4
 80004ee:	2b06      	cmp	r3, #6
 80004f0:	d902      	bls.n	80004f8 <NVIC_EncodePriority+0x30>
 80004f2:	69fb      	ldr	r3, [r7, #28]
 80004f4:	3b03      	subs	r3, #3
 80004f6:	e000      	b.n	80004fa <NVIC_EncodePriority+0x32>
 80004f8:	2300      	movs	r3, #0
 80004fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004fc:	2201      	movs	r2, #1
 80004fe:	69bb      	ldr	r3, [r7, #24]
 8000500:	fa02 f303 	lsl.w	r3, r2, r3
 8000504:	1e5a      	subs	r2, r3, #1
 8000506:	68bb      	ldr	r3, [r7, #8]
 8000508:	401a      	ands	r2, r3
 800050a:	697b      	ldr	r3, [r7, #20]
 800050c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800050e:	2101      	movs	r1, #1
 8000510:	697b      	ldr	r3, [r7, #20]
 8000512:	fa01 f303 	lsl.w	r3, r1, r3
 8000516:	1e59      	subs	r1, r3, #1
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800051c:	4313      	orrs	r3, r2
         );
}
 800051e:	4618      	mov	r0, r3
 8000520:	3724      	adds	r7, #36	; 0x24
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
	...

0800052c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000530:	4a05      	ldr	r2, [pc, #20]	; (8000548 <LL_RCC_HSI_Enable+0x1c>)
 8000532:	4b05      	ldr	r3, [pc, #20]	; (8000548 <LL_RCC_HSI_Enable+0x1c>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f043 0301 	orr.w	r3, r3, #1
 800053a:	6013      	str	r3, [r2, #0]
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	40021000 	.word	0x40021000

0800054c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000550:	4b06      	ldr	r3, [pc, #24]	; (800056c <LL_RCC_HSI_IsReady+0x20>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f003 0302 	and.w	r3, r3, #2
 8000558:	2b02      	cmp	r3, #2
 800055a:	bf0c      	ite	eq
 800055c:	2301      	moveq	r3, #1
 800055e:	2300      	movne	r3, #0
 8000560:	b2db      	uxtb	r3, r3
}
 8000562:	4618      	mov	r0, r3
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr
 800056c:	40021000 	.word	0x40021000

08000570 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000578:	4907      	ldr	r1, [pc, #28]	; (8000598 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800057a:	4b07      	ldr	r3, [pc, #28]	; (8000598 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	00db      	lsls	r3, r3, #3
 8000586:	4313      	orrs	r3, r2
 8000588:	600b      	str	r3, [r1, #0]
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	40021000 	.word	0x40021000

0800059c <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80005a0:	4a05      	ldr	r2, [pc, #20]	; (80005b8 <LL_RCC_LSI_Enable+0x1c>)
 80005a2:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <LL_RCC_LSI_Enable+0x1c>)
 80005a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005a6:	f043 0301 	orr.w	r3, r3, #1
 80005aa:	6253      	str	r3, [r2, #36]	; 0x24
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	40021000 	.word	0x40021000

080005bc <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY));
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <LL_RCC_LSI_IsReady+0x20>)
 80005c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005c4:	f003 0302 	and.w	r3, r3, #2
 80005c8:	2b02      	cmp	r3, #2
 80005ca:	bf0c      	ite	eq
 80005cc:	2301      	moveq	r3, #1
 80005ce:	2300      	movne	r3, #0
 80005d0:	b2db      	uxtb	r3, r3
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	40021000 	.word	0x40021000

080005e0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80005e8:	4906      	ldr	r1, [pc, #24]	; (8000604 <LL_RCC_SetSysClkSource+0x24>)
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <LL_RCC_SetSysClkSource+0x24>)
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	f023 0203 	bic.w	r2, r3, #3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4313      	orrs	r3, r2
 80005f6:	604b      	str	r3, [r1, #4]
}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	40021000 	.word	0x40021000

08000608 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800060c:	4b04      	ldr	r3, [pc, #16]	; (8000620 <LL_RCC_GetSysClkSource+0x18>)
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	f003 030c 	and.w	r3, r3, #12
}
 8000614:	4618      	mov	r0, r3
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	40021000 	.word	0x40021000

08000624 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800062c:	4906      	ldr	r1, [pc, #24]	; (8000648 <LL_RCC_SetAHBPrescaler+0x24>)
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <LL_RCC_SetAHBPrescaler+0x24>)
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4313      	orrs	r3, r2
 800063a:	604b      	str	r3, [r1, #4]
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	40021000 	.word	0x40021000

0800064c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000654:	4906      	ldr	r1, [pc, #24]	; (8000670 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4313      	orrs	r3, r2
 8000662:	604b      	str	r3, [r1, #4]
}
 8000664:	bf00      	nop
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	40021000 	.word	0x40021000

08000674 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800067c:	4906      	ldr	r1, [pc, #24]	; (8000698 <LL_RCC_SetAPB2Prescaler+0x24>)
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4313      	orrs	r3, r2
 800068a:	604b      	str	r3, [r1, #4]
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	40021000 	.word	0x40021000

0800069c <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 80006a4:	4908      	ldr	r1, [pc, #32]	; (80006c8 <LL_RCC_SetI2CClockSource+0x2c>)
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <LL_RCC_SetI2CClockSource+0x2c>)
 80006a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	0e1b      	lsrs	r3, r3, #24
 80006ae:	43db      	mvns	r3, r3
 80006b0:	401a      	ands	r2, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80006b8:	4313      	orrs	r3, r2
 80006ba:	630b      	str	r3, [r1, #48]	; 0x30
}
 80006bc:	bf00      	nop
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	40021000 	.word	0x40021000

080006cc <LL_RCC_SetADCClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
#if defined(RCC_CFGR2_ADCPRE34)
  MODIFY_REG(RCC->CFGR2, (ADCxSource >> 16U), (ADCxSource & 0x0000FFFFU));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_ADCPRE12, ADCxSource);
 80006d4:	4906      	ldr	r1, [pc, #24]	; (80006f0 <LL_RCC_SetADCClockSource+0x24>)
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <LL_RCC_SetADCClockSource+0x24>)
 80006d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006da:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4313      	orrs	r3, r2
 80006e2:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_ADCPRE34 */
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	40021000 	.word	0x40021000

080006f4 <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80006fc:	4906      	ldr	r1, [pc, #24]	; (8000718 <LL_RCC_SetRTCClockSource+0x24>)
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <LL_RCC_SetRTCClockSource+0x24>)
 8000700:	6a1b      	ldr	r3, [r3, #32]
 8000702:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4313      	orrs	r3, r2
 800070a:	620b      	str	r3, [r1, #32]
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	40021000 	.word	0x40021000

0800071c <LL_RCC_GetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSE
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  */
__STATIC_INLINE uint32_t LL_RCC_GetRTCClockSource(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8000720:	4b04      	ldr	r3, [pc, #16]	; (8000734 <LL_RCC_GetRTCClockSource+0x18>)
 8000722:	6a1b      	ldr	r3, [r3, #32]
 8000724:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8000728:	4618      	mov	r0, r3
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	40021000 	.word	0x40021000

08000738 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800073c:	4a05      	ldr	r2, [pc, #20]	; (8000754 <LL_RCC_EnableRTC+0x1c>)
 800073e:	4b05      	ldr	r3, [pc, #20]	; (8000754 <LL_RCC_EnableRTC+0x1c>)
 8000740:	6a1b      	ldr	r3, [r3, #32]
 8000742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000746:	6213      	str	r3, [r2, #32]
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	40021000 	.word	0x40021000

08000758 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800075c:	4a05      	ldr	r2, [pc, #20]	; (8000774 <LL_RCC_ForceBackupDomainReset+0x1c>)
 800075e:	4b05      	ldr	r3, [pc, #20]	; (8000774 <LL_RCC_ForceBackupDomainReset+0x1c>)
 8000760:	6a1b      	ldr	r3, [r3, #32]
 8000762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000766:	6213      	str	r3, [r2, #32]
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	40021000 	.word	0x40021000

08000778 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800077c:	4a05      	ldr	r2, [pc, #20]	; (8000794 <LL_RCC_ReleaseBackupDomainReset+0x1c>)
 800077e:	4b05      	ldr	r3, [pc, #20]	; (8000794 <LL_RCC_ReleaseBackupDomainReset+0x1c>)
 8000780:	6a1b      	ldr	r3, [r3, #32]
 8000782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000786:	6213      	str	r3, [r2, #32]
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	40021000 	.word	0x40021000

08000798 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800079c:	4a05      	ldr	r2, [pc, #20]	; (80007b4 <LL_RCC_PLL_Enable+0x1c>)
 800079e:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <LL_RCC_PLL_Enable+0x1c>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007a6:	6013      	str	r3, [r2, #0]
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40021000 	.word	0x40021000

080007b8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <LL_RCC_PLL_IsReady+0x24>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80007c8:	bf0c      	ite	eq
 80007ca:	2301      	moveq	r3, #1
 80007cc:	2300      	movne	r3, #0
 80007ce:	b2db      	uxtb	r3, r3
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	40021000 	.word	0x40021000

080007e0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 80007ea:	480e      	ldr	r0, [pc, #56]	; (8000824 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80007ec:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	430b      	orrs	r3, r1
 80007fe:	4313      	orrs	r3, r2
 8000800:	6043      	str	r3, [r0, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 8000802:	4908      	ldr	r1, [pc, #32]	; (8000824 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000804:	4b07      	ldr	r3, [pc, #28]	; (8000824 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000808:	f023 020f 	bic.w	r2, r3, #15
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f003 030f 	and.w	r3, r3, #15
 8000812:	4313      	orrs	r3, r2
 8000814:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40021000 	.word	0x40021000

08000828 <LL_APB1_GRP1_EnableClock>:
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000830:	4908      	ldr	r1, [pc, #32]	; (8000854 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000834:	69da      	ldr	r2, [r3, #28]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4313      	orrs	r3, r2
 800083a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <LL_APB1_GRP1_EnableClock+0x2c>)
 800083e:	69da      	ldr	r2, [r3, #28]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4013      	ands	r3, r2
 8000844:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000846:	68fb      	ldr	r3, [r7, #12]
}
 8000848:	bf00      	nop
 800084a:	3714      	adds	r7, #20
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	40021000 	.word	0x40021000

08000858 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000860:	4908      	ldr	r1, [pc, #32]	; (8000884 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000864:	699a      	ldr	r2, [r3, #24]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4313      	orrs	r3, r2
 800086a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <LL_APB2_GRP1_EnableClock+0x2c>)
 800086e:	699a      	ldr	r2, [r3, #24]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4013      	ands	r3, r2
 8000874:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000876:	68fb      	ldr	r3, [r7, #12]
}
 8000878:	bf00      	nop
 800087a:	3714      	adds	r7, #20
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	40021000 	.word	0x40021000

08000888 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000890:	4906      	ldr	r1, [pc, #24]	; (80008ac <LL_FLASH_SetLatency+0x24>)
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <LL_FLASH_SetLatency+0x24>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f023 0207 	bic.w	r2, r3, #7
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4313      	orrs	r3, r2
 800089e:	600b      	str	r3, [r1, #0]
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	40022000 	.word	0x40022000

080008b0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80008b4:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <LL_FLASH_GetLatency+0x18>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f003 0307 	and.w	r3, r3, #7
}
 80008bc:	4618      	mov	r0, r3
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	40022000 	.word	0x40022000

080008cc <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR    DBP       LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80008d0:	4a05      	ldr	r2, [pc, #20]	; (80008e8 <LL_PWR_EnableBkUpAccess+0x1c>)
 80008d2:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <LL_PWR_EnableBkUpAccess+0x1c>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008da:	6013      	str	r3, [r2, #0]
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40007000 	.word	0x40007000

080008ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80008f0:	2001      	movs	r0, #1
 80008f2:	f7ff ffb1 	bl	8000858 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80008f6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80008fa:	f7ff ff95 	bl	8000828 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008fe:	2003      	movs	r0, #3
 8000900:	f7ff fd86 	bl	8000410 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8000904:	f7ff fda8 	bl	8000458 <__NVIC_GetPriorityGrouping>
 8000908:	4603      	mov	r3, r0
 800090a:	2200      	movs	r2, #0
 800090c:	210f      	movs	r1, #15
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fdda 	bl	80004c8 <NVIC_EncodePriority>
 8000914:	4603      	mov	r3, r0
 8000916:	4619      	mov	r1, r3
 8000918:	f04f 30ff 	mov.w	r0, #4294967295
 800091c:	f7ff fdaa 	bl	8000474 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000920:	f000 f808 	bl	8000934 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000924:	f7ff fc68 	bl	80001f8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TEMPSen_Init();
 8000928:	f000 ffc2 	bl	80018b0 <HAL_TEMPSen_Init>
  HAL_RTC_Init();
 800092c:	f000 ffba 	bl	80018a4 <HAL_RTC_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000930:	e7fe      	b.n	8000930 <main+0x44>
	...

08000934 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000938:	2002      	movs	r0, #2
 800093a:	f7ff ffa5 	bl	8000888 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 800093e:	bf00      	nop
 8000940:	f7ff ffb6 	bl	80008b0 <LL_FLASH_GetLatency>
 8000944:	4603      	mov	r3, r0
 8000946:	2b02      	cmp	r3, #2
 8000948:	d1fa      	bne.n	8000940 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 800094a:	f7ff fdef 	bl	800052c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800094e:	bf00      	nop
 8000950:	f7ff fdfc 	bl	800054c <LL_RCC_HSI_IsReady>
 8000954:	4603      	mov	r3, r0
 8000956:	2b01      	cmp	r3, #1
 8000958:	d1fa      	bne.n	8000950 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800095a:	2010      	movs	r0, #16
 800095c:	f7ff fe08 	bl	8000570 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_LSI_Enable();
 8000960:	f7ff fe1c 	bl	800059c <LL_RCC_LSI_Enable>

   /* Wait till LSI is ready */
  while(LL_RCC_LSI_IsReady() != 1)
 8000964:	bf00      	nop
 8000966:	f7ff fe29 	bl	80005bc <LL_RCC_LSI_IsReady>
 800096a:	4603      	mov	r3, r0
 800096c:	2b01      	cmp	r3, #1
 800096e:	d1fa      	bne.n	8000966 <SystemClock_Config+0x32>
  {

  }
  LL_PWR_EnableBkUpAccess();
 8000970:	f7ff ffac 	bl	80008cc <LL_PWR_EnableBkUpAccess>
  if(LL_RCC_GetRTCClockSource() != LL_RCC_RTC_CLKSOURCE_LSI)
 8000974:	f7ff fed2 	bl	800071c <LL_RCC_GetRTCClockSource>
 8000978:	4603      	mov	r3, r0
 800097a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800097e:	d007      	beq.n	8000990 <SystemClock_Config+0x5c>
  {
    LL_RCC_ForceBackupDomainReset();
 8000980:	f7ff feea 	bl	8000758 <LL_RCC_ForceBackupDomainReset>
    LL_RCC_ReleaseBackupDomainReset();
 8000984:	f7ff fef8 	bl	8000778 <LL_RCC_ReleaseBackupDomainReset>
    LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSI);
 8000988:	f44f 7000 	mov.w	r0, #512	; 0x200
 800098c:	f7ff feb2 	bl	80006f4 <LL_RCC_SetRTCClockSource>
  }
  LL_RCC_EnableRTC();
 8000990:	f7ff fed2 	bl	8000738 <LL_RCC_EnableRTC>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_16);
 8000994:	f44f 1160 	mov.w	r1, #3670016	; 0x380000
 8000998:	2000      	movs	r0, #0
 800099a:	f7ff ff21 	bl	80007e0 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800099e:	f7ff fefb 	bl	8000798 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80009a2:	bf00      	nop
 80009a4:	f7ff ff08 	bl	80007b8 <LL_RCC_PLL_IsReady>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d1fa      	bne.n	80009a4 <SystemClock_Config+0x70>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80009ae:	2000      	movs	r0, #0
 80009b0:	f7ff fe38 	bl	8000624 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80009b4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80009b8:	f7ff fe48 	bl	800064c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80009bc:	2000      	movs	r0, #0
 80009be:	f7ff fe59 	bl	8000674 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80009c2:	2002      	movs	r0, #2
 80009c4:	f7ff fe0c 	bl	80005e0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80009c8:	bf00      	nop
 80009ca:	f7ff fe1d 	bl	8000608 <LL_RCC_GetSysClkSource>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b08      	cmp	r3, #8
 80009d2:	d1fa      	bne.n	80009ca <SystemClock_Config+0x96>
  {

  }
  LL_Init1msTick(64000000);
 80009d4:	4807      	ldr	r0, [pc, #28]	; (80009f4 <SystemClock_Config+0xc0>)
 80009d6:	f000 ff47 	bl	8001868 <LL_Init1msTick>
  LL_SetSystemCoreClock(64000000);
 80009da:	4806      	ldr	r0, [pc, #24]	; (80009f4 <SystemClock_Config+0xc0>)
 80009dc:	f000 ff52 	bl	8001884 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 80009e0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80009e4:	f7ff fe5a 	bl	800069c <LL_RCC_SetI2CClockSource>
  LL_RCC_SetADCClockSource(LL_RCC_ADC12_CLKSRC_PLL_DIV_1);
 80009e8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80009ec:	f7ff fe6e 	bl	80006cc <LL_RCC_SetADCClockSource>
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	03d09000 	.word	0x03d09000

080009f8 <LL_RCC_EnableRTC>:
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80009fc:	4a05      	ldr	r2, [pc, #20]	; (8000a14 <LL_RCC_EnableRTC+0x1c>)
 80009fe:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <LL_RCC_EnableRTC+0x1c>)
 8000a00:	6a1b      	ldr	r3, [r3, #32]
 8000a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a06:	6213      	str	r3, [r2, #32]
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40021000 	.word	0x40021000

08000a18 <LL_RTC_EnableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_EnableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableInitMode(RTC_TypeDef *RTCx)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* Set the Initialization mode */
  WRITE_REG(RTCx->ISR, RTC_INIT_MASK);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f04f 32ff 	mov.w	r2, #4294967295
 8000a26:	60da      	str	r2, [r3, #12]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <LL_RTC_DisableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_DisableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableInitMode(RTC_TypeDef *RTCx)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* Exit Initialization mode */
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000a42:	60da      	str	r2, [r3, #12]
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <LL_RTC_SetAsynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  AsynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7F
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetAsynchPrescaler(RTC_TypeDef *RTCx, uint32_t AsynchPrescaler)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	691b      	ldr	r3, [r3, #16]
 8000a5e:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	041b      	lsls	r3, r3, #16
 8000a66:	431a      	orrs	r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	611a      	str	r2, [r3, #16]
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <LL_RTC_SetSynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  SynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7FFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetSynchPrescaler(RTC_TypeDef *RTCx, uint32_t SynchPrescaler)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	691b      	ldr	r3, [r3, #16]
 8000a86:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000a8a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000a8e:	683a      	ldr	r2, [r7, #0]
 8000a90:	431a      	orrs	r2, r3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	611a      	str	r2, [r3, #16]
}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	b083      	sub	sp, #12
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	22ff      	movs	r2, #255	; 0xff
 8000aae:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	22ca      	movs	r2, #202	; 0xca
 8000ac8:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2253      	movs	r2, #83	; 0x53
 8000ace:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <LL_RTC_BAK_SetRegister>:
  *         (*) value not defined in all devices.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_BAK_SetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister, uint32_t Data)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b087      	sub	sp, #28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]

  tmp = (uint32_t)(&(RTCx->BKP0R));
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	3350      	adds	r3, #80	; 0x50
 8000af0:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	697a      	ldr	r2, [r7, #20]
 8000af8:	4413      	add	r3, r2
 8000afa:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	601a      	str	r2, [r3, #0]
}
 8000b02:	bf00      	nop
 8000b04:	371c      	adds	r7, #28
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <LL_RTC_BAK_GetRegister>:
  *
  *         (*) value not defined in all devices.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_BAK_GetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	b085      	sub	sp, #20
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
 8000b16:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]

  tmp = (uint32_t)(&(RTCx->BKP0R));
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3350      	adds	r3, #80	; 0x50
 8000b20:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	4413      	add	r3, r2
 8000b2a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	681b      	ldr	r3, [r3, #0]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <LL_RTC_IsActiveFlag_INIT>:
  * @rmtoll ISR          INITF         LL_RTC_IsActiveFlag_INIT
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b4c:	2b40      	cmp	r3, #64	; 0x40
 8000b4e:	bf0c      	ite	eq
 8000b50:	2301      	moveq	r3, #1
 8000b52:	2300      	movne	r3, #0
 8000b54:	b2db      	uxtb	r3, r3
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <LL_RTC_IsActiveFlag_RS>:
  * @rmtoll ISR          RSF           LL_RTC_IsActiveFlag_RS
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_RS(RTC_TypeDef *RTCx)
{
 8000b62:	b480      	push	{r7}
 8000b64:	b083      	sub	sp, #12
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	68db      	ldr	r3, [r3, #12]
 8000b6e:	f003 0320 	and.w	r3, r3, #32
 8000b72:	2b20      	cmp	r3, #32
 8000b74:	bf0c      	ite	eq
 8000b76:	2301      	moveq	r3, #1
 8000b78:	2300      	movne	r3, #0
 8000b7a:	b2db      	uxtb	r3, r3
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <LL_RTC_ClearFlag_RS>:
  * @rmtoll ISR          RSF           LL_RTC_ClearFlag_RS
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_RS(RTC_TypeDef *RTCx)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b98:	f063 02a0 	orn	r2, r3, #160	; 0xa0
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	60da      	str	r2, [r3, #12]
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <MX_RTC_Init>:

/* USER CODE END 0 */

/* RTC init function */
void MX_RTC_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  LL_RTC_InitTypeDef RTC_InitStruct = {0};
 8000bb2:	f107 030c 	add.w	r3, r7, #12
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
  LL_RTC_TimeTypeDef RTC_TimeStruct = {0};
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
  LL_RTC_DateTypeDef RTC_DateStruct = {0};
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	603b      	str	r3, [r7, #0]

  /* Peripheral clock enable */
  LL_RCC_EnableRTC();
 8000bca:	f7ff ff15 	bl	80009f8 <LL_RCC_EnableRTC>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC and set the Time and Date
  */
  RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
  RTC_InitStruct.AsynchPrescaler = 127;
 8000bd2:	237f      	movs	r3, #127	; 0x7f
 8000bd4:	613b      	str	r3, [r7, #16]
  RTC_InitStruct.SynchPrescaler = 255;
 8000bd6:	23ff      	movs	r3, #255	; 0xff
 8000bd8:	617b      	str	r3, [r7, #20]
  LL_RTC_Init(RTC, &RTC_InitStruct);
 8000bda:	f107 030c 	add.w	r3, r7, #12
 8000bde:	4619      	mov	r1, r3
 8000be0:	481f      	ldr	r0, [pc, #124]	; (8000c60 <MX_RTC_Init+0xb4>)
 8000be2:	f000 fc27 	bl	8001434 <LL_RTC_Init>
  LL_RTC_SetAsynchPrescaler(RTC, 127);
 8000be6:	217f      	movs	r1, #127	; 0x7f
 8000be8:	481d      	ldr	r0, [pc, #116]	; (8000c60 <MX_RTC_Init+0xb4>)
 8000bea:	f7ff ff31 	bl	8000a50 <LL_RTC_SetAsynchPrescaler>
  LL_RTC_SetSynchPrescaler(RTC, 255);
 8000bee:	21ff      	movs	r1, #255	; 0xff
 8000bf0:	481b      	ldr	r0, [pc, #108]	; (8000c60 <MX_RTC_Init+0xb4>)
 8000bf2:	f7ff ff41 	bl	8000a78 <LL_RTC_SetSynchPrescaler>
  /** Initialize RTC and set the Time and Date
  */
  if(LL_RTC_BAK_GetRegister(RTC, LL_RTC_BKP_DR0) != 0x32F2){
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4819      	ldr	r0, [pc, #100]	; (8000c60 <MX_RTC_Init+0xb4>)
 8000bfa:	f7ff ff88 	bl	8000b0e <LL_RTC_BAK_GetRegister>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d01d      	beq.n	8000c44 <MX_RTC_Init+0x98>

  RTC_TimeStruct.Hours = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	723b      	strb	r3, [r7, #8]
  RTC_TimeStruct.Minutes = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	727b      	strb	r3, [r7, #9]
  RTC_TimeStruct.Seconds = 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	72bb      	strb	r3, [r7, #10]
  LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_TimeStruct);
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	461a      	mov	r2, r3
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4811      	ldr	r0, [pc, #68]	; (8000c60 <MX_RTC_Init+0xb4>)
 8000c1c:	f000 fc3a 	bl	8001494 <LL_RTC_TIME_Init>
  RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_MONDAY;
 8000c20:	2301      	movs	r3, #1
 8000c22:	703b      	strb	r3, [r7, #0]
  RTC_DateStruct.Month = LL_RTC_MONTH_JANUARY;
 8000c24:	2301      	movs	r3, #1
 8000c26:	707b      	strb	r3, [r7, #1]
  RTC_DateStruct.Year = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	70fb      	strb	r3, [r7, #3]
  LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_DateStruct);
 8000c2c:	463b      	mov	r3, r7
 8000c2e:	461a      	mov	r2, r3
 8000c30:	2100      	movs	r1, #0
 8000c32:	480b      	ldr	r0, [pc, #44]	; (8000c60 <MX_RTC_Init+0xb4>)
 8000c34:	f000 fcd4 	bl	80015e0 <LL_RTC_DATE_Init>
    LL_RTC_BAK_SetRegister(RTC,LL_RTC_BKP_DR0,0x32F2);
 8000c38:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4808      	ldr	r0, [pc, #32]	; (8000c60 <MX_RTC_Init+0xb4>)
 8000c40:	f7ff ff4c 	bl	8000adc <LL_RTC_BAK_SetRegister>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  LL_RTC_DisableWriteProtection(RTC);
 8000c44:	4806      	ldr	r0, [pc, #24]	; (8000c60 <MX_RTC_Init+0xb4>)
 8000c46:	f7ff ff39 	bl	8000abc <LL_RTC_DisableWriteProtection>
  MX_RTC_Enter_InitMode();
 8000c4a:	f000 f80b 	bl	8000c64 <MX_RTC_Enter_InitMode>

  MX_RTC_Exit_InitMode();
 8000c4e:	f000 f819 	bl	8000c84 <MX_RTC_Exit_InitMode>
  LL_RTC_EnableWriteProtection(RTC);
 8000c52:	4803      	ldr	r0, [pc, #12]	; (8000c60 <MX_RTC_Init+0xb4>)
 8000c54:	f7ff ff25 	bl	8000aa2 <LL_RTC_EnableWriteProtection>
  /* USER CODE END RTC_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	3718      	adds	r7, #24
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40002800 	.word	0x40002800

08000c64 <MX_RTC_Enter_InitMode>:

/* USER CODE BEGIN 1 */

/*This functions is to start the RTC initialization mode*/
void MX_RTC_Enter_InitMode(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	LL_RTC_EnableInitMode(RTC);
 8000c68:	4805      	ldr	r0, [pc, #20]	; (8000c80 <MX_RTC_Enter_InitMode+0x1c>)
 8000c6a:	f7ff fed5 	bl	8000a18 <LL_RTC_EnableInitMode>
	while (!LL_RTC_IsActiveFlag_INIT(RTC));
 8000c6e:	bf00      	nop
 8000c70:	4803      	ldr	r0, [pc, #12]	; (8000c80 <MX_RTC_Enter_InitMode+0x1c>)
 8000c72:	f7ff ff63 	bl	8000b3c <LL_RTC_IsActiveFlag_INIT>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d0f9      	beq.n	8000c70 <MX_RTC_Enter_InitMode+0xc>

	return;
 8000c7c:	bf00      	nop
}
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40002800 	.word	0x40002800

08000c84 <MX_RTC_Exit_InitMode>:

/*This functions is to finish the RTC initialization mode*/
void MX_RTC_Exit_InitMode (void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
	LL_RTC_DisableInitMode(RTC);
 8000c88:	4807      	ldr	r0, [pc, #28]	; (8000ca8 <MX_RTC_Exit_InitMode+0x24>)
 8000c8a:	f7ff fed3 	bl	8000a34 <LL_RTC_DisableInitMode>
	LL_RTC_ClearFlag_RS(RTC);
 8000c8e:	4806      	ldr	r0, [pc, #24]	; (8000ca8 <MX_RTC_Exit_InitMode+0x24>)
 8000c90:	f7ff ff7a 	bl	8000b88 <LL_RTC_ClearFlag_RS>
	while (!LL_RTC_IsActiveFlag_RS(RTC));
 8000c94:	bf00      	nop
 8000c96:	4804      	ldr	r0, [pc, #16]	; (8000ca8 <MX_RTC_Exit_InitMode+0x24>)
 8000c98:	f7ff ff63 	bl	8000b62 <LL_RTC_IsActiveFlag_RS>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d0f9      	beq.n	8000c96 <MX_RTC_Exit_InitMode+0x12>
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40002800 	.word	0x40002800

08000cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <NMI_Handler+0x4>

08000cb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <HardFault_Handler+0x4>

08000cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <MemManage_Handler+0x4>

08000cbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <BusFault_Handler+0x4>

08000cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <UsageFault_Handler+0x4>

08000cca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
	...

08000d04 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d08:	4a06      	ldr	r2, [pc, #24]	; (8000d24 <SystemInit+0x20>)
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <SystemInit+0x20>)
 8000d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b089      	sub	sp, #36	; 0x24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	fa93 f3a3 	rbit	r3, r3
 8000d42:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	fab3 f383 	clz	r3, r3
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	2103      	movs	r1, #3
 8000d50:	fa01 f303 	lsl.w	r3, r1, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	401a      	ands	r2, r3
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	fa93 f3a3 	rbit	r3, r3
 8000d62:	61bb      	str	r3, [r7, #24]
  return result;
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	fab3 f383 	clz	r3, r3
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	fa01 f303 	lsl.w	r3, r1, r3
 8000d74:	431a      	orrs	r2, r3
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	601a      	str	r2, [r3, #0]
}
 8000d7a:	bf00      	nop
 8000d7c:	3724      	adds	r7, #36	; 0x24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000d86:	b480      	push	{r7}
 8000d88:	b085      	sub	sp, #20
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	60f8      	str	r0, [r7, #12]
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	685a      	ldr	r2, [r3, #4]
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	fb01 f303 	mul.w	r3, r1, r3
 8000da4:	431a      	orrs	r2, r3
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	605a      	str	r2, [r3, #4]
}
 8000daa:	bf00      	nop
 8000dac:	3714      	adds	r7, #20
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000db6:	b480      	push	{r7}
 8000db8:	b089      	sub	sp, #36	; 0x24
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	60f8      	str	r0, [r7, #12]
 8000dbe:	60b9      	str	r1, [r7, #8]
 8000dc0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	689a      	ldr	r2, [r3, #8]
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	fa93 f3a3 	rbit	r3, r3
 8000dd0:	613b      	str	r3, [r7, #16]
  return result;
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	fab3 f383 	clz	r3, r3
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	2103      	movs	r1, #3
 8000dde:	fa01 f303 	lsl.w	r3, r1, r3
 8000de2:	43db      	mvns	r3, r3
 8000de4:	401a      	ands	r2, r3
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	fa93 f3a3 	rbit	r3, r3
 8000df0:	61bb      	str	r3, [r7, #24]
  return result;
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	fab3 f383 	clz	r3, r3
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	6879      	ldr	r1, [r7, #4]
 8000dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000e02:	431a      	orrs	r2, r3
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000e08:	bf00      	nop
 8000e0a:	3724      	adds	r7, #36	; 0x24
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	; 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	68da      	ldr	r2, [r3, #12]
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	fa93 f3a3 	rbit	r3, r3
 8000e2e:	613b      	str	r3, [r7, #16]
  return result;
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	fab3 f383 	clz	r3, r3
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	2103      	movs	r1, #3
 8000e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	401a      	ands	r2, r3
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	fa93 f3a3 	rbit	r3, r3
 8000e4e:	61bb      	str	r3, [r7, #24]
  return result;
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	fab3 f383 	clz	r3, r3
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e60:	431a      	orrs	r2, r3
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	60da      	str	r2, [r3, #12]
}
 8000e66:	bf00      	nop
 8000e68:	3724      	adds	r7, #36	; 0x24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000e72:	b480      	push	{r7}
 8000e74:	b089      	sub	sp, #36	; 0x24
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	60f8      	str	r0, [r7, #12]
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	6a1a      	ldr	r2, [r3, #32]
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	fa93 f3a3 	rbit	r3, r3
 8000e8c:	613b      	str	r3, [r7, #16]
  return result;
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	fab3 f383 	clz	r3, r3
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	210f      	movs	r1, #15
 8000e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	401a      	ands	r2, r3
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	fa93 f3a3 	rbit	r3, r3
 8000eac:	61bb      	str	r3, [r7, #24]
  return result;
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	fab3 f383 	clz	r3, r3
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	6879      	ldr	r1, [r7, #4]
 8000eba:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebe:	431a      	orrs	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000ec4:	bf00      	nop
 8000ec6:	3724      	adds	r7, #36	; 0x24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b089      	sub	sp, #36	; 0x24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	0a1b      	lsrs	r3, r3, #8
 8000ee4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	fa93 f3a3 	rbit	r3, r3
 8000eec:	613b      	str	r3, [r7, #16]
  return result;
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	fab3 f383 	clz	r3, r3
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	210f      	movs	r1, #15
 8000efa:	fa01 f303 	lsl.w	r3, r1, r3
 8000efe:	43db      	mvns	r3, r3
 8000f00:	401a      	ands	r2, r3
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	0a1b      	lsrs	r3, r3, #8
 8000f06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	fa93 f3a3 	rbit	r3, r3
 8000f0e:	61bb      	str	r3, [r7, #24]
  return result;
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	fab3 f383 	clz	r3, r3
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f20:	431a      	orrs	r2, r3
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8000f26:	bf00      	nop
 8000f28:	3724      	adds	r7, #36	; 0x24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b088      	sub	sp, #32
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	fa93 f3a3 	rbit	r3, r3
 8000f48:	613b      	str	r3, [r7, #16]
  return result;
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	fab3 f383 	clz	r3, r3
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000f54:	e051      	b.n	8000ffa <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	4013      	ands	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d043      	beq.n	8000ff4 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d003      	beq.n	8000f7c <LL_GPIO_Init+0x4a>
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d10e      	bne.n	8000f9a <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	461a      	mov	r2, r3
 8000f82:	69b9      	ldr	r1, [r7, #24]
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff ff16 	bl	8000db6 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	6819      	ldr	r1, [r3, #0]
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	461a      	mov	r2, r3
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff fef6 	bl	8000d86 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	691b      	ldr	r3, [r3, #16]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	69b9      	ldr	r1, [r7, #24]
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff ff36 	bl	8000e14 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d11a      	bne.n	8000fe6 <LL_GPIO_Init+0xb4>
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	fa93 f3a3 	rbit	r3, r3
 8000fba:	60bb      	str	r3, [r7, #8]
  return result;
 8000fbc:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000fbe:	fab3 f383 	clz	r3, r3
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	2b07      	cmp	r3, #7
 8000fc6:	d807      	bhi.n	8000fd8 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	695b      	ldr	r3, [r3, #20]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	69b9      	ldr	r1, [r7, #24]
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff ff4e 	bl	8000e72 <LL_GPIO_SetAFPin_0_7>
 8000fd6:	e006      	b.n	8000fe6 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	69b9      	ldr	r1, [r7, #24]
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ff75 	bl	8000ed0 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	461a      	mov	r2, r3
 8000fec:	69b9      	ldr	r1, [r7, #24]
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff fe9a 	bl	8000d28 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	fa22 f303 	lsr.w	r3, r2, r3
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1a6      	bne.n	8000f56 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3720      	adds	r7, #32
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <LL_I2C_Enable>:
{
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f043 0201 	orr.w	r2, r3, #1
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	601a      	str	r2, [r3, #0]
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <LL_I2C_Disable>:
{
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f023 0201 	bic.w	r2, r3, #1
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	601a      	str	r2, [r3, #0]
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <LL_I2C_ConfigFilters>:
{
 8001052:	b480      	push	{r7}
 8001054:	b085      	sub	sp, #20
 8001056:	af00      	add	r7, sp, #0
 8001058:	60f8      	str	r0, [r7, #12]
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	0219      	lsls	r1, r3, #8
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	430b      	orrs	r3, r1
 800106e:	431a      	orrs	r2, r3
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	601a      	str	r2, [r3, #0]
}
 8001074:	bf00      	nop
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <LL_I2C_SetOwnAddress1>:
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001094:	f023 0307 	bic.w	r3, r3, #7
 8001098:	68b9      	ldr	r1, [r7, #8]
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	430a      	orrs	r2, r1
 800109e:	431a      	orrs	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	609a      	str	r2, [r3, #8]
}
 80010a4:	bf00      	nop
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <LL_I2C_EnableOwnAddress1>:
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	609a      	str	r2, [r3, #8]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <LL_I2C_DisableOwnAddress1>:
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	609a      	str	r2, [r3, #8]
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <LL_I2C_SetTiming>:
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	611a      	str	r2, [r3, #16]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <LL_I2C_SetMode>:
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	431a      	orrs	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	601a      	str	r2, [r3, #0]
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	431a      	orrs	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	605a      	str	r2, [r3, #4]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff ff65 	bl	8001032 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	6899      	ldr	r1, [r3, #8]
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	461a      	mov	r2, r3
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff ff6d 	bl	8001052 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	4619      	mov	r1, r3
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ffb6 	bl	80010f0 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff44 	bl	8001012 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff ffa0 	bl	80010d0 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	6919      	ldr	r1, [r3, #16]
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	461a      	mov	r2, r3
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff ff70 	bl	8001080 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d002      	beq.n	80011ae <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff ff81 	bl	80010b0 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4619      	mov	r1, r3
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ffa9 	bl	800110c <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	4619      	mov	r1, r3
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ffb6 	bl	8001132 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <LL_RTC_SetHourFormat>:
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	431a      	orrs	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	609a      	str	r2, [r3, #8]
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <LL_RTC_GetHourFormat>:
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_FMT));
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
 8001206:	4618      	mov	r0, r3
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <LL_RTC_EnableInitMode>:
{
 8001212:	b480      	push	{r7}
 8001214:	b083      	sub	sp, #12
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, RTC_INIT_MASK);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f04f 32ff 	mov.w	r2, #4294967295
 8001220:	60da      	str	r2, [r3, #12]
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <LL_RTC_DisableInitMode>:
{
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800123c:	60da      	str	r2, [r3, #12]
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <LL_RTC_IsShadowRegBypassEnabled>:
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD));
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f003 0320 	and.w	r3, r3, #32
 800125a:	2b20      	cmp	r3, #32
 800125c:	bf0c      	ite	eq
 800125e:	2301      	moveq	r3, #1
 8001260:	2300      	movne	r3, #0
 8001262:	b2db      	uxtb	r3, r3
}
 8001264:	4618      	mov	r0, r3
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <LL_RTC_SetAsynchPrescaler>:
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	041b      	lsls	r3, r3, #16
 8001286:	431a      	orrs	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	611a      	str	r2, [r3, #16]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <LL_RTC_SetSynchPrescaler>:
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	691b      	ldr	r3, [r3, #16]
 80012a6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80012aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80012ae:	683a      	ldr	r2, [r7, #0]
 80012b0:	431a      	orrs	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	611a      	str	r2, [r3, #16]
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <LL_RTC_EnableWriteProtection>:
{
 80012c2:	b480      	push	{r7}
 80012c4:	b083      	sub	sp, #12
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	22ff      	movs	r2, #255	; 0xff
 80012ce:	625a      	str	r2, [r3, #36]	; 0x24
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <LL_RTC_DisableWriteProtection>:
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	22ca      	movs	r2, #202	; 0xca
 80012e8:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2253      	movs	r2, #83	; 0x53
 80012ee:	625a      	str	r2, [r3, #36]	; 0x24
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <LL_RTC_TIME_Config>:
{
 80012fc:	b480      	push	{r7}
 80012fe:	b087      	sub	sp, #28
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
 8001308:	603b      	str	r3, [r7, #0]
  uint32_t temp = 0U;
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	041b      	lsls	r3, r3, #16
 8001312:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
  temp = Format12_24                                                                                    | \
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	431a      	orrs	r2, r3
         (((Minutes & 0xF0U) << (RTC_TR_MNT_Pos - 4U)) | ((Minutes & 0x0FU) << RTC_TR_MNU_Pos)) | \
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	021b      	lsls	r3, r3, #8
 800131e:	b29b      	uxth	r3, r3
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 8001320:	431a      	orrs	r2, r3
         (((Seconds & 0xF0U) << (RTC_TR_ST_Pos - 4U)) | ((Seconds & 0x0FU) << RTC_TR_SU_Pos));
 8001322:	6a3b      	ldr	r3, [r7, #32]
 8001324:	b2db      	uxtb	r3, r3
  temp = Format12_24                                                                                    | \
 8001326:	4313      	orrs	r3, r2
 8001328:	617b      	str	r3, [r7, #20]
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
 8001332:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001336:	697a      	ldr	r2, [r7, #20]
 8001338:	431a      	orrs	r2, r3
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	601a      	str	r2, [r3, #0]
}
 800133e:	bf00      	nop
 8001340:	371c      	adds	r7, #28
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <LL_RTC_DATE_Config>:
{
 800134c:	b480      	push	{r7}
 800134e:	b087      	sub	sp, #28
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
 8001358:	603b      	str	r3, [r7, #0]
  uint32_t temp = 0U;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	035a      	lsls	r2, r3, #13
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 8001362:	6a3b      	ldr	r3, [r7, #32]
 8001364:	041b      	lsls	r3, r3, #16
 8001366:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 800136a:	431a      	orrs	r2, r3
         (((Month & 0xF0U) << (RTC_DR_MT_Pos - 4U)) | ((Month & 0x0FU) << RTC_DR_MU_Pos)) | \
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	021b      	lsls	r3, r3, #8
 8001370:	b29b      	uxth	r3, r3
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 8001372:	431a      	orrs	r2, r3
         (((Day & 0xF0U) << (RTC_DR_DT_Pos - 4U)) | ((Day & 0x0FU) << RTC_DR_DU_Pos));
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	b2db      	uxtb	r3, r3
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8001378:	4313      	orrs	r3, r2
 800137a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	685a      	ldr	r2, [r3, #4]
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <LL_RTC_DATE_Config+0x4c>)
 8001382:	4013      	ands	r3, r2
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	431a      	orrs	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	605a      	str	r2, [r3, #4]
}
 800138c:	bf00      	nop
 800138e:	371c      	adds	r7, #28
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	ff0000c0 	.word	0xff0000c0

0800139c <LL_RTC_IsActiveFlag_INIT>:
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013ac:	2b40      	cmp	r3, #64	; 0x40
 80013ae:	bf0c      	ite	eq
 80013b0:	2301      	moveq	r3, #1
 80013b2:	2300      	movne	r3, #0
 80013b4:	b2db      	uxtb	r3, r3
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <LL_RTC_IsActiveFlag_RS>:
{
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	f003 0320 	and.w	r3, r3, #32
 80013d2:	2b20      	cmp	r3, #32
 80013d4:	bf0c      	ite	eq
 80013d6:	2301      	moveq	r3, #1
 80013d8:	2300      	movne	r3, #0
 80013da:	b2db      	uxtb	r3, r3
}
 80013dc:	4618      	mov	r0, r3
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <LL_RTC_ClearFlag_RS>:
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013f8:	f063 02a0 	orn	r2, r3, #160	; 0xa0
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	60da      	str	r2, [r3, #12]
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8001410:	4b07      	ldr	r3, [pc, #28]	; (8001430 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800141c:	bf0c      	ite	eq
 800141e:	2301      	moveq	r3, #1
 8001420:	2300      	movne	r3, #0
 8001422:	b2db      	uxtb	r3, r3
}
 8001424:	4618      	mov	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	e000e010 	.word	0xe000e010

08001434 <LL_RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized
  */
ErrorStatus LL_RTC_Init(RTC_TypeDef *RTCx, LL_RTC_InitTypeDef *RTC_InitStruct)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_RTC_HOURFORMAT(RTC_InitStruct->HourFormat));
  assert_param(IS_LL_RTC_ASYNCH_PREDIV(RTC_InitStruct->AsynchPrescaler));
  assert_param(IS_LL_RTC_SYNCH_PREDIV(RTC_InitStruct->SynchPrescaler));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff ff4a 	bl	80012dc <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f000 f96d 	bl	8001728 <LL_RTC_EnterInitMode>
 800144e:	4603      	mov	r3, r0
 8001450:	2b01      	cmp	r3, #1
 8001452:	d016      	beq.n	8001482 <LL_RTC_Init+0x4e>
  {
    /* Set Hour Format */
    LL_RTC_SetHourFormat(RTCx, RTC_InitStruct->HourFormat);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4619      	mov	r1, r3
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff feb8 	bl	80011d0 <LL_RTC_SetHourFormat>

    /* Configure Synchronous and Asynchronous prescaler factor */
    LL_RTC_SetSynchPrescaler(RTCx, RTC_InitStruct->SynchPrescaler);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	4619      	mov	r1, r3
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff ff16 	bl	8001298 <LL_RTC_SetSynchPrescaler>
    LL_RTC_SetAsynchPrescaler(RTCx, RTC_InitStruct->AsynchPrescaler);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	4619      	mov	r1, r3
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff fefc 	bl	8001270 <LL_RTC_SetAsynchPrescaler>

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff fed8 	bl	800122e <LL_RTC_DisableInitMode>

    status = SUCCESS;
 800147e:	2300      	movs	r3, #0
 8001480:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff ff1d 	bl	80012c2 <LL_RTC_EnableWriteProtection>

  return status;
 8001488:	7bfb      	ldrb	r3, [r7, #15]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <LL_RTC_TIME_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus LL_RTC_TIME_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_TimeTypeDef *RTC_TimeStruct)
{
 8001494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001496:	b089      	sub	sp, #36	; 0x24
 8001498:	af02      	add	r7, sp, #8
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));

  if (RTC_Format == LL_RTC_FORMAT_BIN)
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d109      	bne.n	80014be <LL_RTC_TIME_Init+0x2a>
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 80014aa:	68f8      	ldr	r0, [r7, #12]
 80014ac:	f7ff fea3 	bl	80011f6 <LL_RTC_GetHourFormat>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d10c      	bne.n	80014d0 <LL_RTC_TIME_Init+0x3c>
      assert_param(IS_LL_RTC_HOUR12(RTC_TimeStruct->Hours));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_TimeStruct->TimeFormat));
    }
    else
    {
      RTC_TimeStruct->TimeFormat = 0x00U;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	e008      	b.n	80014d0 <LL_RTC_TIME_Init+0x3c>
    assert_param(IS_LL_RTC_MINUTES(RTC_TimeStruct->Minutes));
    assert_param(IS_LL_RTC_SECONDS(RTC_TimeStruct->Seconds));
  }
  else
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f7ff fe99 	bl	80011f6 <LL_RTC_GetHourFormat>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d102      	bne.n	80014d0 <LL_RTC_TIME_Init+0x3c>
      assert_param(IS_LL_RTC_HOUR12(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_TimeStruct->TimeFormat));
    }
    else
    {
      RTC_TimeStruct->TimeFormat = 0x00U;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
    assert_param(IS_LL_RTC_MINUTES(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Minutes)));
    assert_param(IS_LL_RTC_SECONDS(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Seconds)));
  }

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f7ff ff03 	bl	80012dc <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 80014d6:	68f8      	ldr	r0, [r7, #12]
 80014d8:	f000 f926 	bl	8001728 <LL_RTC_EnterInitMode>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d073      	beq.n	80015ca <LL_RTC_TIME_Init+0x136>
  {
    /* Check the input parameters format */
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d00f      	beq.n	8001508 <LL_RTC_TIME_Init+0x74>
    {
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6819      	ldr	r1, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	791b      	ldrb	r3, [r3, #4]
 80014f0:	461a      	mov	r2, r3
                         RTC_TimeStruct->Minutes, RTC_TimeStruct->Seconds);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	795b      	ldrb	r3, [r3, #5]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 80014f6:	4618      	mov	r0, r3
                         RTC_TimeStruct->Minutes, RTC_TimeStruct->Seconds);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	799b      	ldrb	r3, [r3, #6]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	4603      	mov	r3, r0
 8001500:	68f8      	ldr	r0, [r7, #12]
 8001502:	f7ff fefb 	bl	80012fc <LL_RTC_TIME_Config>
 8001506:	e04f      	b.n	80015a8 <LL_RTC_TIME_Init+0x114>
    }
    else
    {
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681c      	ldr	r4, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	791b      	ldrb	r3, [r3, #4]
 8001510:	4a32      	ldr	r2, [pc, #200]	; (80015dc <LL_RTC_TIME_Init+0x148>)
 8001512:	fba2 2303 	umull	r2, r3, r2, r3
 8001516:	08db      	lsrs	r3, r3, #3
 8001518:	b2db      	uxtb	r3, r3
 800151a:	011b      	lsls	r3, r3, #4
 800151c:	b2d8      	uxtb	r0, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	791a      	ldrb	r2, [r3, #4]
 8001522:	4b2e      	ldr	r3, [pc, #184]	; (80015dc <LL_RTC_TIME_Init+0x148>)
 8001524:	fba3 1302 	umull	r1, r3, r3, r2
 8001528:	08d9      	lsrs	r1, r3, #3
 800152a:	460b      	mov	r3, r1
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	440b      	add	r3, r1
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	b2db      	uxtb	r3, r3
 8001536:	4303      	orrs	r3, r0
 8001538:	b2db      	uxtb	r3, r3
 800153a:	461d      	mov	r5, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Minutes),
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	795b      	ldrb	r3, [r3, #5]
 8001540:	4a26      	ldr	r2, [pc, #152]	; (80015dc <LL_RTC_TIME_Init+0x148>)
 8001542:	fba2 2303 	umull	r2, r3, r2, r3
 8001546:	08db      	lsrs	r3, r3, #3
 8001548:	b2db      	uxtb	r3, r3
 800154a:	011b      	lsls	r3, r3, #4
 800154c:	b2d8      	uxtb	r0, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	795a      	ldrb	r2, [r3, #5]
 8001552:	4b22      	ldr	r3, [pc, #136]	; (80015dc <LL_RTC_TIME_Init+0x148>)
 8001554:	fba3 1302 	umull	r1, r3, r3, r2
 8001558:	08d9      	lsrs	r1, r3, #3
 800155a:	460b      	mov	r3, r1
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	440b      	add	r3, r1
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	b2db      	uxtb	r3, r3
 8001566:	4303      	orrs	r3, r0
 8001568:	b2db      	uxtb	r3, r3
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 800156a:	461e      	mov	r6, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Seconds));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	799b      	ldrb	r3, [r3, #6]
 8001570:	4a1a      	ldr	r2, [pc, #104]	; (80015dc <LL_RTC_TIME_Init+0x148>)
 8001572:	fba2 2303 	umull	r2, r3, r2, r3
 8001576:	08db      	lsrs	r3, r3, #3
 8001578:	b2db      	uxtb	r3, r3
 800157a:	011b      	lsls	r3, r3, #4
 800157c:	b2d8      	uxtb	r0, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	799a      	ldrb	r2, [r3, #6]
 8001582:	4b16      	ldr	r3, [pc, #88]	; (80015dc <LL_RTC_TIME_Init+0x148>)
 8001584:	fba3 1302 	umull	r1, r3, r3, r2
 8001588:	08d9      	lsrs	r1, r3, #3
 800158a:	460b      	mov	r3, r1
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	440b      	add	r3, r1
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	b2db      	uxtb	r3, r3
 8001596:	4303      	orrs	r3, r0
 8001598:	b2db      	uxtb	r3, r3
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	4633      	mov	r3, r6
 800159e:	462a      	mov	r2, r5
 80015a0:	4621      	mov	r1, r4
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f7ff feaa 	bl	80012fc <LL_RTC_TIME_Config>
    }

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	f7ff fe40 	bl	800122e <LL_RTC_DisableInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	f7ff fe4b 	bl	800124a <LL_RTC_IsShadowRegBypassEnabled>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d105      	bne.n	80015c6 <LL_RTC_TIME_Init+0x132>
    {
      status = LL_RTC_WaitForSynchro(RTCx);
 80015ba:	68f8      	ldr	r0, [r7, #12]
 80015bc:	f000 f8e9 	bl	8001792 <LL_RTC_WaitForSynchro>
 80015c0:	4603      	mov	r3, r0
 80015c2:	75fb      	strb	r3, [r7, #23]
 80015c4:	e001      	b.n	80015ca <LL_RTC_TIME_Init+0x136>
    }
    else
    {
      status = SUCCESS;
 80015c6:	2300      	movs	r3, #0
 80015c8:	75fb      	strb	r3, [r7, #23]
    }
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	f7ff fe79 	bl	80012c2 <LL_RTC_EnableWriteProtection>

  return status;
 80015d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	371c      	adds	r7, #28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015da:	bf00      	nop
 80015dc:	cccccccd 	.word	0xcccccccd

080015e0 <LL_RTC_DATE_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Day register is configured
  *          - ERROR: RTC Day register is not configured
  */
ErrorStatus LL_RTC_DATE_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_DateTypeDef *RTC_DateStruct)
{
 80015e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015e2:	b089      	sub	sp, #36	; 0x24
 80015e4:	af02      	add	r7, sp, #8
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == LL_RTC_FORMAT_BIN) && ((RTC_DateStruct->Month & 0x10U) == 0x10U))
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10e      	bne.n	8001614 <LL_RTC_DATE_Init+0x34>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	785b      	ldrb	r3, [r3, #1]
 80015fa:	f003 0310 	and.w	r3, r3, #16
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d008      	beq.n	8001614 <LL_RTC_DATE_Init+0x34>
  {
    RTC_DateStruct->Month = (RTC_DateStruct->Month & (uint32_t)~(0x10U)) + 0x0AU;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	785b      	ldrb	r3, [r3, #1]
 8001606:	f023 0310 	bic.w	r3, r3, #16
 800160a:	b2db      	uxtb	r3, r3
 800160c:	330a      	adds	r3, #10
 800160e:	b2da      	uxtb	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	705a      	strb	r2, [r3, #1]
    assert_param(IS_LL_RTC_DAY(__LL_RTC_CONVERT_BCD2BIN(RTC_DateStruct->Day)));
  }
  assert_param(IS_LL_RTC_WEEKDAY(RTC_DateStruct->WeekDay));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	f7ff fe61 	bl	80012dc <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f000 f884 	bl	8001728 <LL_RTC_EnterInitMode>
 8001620:	4603      	mov	r3, r0
 8001622:	2b01      	cmp	r3, #1
 8001624:	d075      	beq.n	8001712 <LL_RTC_DATE_Init+0x132>
  {
    /* Check the input parameters format */
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d010      	beq.n	800164e <LL_RTC_DATE_Init+0x6e>
    {
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, RTC_DateStruct->Day, RTC_DateStruct->Month, RTC_DateStruct->Year);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	4619      	mov	r1, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	789b      	ldrb	r3, [r3, #2]
 8001636:	461a      	mov	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	785b      	ldrb	r3, [r3, #1]
 800163c:	4618      	mov	r0, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	78db      	ldrb	r3, [r3, #3]
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	4603      	mov	r3, r0
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f7ff fe80 	bl	800134c <LL_RTC_DATE_Config>
 800164c:	e050      	b.n	80016f0 <LL_RTC_DATE_Init+0x110>
    }
    else
    {
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	461c      	mov	r4, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	789b      	ldrb	r3, [r3, #2]
 8001658:	4a32      	ldr	r2, [pc, #200]	; (8001724 <LL_RTC_DATE_Init+0x144>)
 800165a:	fba2 2303 	umull	r2, r3, r2, r3
 800165e:	08db      	lsrs	r3, r3, #3
 8001660:	b2db      	uxtb	r3, r3
 8001662:	011b      	lsls	r3, r3, #4
 8001664:	b2d8      	uxtb	r0, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	789a      	ldrb	r2, [r3, #2]
 800166a:	4b2e      	ldr	r3, [pc, #184]	; (8001724 <LL_RTC_DATE_Init+0x144>)
 800166c:	fba3 1302 	umull	r1, r3, r3, r2
 8001670:	08d9      	lsrs	r1, r3, #3
 8001672:	460b      	mov	r3, r1
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	440b      	add	r3, r1
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	b2db      	uxtb	r3, r3
 800167e:	4303      	orrs	r3, r0
 8001680:	b2db      	uxtb	r3, r3
 8001682:	461d      	mov	r5, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	785b      	ldrb	r3, [r3, #1]
 8001688:	4a26      	ldr	r2, [pc, #152]	; (8001724 <LL_RTC_DATE_Init+0x144>)
 800168a:	fba2 2303 	umull	r2, r3, r2, r3
 800168e:	08db      	lsrs	r3, r3, #3
 8001690:	b2db      	uxtb	r3, r3
 8001692:	011b      	lsls	r3, r3, #4
 8001694:	b2d8      	uxtb	r0, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	785a      	ldrb	r2, [r3, #1]
 800169a:	4b22      	ldr	r3, [pc, #136]	; (8001724 <LL_RTC_DATE_Init+0x144>)
 800169c:	fba3 1302 	umull	r1, r3, r3, r2
 80016a0:	08d9      	lsrs	r1, r3, #3
 80016a2:	460b      	mov	r3, r1
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	440b      	add	r3, r1
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	4303      	orrs	r3, r0
 80016b0:	b2db      	uxtb	r3, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 80016b2:	461e      	mov	r6, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	78db      	ldrb	r3, [r3, #3]
 80016b8:	4a1a      	ldr	r2, [pc, #104]	; (8001724 <LL_RTC_DATE_Init+0x144>)
 80016ba:	fba2 2303 	umull	r2, r3, r2, r3
 80016be:	08db      	lsrs	r3, r3, #3
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	011b      	lsls	r3, r3, #4
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	78da      	ldrb	r2, [r3, #3]
 80016ca:	4b16      	ldr	r3, [pc, #88]	; (8001724 <LL_RTC_DATE_Init+0x144>)
 80016cc:	fba3 1302 	umull	r1, r3, r3, r2
 80016d0:	08d9      	lsrs	r1, r3, #3
 80016d2:	460b      	mov	r3, r1
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	440b      	add	r3, r1
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	4303      	orrs	r3, r0
 80016e0:	b2db      	uxtb	r3, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	4633      	mov	r3, r6
 80016e6:	462a      	mov	r2, r5
 80016e8:	4621      	mov	r1, r4
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f7ff fe2e 	bl	800134c <LL_RTC_DATE_Config>
    }

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 80016f0:	68f8      	ldr	r0, [r7, #12]
 80016f2:	f7ff fd9c 	bl	800122e <LL_RTC_DisableInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	f7ff fda7 	bl	800124a <LL_RTC_IsShadowRegBypassEnabled>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d105      	bne.n	800170e <LL_RTC_DATE_Init+0x12e>
    {
      status = LL_RTC_WaitForSynchro(RTCx);
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f000 f845 	bl	8001792 <LL_RTC_WaitForSynchro>
 8001708:	4603      	mov	r3, r0
 800170a:	75fb      	strb	r3, [r7, #23]
 800170c:	e001      	b.n	8001712 <LL_RTC_DATE_Init+0x132>
    }
    else
    {
      status = SUCCESS;
 800170e:	2300      	movs	r3, #0
 8001710:	75fb      	strb	r3, [r7, #23]
    }
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	f7ff fdd5 	bl	80012c2 <LL_RTC_EnableWriteProtection>

  return status;
 8001718:	7dfb      	ldrb	r3, [r7, #23]
}
 800171a:	4618      	mov	r0, r3
 800171c:	371c      	adds	r7, #28
 800171e:	46bd      	mov	sp, r7
 8001720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001722:	bf00      	nop
 8001724:	cccccccd 	.word	0xcccccccd

08001728 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 8001730:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001734:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 8001736:	2300      	movs	r3, #0
 8001738:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff fe2c 	bl	800139c <LL_RTC_IsActiveFlag_INIT>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d11e      	bne.n	8001788 <LL_RTC_EnterInitMode+0x60>
  {
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff fd61 	bl	8001212 <LL_RTC_EnableInitMode>

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff fe23 	bl	800139c <LL_RTC_IsActiveFlag_INIT>
 8001756:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 8001758:	e010      	b.n	800177c <LL_RTC_EnterInitMode+0x54>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 800175a:	f7ff fe57 	bl	800140c <LL_SYSTICK_IsActiveCounterFlag>
 800175e:	4603      	mov	r3, r0
 8001760:	2b01      	cmp	r3, #1
 8001762:	d102      	bne.n	800176a <LL_RTC_EnterInitMode+0x42>
      {
        timeout --;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	3b01      	subs	r3, #1
 8001768:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff fe16 	bl	800139c <LL_RTC_IsActiveFlag_INIT>
 8001770:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d101      	bne.n	800177c <LL_RTC_EnterInitMode+0x54>
      {
        status = ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d002      	beq.n	8001788 <LL_RTC_EnterInitMode+0x60>
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d1e8      	bne.n	800175a <LL_RTC_EnterInitMode+0x32>
      }
    }
  }
  return status;
 8001788:	7dfb      	ldrb	r3, [r7, #23]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <LL_RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b086      	sub	sp, #24
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 800179a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800179e:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 80017a0:	2300      	movs	r3, #0
 80017a2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 80017a4:	2300      	movs	r3, #0
 80017a6:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTCx);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff fe1d 	bl	80013e8 <LL_RTC_ClearFlag_RS>

  /* Wait the registers to be synchronised */
  tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff fe07 	bl	80013c2 <LL_RTC_IsActiveFlag_RS>
 80017b4:	6138      	str	r0, [r7, #16]
  while ((timeout != 0U) && (tmp != 0U))
 80017b6:	e010      	b.n	80017da <LL_RTC_WaitForSynchro+0x48>
  {
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 80017b8:	f7ff fe28 	bl	800140c <LL_SYSTICK_IsActiveCounterFlag>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d102      	bne.n	80017c8 <LL_RTC_WaitForSynchro+0x36>
    {
      timeout--;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	3b01      	subs	r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]
    }
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff fdfa 	bl	80013c2 <LL_RTC_IsActiveFlag_RS>
 80017ce:	6138      	str	r0, [r7, #16]
    if (timeout == 0U)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <LL_RTC_WaitForSynchro+0x48>
    {
      status = ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	75fb      	strb	r3, [r7, #23]
  while ((timeout != 0U) && (tmp != 0U))
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d002      	beq.n	80017e6 <LL_RTC_WaitForSynchro+0x54>
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1e8      	bne.n	80017b8 <LL_RTC_WaitForSynchro+0x26>
    }
  }

  if (status != ERROR)
 80017e6:	7dfb      	ldrb	r3, [r7, #23]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d01e      	beq.n	800182a <LL_RTC_WaitForSynchro+0x98>
  {
    timeout = RTC_SYNCHRO_TIMEOUT;
 80017ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f0:	60fb      	str	r3, [r7, #12]
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff fde5 	bl	80013c2 <LL_RTC_IsActiveFlag_RS>
 80017f8:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 80017fa:	e010      	b.n	800181e <LL_RTC_WaitForSynchro+0x8c>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 80017fc:	f7ff fe06 	bl	800140c <LL_SYSTICK_IsActiveCounterFlag>
 8001800:	4603      	mov	r3, r0
 8001802:	2b01      	cmp	r3, #1
 8001804:	d102      	bne.n	800180c <LL_RTC_WaitForSynchro+0x7a>
      {
        timeout--;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	3b01      	subs	r3, #1
 800180a:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff fdd8 	bl	80013c2 <LL_RTC_IsActiveFlag_RS>
 8001812:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <LL_RTC_WaitForSynchro+0x8c>
      {
        status = ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d002      	beq.n	800182a <LL_RTC_WaitForSynchro+0x98>
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d1e8      	bne.n	80017fc <LL_RTC_WaitForSynchro+0x6a>
      }
    }
  }

  return (status);
 800182a:	7dfb      	ldrb	r3, [r7, #23]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800183e:	4909      	ldr	r1, [pc, #36]	; (8001864 <LL_InitTick+0x30>)
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	fbb2 f3f3 	udiv	r3, r2, r3
 8001848:	3b01      	subs	r3, #1
 800184a:	604b      	str	r3, [r1, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800184c:	4b05      	ldr	r3, [pc, #20]	; (8001864 <LL_InitTick+0x30>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001852:	4b04      	ldr	r3, [pc, #16]	; (8001864 <LL_InitTick+0x30>)
 8001854:	2205      	movs	r2, #5
 8001856:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000e010 	.word	0xe000e010

08001868 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001870:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff ffdd 	bl	8001834 <LL_InitTick>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800188c:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <LL_SetSystemCoreClock+0x1c>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6013      	str	r3, [r2, #0]
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	20000000 	.word	0x20000000

080018a4 <HAL_RTC_Init>:
 */
#include "HAL_RTC.h"

/*This function initialize the RTC module*/
void HAL_RTC_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
	MX_RTC_Init();
 80018a8:	f7ff f980 	bl	8000bac <MX_RTC_Init>
	return;
 80018ac:	bf00      	nop
}
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <HAL_TEMPSen_Init>:
 *      Author: carlo
 */
#include "HAL_TEMPSen.h"

void HAL_TEMPSen_Init()
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
	MX_I2C1_Init();
 80018b4:	f7fe fd48 	bl	8000348 <MX_I2C1_Init>
	return;
 80018b8:	bf00      	nop
}
 80018ba:	bd80      	pop	{r7, pc}

080018bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018f4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018c0:	480d      	ldr	r0, [pc, #52]	; (80018f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80018c2:	490e      	ldr	r1, [pc, #56]	; (80018fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80018c4:	4a0e      	ldr	r2, [pc, #56]	; (8001900 <LoopForever+0xe>)
  movs r3, #0
 80018c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018c8:	e002      	b.n	80018d0 <LoopCopyDataInit>

080018ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ce:	3304      	adds	r3, #4

080018d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d4:	d3f9      	bcc.n	80018ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018d6:	4a0b      	ldr	r2, [pc, #44]	; (8001904 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018d8:	4c0b      	ldr	r4, [pc, #44]	; (8001908 <LoopForever+0x16>)
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018dc:	e001      	b.n	80018e2 <LoopFillZerobss>

080018de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018e0:	3204      	adds	r2, #4

080018e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e4:	d3fb      	bcc.n	80018de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018e6:	f7ff fa0d 	bl	8000d04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ea:	f000 f811 	bl	8001910 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018ee:	f7fe fffd 	bl	80008ec <main>

080018f2 <LoopForever>:

LoopForever:
    b LoopForever
 80018f2:	e7fe      	b.n	80018f2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018f4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80018f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018fc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001900:	08001978 	.word	0x08001978
  ldr r2, =_sbss
 8001904:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001908:	20000020 	.word	0x20000020

0800190c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800190c:	e7fe      	b.n	800190c <ADC1_2_IRQHandler>
	...

08001910 <__libc_init_array>:
 8001910:	b570      	push	{r4, r5, r6, lr}
 8001912:	4e0d      	ldr	r6, [pc, #52]	; (8001948 <__libc_init_array+0x38>)
 8001914:	4c0d      	ldr	r4, [pc, #52]	; (800194c <__libc_init_array+0x3c>)
 8001916:	1ba4      	subs	r4, r4, r6
 8001918:	10a4      	asrs	r4, r4, #2
 800191a:	2500      	movs	r5, #0
 800191c:	42a5      	cmp	r5, r4
 800191e:	d109      	bne.n	8001934 <__libc_init_array+0x24>
 8001920:	4e0b      	ldr	r6, [pc, #44]	; (8001950 <__libc_init_array+0x40>)
 8001922:	4c0c      	ldr	r4, [pc, #48]	; (8001954 <__libc_init_array+0x44>)
 8001924:	f000 f818 	bl	8001958 <_init>
 8001928:	1ba4      	subs	r4, r4, r6
 800192a:	10a4      	asrs	r4, r4, #2
 800192c:	2500      	movs	r5, #0
 800192e:	42a5      	cmp	r5, r4
 8001930:	d105      	bne.n	800193e <__libc_init_array+0x2e>
 8001932:	bd70      	pop	{r4, r5, r6, pc}
 8001934:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001938:	4798      	blx	r3
 800193a:	3501      	adds	r5, #1
 800193c:	e7ee      	b.n	800191c <__libc_init_array+0xc>
 800193e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001942:	4798      	blx	r3
 8001944:	3501      	adds	r5, #1
 8001946:	e7f2      	b.n	800192e <__libc_init_array+0x1e>
 8001948:	08001970 	.word	0x08001970
 800194c:	08001970 	.word	0x08001970
 8001950:	08001970 	.word	0x08001970
 8001954:	08001974 	.word	0x08001974

08001958 <_init>:
 8001958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800195a:	bf00      	nop
 800195c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800195e:	bc08      	pop	{r3}
 8001960:	469e      	mov	lr, r3
 8001962:	4770      	bx	lr

08001964 <_fini>:
 8001964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001966:	bf00      	nop
 8001968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800196a:	bc08      	pop	{r3}
 800196c:	469e      	mov	lr, r3
 800196e:	4770      	bx	lr
